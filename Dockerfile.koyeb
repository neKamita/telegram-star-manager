# Optimized Dockerfile for Koyeb Free Tier (512MB RAM limit)
# Multi-stage build to minimize final image size

# Build stage
FROM eclipse-temurin:21-jdk-alpine AS builder

# Install Maven
RUN apk add --no-cache maven

WORKDIR /app

# Copy Maven files for dependency caching
COPY pom.xml .
COPY .mvn/ .mvn/
COPY mvnw .

# Make Maven wrapper executable
RUN chmod +x mvnw

# Download dependencies (cached layer)
RUN ./mvnw dependency:go-offline -B

# Copy source code
COPY src/ src/

# Build the application (skip tests to save time and resources)
RUN ./mvnw clean package -DskipTests -B

# Runtime stage - minimal image
FROM eclipse-temurin:21-jre-alpine

# Install curl for health checks only
RUN apk add --no-cache curl

# Create non-root user for security
RUN addgroup -S telegram && adduser -S telegram -G telegram

WORKDIR /app

# Copy built JAR from build stage
COPY --from=builder /app/target/TelegramStarManager-*.jar app.jar

# Copy environment template
COPY .env.example .env.example

# Change ownership to non-root user
RUN chown -R telegram:telegram /app

# Switch to non-root user
USER telegram

# Expose port
EXPOSE 8080

# Optimized JVM settings for 512MB RAM limit
ENV JAVA_OPTS="-Xmx400m -Xms200m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UseStringDeduplication -XX:+UseCompressedOops -Djava.security.egd=file:/dev/./urandom"

# Health check optimized for limited resources
HEALTHCHECK --interval=45s --timeout=10s --start-period=90s --retries=2 \
  CMD curl -f http://localhost:8080/api/ping || exit 1

# Run the application
ENTRYPOINT ["sh", "-c", "java $JAVA_OPTS -jar app.jar"]
