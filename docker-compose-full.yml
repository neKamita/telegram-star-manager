# ============================================
# ПОЛНАЯ КОНФИГУРАЦИЯ DOCKER COMPOSE
# TelegramStarManager с системой баланса и платежей
# ============================================

version: '3.8'

networks:
  telegram-star-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local

services:
  # ============================================
  # POSTGRESQL DATABASE
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: telegram-star-postgres
    restart: unless-stopped
    environment:
      # Основные настройки БД
      POSTGRES_DB: ${DATABASE_NAME:-telegram_star_db}
      POSTGRES_USER: ${DATABASE_USER:-telegram_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-secure_password_123}
      
      # Настройки производительности
      POSTGRES_SHARED_PRELOAD_LIBRARIES: 'pg_stat_statements'
      POSTGRES_MAX_CONNECTIONS: '200'
      POSTGRES_SHARED_BUFFERS: '256MB'
      POSTGRES_EFFECTIVE_CACHE_SIZE: '1GB'
      POSTGRES_WORK_MEM: '4MB'
    
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./scripts/create-indexes.sql:/docker-entrypoint-initdb.d/02-indexes.sql:ro
    
    networks:
      telegram-star-network:
        ipv4_address: 172.20.0.2
    
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USER:-telegram_user} -d ${DATABASE_NAME:-telegram_star_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    
    command: >
      postgres
      -c log_statement=all
      -c log_destination=stderr
      -c logging_collector=on
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # ============================================
  # REDIS CACHE
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: telegram-star-redis
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_123}
    
    ports:
      - "${REDIS_PORT:-6379}:6379"
    
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    networks:
      telegram-star-network:
        ipv4_address: 172.20.0.3
    
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s
    
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD:-redis_secure_123}

  # ============================================
  # TELEGRAM BOT APPLICATION
  # ============================================
  telegram-star-manager:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        # Build аргументы
        JAVA_VERSION: "21"
        APP_VERSION: "${APP_VERSION:-1.0.0}"
    
    container_name: telegram-star-app
    restart: unless-stopped
    
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    
    environment:
      # ============================================
      # ОСНОВНЫЕ НАСТРОЙКИ ПРИЛОЖЕНИЯ
      # ============================================
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-production,payment,postgresql}
      SERVER_PORT: 8080
      
      # ============================================
      # НАСТРОЙКИ БАЗЫ ДАННЫХ
      # ============================================
      DATABASE_URL: jdbc:postgresql://postgres:5432/${DATABASE_NAME:-telegram_star_db}
      DATABASE_USER: ${DATABASE_USER:-telegram_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-secure_password_123}
      DATABASE_NAME: ${DATABASE_NAME:-telegram_star_db}
      
      # Настройки пула соединений
      SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE: 20
      SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE: 5
      SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT: 30000
      SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT: 600000
      SPRING_DATASOURCE_HIKARI_MAX_LIFETIME: 1800000
      
      # ============================================
      # НАСТРОЙКИ REDIS
      # ============================================
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_123}
      SPRING_REDIS_TIMEOUT: 2000
      SPRING_REDIS_LETTUCE_POOL_MAX_ACTIVE: 20
      SPRING_REDIS_LETTUCE_POOL_MAX_IDLE: 8
      SPRING_REDIS_LETTUCE_POOL_MIN_IDLE: 2
      
      # ============================================
      # НАСТРОЙКИ TELEGRAM BOT
      # ============================================
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_BOT_USERNAME: ${TELEGRAM_BOT_USERNAME}
      TELEGRAM_WEBHOOK_URL: ${TELEGRAM_WEBHOOK_URL}
      
      # ============================================
      # НАСТРОЙКИ БЕЗОПАСНОСТИ
      # ============================================
      SECURITY_API_KEY: ${SECURITY_API_KEY}
      SECURITY_ADMIN_PASSWORD: ${SECURITY_ADMIN_PASSWORD}
      SECURITY_JWT_SECRET: ${SECURITY_JWT_SECRET}
      SECURITY_RATE_LIMIT_ENABLED: true
      SECURITY_RATE_LIMIT_REQUESTS_PER_MINUTE: 60
      
      # ============================================
      # ОБЩИЕ НАСТРОЙКИ ПЛАТЕЖНЫХ СИСТЕМ
      # ============================================
      PAYMENT_CALLBACK_BASE_URL: ${PAYMENT_CALLBACK_BASE_URL}
      PAYMENT_CALLBACK_SECRET: ${PAYMENT_CALLBACK_SECRET}
      PAYMENT_TIMEOUT_MINUTES: 30
      PAYMENT_MAX_RETRY_ATTEMPTS: 3
      PAYMENT_RETRY_INTERVAL_MINUTES: 5
      PAYMENT_ENABLE_DETAILED_LOGGING: true
      
      # ============================================
      # TON WALLET НАСТРОЙКИ
      # ============================================
      TON_ENABLED: ${TON_ENABLED:-false}
      TON_API_KEY: ${TON_API_KEY:-}
      TON_SECRET_KEY: ${TON_SECRET_KEY:-}
      TON_API_URL: ${TON_API_URL:-https://toncenter.com/api/v3}
      TON_WEBHOOK_URL: ${TON_WEBHOOK_URL:-}
      TON_WALLET_ADDRESS: ${TON_WALLET_ADDRESS:-}
      TON_NETWORK_FEE_PERCENT: 1.0
      TON_TESTNET: ${TON_TESTNET:-true}
      
      # ============================================
      # YOOKASSA НАСТРОЙКИ
      # ============================================
      YOOKASSA_ENABLED: ${YOOKASSA_ENABLED:-false}
      YOOKASSA_SHOP_ID: ${YOOKASSA_SHOP_ID:-}
      YOOKASSA_SECRET_KEY: ${YOOKASSA_SECRET_KEY:-}
      YOOKASSA_API_URL: ${YOOKASSA_API_URL:-https://api.yookassa.ru/v3}
      YOOKASSA_WEBHOOK_URL: ${YOOKASSA_WEBHOOK_URL:-}
      YOOKASSA_AUTO_CAPTURE: true
      YOOKASSA_REQUEST_TIMEOUT_SECONDS: 30
      YOOKASSA_TEST_MODE: ${YOOKASSA_TEST_MODE:-true}
      
      # ============================================
      # QIWI НАСТРОЙКИ
      # ============================================
      QIWI_ENABLED: ${QIWI_ENABLED:-false}
      QIWI_PUBLIC_KEY: ${QIWI_PUBLIC_KEY:-}
      QIWI_SECRET_KEY: ${QIWI_SECRET_KEY:-}
      QIWI_API_URL: ${QIWI_API_URL:-https://api.qiwi.com}
      QIWI_WEBHOOK_URL: ${QIWI_WEBHOOK_URL:-}
      QIWI_SITE_ID: ${QIWI_SITE_ID:-}
      QIWI_DEFAULT_CURRENCY: RUB
      QIWI_BILL_LIFETIME_MINUTES: 60
      QIWI_COMMISSION_PERCENT: 2.5
      
      # ============================================
      # SBERPAY НАСТРОЙКИ
      # ============================================
      SBERPAY_ENABLED: ${SBERPAY_ENABLED:-false}
      SBERPAY_MERCHANT_ID: ${SBERPAY_MERCHANT_ID:-}
      SBERPAY_SECRET_KEY: ${SBERPAY_SECRET_KEY:-}
      SBERPAY_API_URL: ${SBERPAY_API_URL:-https://securepayments.sberbank.ru}
      SBERPAY_WEBHOOK_URL: ${SBERPAY_WEBHOOK_URL:-}
      SBERPAY_API_LOGIN: ${SBERPAY_API_LOGIN:-}
      SBERPAY_API_PASSWORD: ${SBERPAY_API_PASSWORD:-}
      SBERPAY_TEST_MODE: ${SBERPAY_TEST_MODE:-true}
      SBERPAY_DEFAULT_CURRENCY_CODE: 643
      SBERPAY_SESSION_TIMEOUT_MINUTES: 20
      
      # ============================================
      # НАСТРОЙКИ БЕЗОПАСНОСТИ ПЛАТЕЖЕЙ
      # ============================================
      PAYMENT_SECURITY_ENABLE_IP_WHITELIST: ${PAYMENT_SECURITY_ENABLE_IP_WHITELIST:-true}
      PAYMENT_SECURITY_TON_IPS: ${PAYMENT_SECURITY_TON_IPS:-95.142.46.34,95.142.46.35}
      PAYMENT_SECURITY_YOOKASSA_IPS: ${PAYMENT_SECURITY_YOOKASSA_IPS:-185.71.76.0/27,185.71.77.0/27}
      PAYMENT_SECURITY_QIWI_IPS: ${PAYMENT_SECURITY_QIWI_IPS:-79.142.16.0/20,195.189.100.0/22}
      PAYMENT_SECURITY_SBERPAY_IPS: ${PAYMENT_SECURITY_SBERPAY_IPS:-185.71.76.0/27,212.19.125.0/25}
      PAYMENT_SECURITY_RATE_LIMIT: 100
      PAYMENT_SECURITY_ENABLE_RATE_LIMITING: true
      
      # ============================================
      # МОНИТОРИНГ И МЕТРИКИ
      # ============================================
      PAYMENT_MONITORING_ENABLE_METRICS: true
      PAYMENT_MONITORING_ENABLE_HEALTH_CHECKS: true
      PAYMENT_MONITORING_HEALTH_CHECK_INTERVAL: 300
      PAYMENT_MONITORING_ENABLE_ALERTS: true
      PAYMENT_MONITORING_ALERT_EMAIL: ${PAYMENT_MONITORING_ALERT_EMAIL:-admin@yourdomain.com}
      
      # ============================================
      # ЛОГИРОВАНИЕ
      # ============================================
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_SHIT_BACK: ${LOG_LEVEL:-INFO}
      LOGGING_LEVEL_SHIT_BACK_SERVICE_PAYMENT: ${PAYMENT_LOG_LEVEL:-INFO}
      LOGGING_LEVEL_SHIT_BACK_CONTROLLER_PAYMENTCALLBACK: ${PAYMENT_CALLBACK_LOG_LEVEL:-INFO}
      PAYMENT_LOG_EXTERNAL_REQUESTS: true
      PAYMENT_LOG_EXTERNAL_RESPONSES: false
      PAYMENT_LOG_MASK_SENSITIVE: true
      
      # ============================================
      # НАСТРОЙКИ JVM
      # ============================================
      JAVA_OPTS: >
        -Xms512m 
        -Xmx1024m
        -XX:+UseG1GC
        -XX:+UseStringDeduplication
        -XX:+OptimizeStringConcat
        -XX:MaxGCPauseMillis=200
        -XX:+UnlockExperimentalVMOptions
        -XX:+UseCGroupMemoryLimitForHeap
        -Djava.awt.headless=true
        -Dfile.encoding=UTF-8
        -Duser.timezone=UTC
        -Dspring.profiles.active=production,payment,postgresql
      
      # ============================================
      # DEVELOPMENT SETTINGS (только для разработки)
      # ============================================
      PAYMENT_DEV_MOCK_MODE: ${PAYMENT_DEV_MOCK_MODE:-false}
      PAYMENT_DEV_MOCK_DELAY: 3
      PAYMENT_DEV_ENABLE_DEBUG: ${PAYMENT_DEV_ENABLE_DEBUG:-false}
      PAYMENT_DEV_SKIP_VERIFICATION: ${PAYMENT_DEV_SKIP_VERIFICATION:-false}
    
    ports:
      - "${APP_PORT:-8080}:8080"
      - "${MANAGEMENT_PORT:-8081}:8081"  # Actuator endpoint
    
    volumes:
      - app_logs:/app/logs
      - ./config:/app/config:ro
      - ./scripts:/app/scripts:ro
    
    networks:
      telegram-star-network:
        ipv4_address: 172.20.0.4
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ============================================
  # NGINX REVERSE PROXY (опционально)
  # ============================================
  nginx:
    image: nginx:alpine
    container_name: telegram-star-nginx
    restart: unless-stopped
    
    depends_on:
      - telegram-star-manager
    
    environment:
      NGINX_ENVSUBST_TEMPLATE_SUFFIX: .template
      NGINX_ENVSUBST_OUTPUT_DIR: /etc/nginx/conf.d
      DOMAIN_NAME: ${DOMAIN_NAME:-localhost}
      APP_HOST: telegram-star-manager
      APP_PORT: 8080
    
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    
    volumes:
      - ./config/nginx/nginx.conf.template:/etc/nginx/templates/default.conf.template:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    
    networks:
      telegram-star-network:
        ipv4_address: 172.20.0.5
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ============================================
  # MONITORING - PROMETHEUS (опционально)
  # ============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: telegram-star-prometheus
    restart: unless-stopped
    
    depends_on:
      - telegram-star-manager
    
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./data/prometheus:/prometheus
    
    networks:
      telegram-star-network:
        ipv4_address: 172.20.0.6
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    
    profiles:
      - monitoring

  # ============================================
  # MONITORING - GRAFANA (опционально)
  # ============================================
  grafana:
    image: grafana/grafana:latest
    container_name: telegram-star-grafana
    restart: unless-stopped
    
    depends_on:
      - prometheus
    
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    
    networks:
      telegram-star-network:
        ipv4_address: 172.20.0.7
    
    profiles:
      - monitoring

# ============================================
# ДОПОЛНИТЕЛЬНЫЕ НАСТРОЙКИ
# ============================================

# Для запуска только основных сервисов:
# docker-compose -f docker-compose-full.yml up -d postgres redis telegram-star-manager

# Для запуска с мониторингом:
# docker-compose -f docker-compose-full.yml --profile monitoring up -d

# Для запуска в продакшене с nginx:
# docker-compose -f docker-compose-full.yml up -d postgres redis telegram-star-manager nginx