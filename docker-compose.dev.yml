# ============================================
# РАЗРАБОТЧЕСКИЙ OVERRIDE ДЛЯ DOCKER COMPOSE
# Конфигурация для локальной разработки
# ============================================

version: '3.8'

services:
  # ============================================
  # DEV КОНФИГУРАЦИЯ ПРИЛОЖЕНИЯ
  # ============================================
  telegram-star-manager:
    build:
      context: .
      dockerfile: Dockerfile
      target: development  # Если есть multi-stage build
    
    environment:
      # Профили для разработки
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-dev,postgresql}
      
      # Разработческие настройки
      LOGGING_LEVEL: ${LOGGING_LEVEL:-DEBUG}
      JPA_SHOW_SQL: ${JPA_SHOW_SQL:-true}
      H2_CONSOLE_ENABLED: ${H2_CONSOLE_ENABLED:-false}
      
      # Настройки разработки платежных систем
      PAYMENT_DEV_MOCK_MODE: ${PAYMENT_DEV_MOCK_MODE:-true}
      PAYMENT_DEV_ENABLE_DEBUG: ${PAYMENT_DEV_ENABLE_DEBUG:-true}
      PAYMENT_DEV_SKIP_VERIFICATION: ${PAYMENT_DEV_SKIP_VERIFICATION:-false}
      
      # Более низкие лимиты для разработки
      JVM_OPTS: >
        -Xms256m 
        -Xmx512m
        -XX:+UseG1GC
        -Djava.awt.headless=true
        -Dfile.encoding=UTF-8
        -Dspring.profiles.active=dev,postgresql
    
    volumes:
      # Монтирование исходного кода для live reload (если поддерживается)
      - ./src:/app/src:ro
      - ./logs:/app/logs
      - ./config:/app/config:ro
    
    ports:
      # Дополнительные порты для отладки
      - "${DEBUG_PORT:-5005}:5005"  # JPDA debug port
    
    # Отключить ограничения ресурсов для разработки
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 1G

  # ============================================
  # DEV КОНФИГУРАЦИЯ POSTGRES
  # ============================================
  postgres:
    ports:
      # Открыть порт для прямого подключения из IDE
      - "${DATABASE_PORT:-5432}:5432"
    
    environment:
      # Более подробное логирование для разработки
      POSTGRES_LOG_STATEMENT: all
      POSTGRES_LOG_DURATION: 'on'
    
    volumes:
      # Дополнительные скрипты для разработки
      - ./scripts/dev-data.sql:/docker-entrypoint-initdb.d/99-dev-data.sql:ro

  # ============================================
  # DEV КОНФИГУРАЦИЯ REDIS
  # ============================================
  redis:
    ports:
      # Открыть порт для подключения Redis CLI
      - "${REDIS_PORT:-6379}:6379"
    
    # Упрощенная команда без пароля для разработки
    command: redis-server --appendonly yes

  # ============================================
  # PGADMIN ДЛЯ РАЗРАБОТКИ
  # ============================================
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: telegram-star-pgadmin
    restart: unless-stopped
    depends_on:
      - postgres
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    volumes:
      - ./data/pgadmin:/var/lib/pgadmin
    networks:
      - telegram-network
    profiles:
      - dev-tools

  # ============================================
  # REDIS COMMANDER ДЛЯ РАЗРАБОТКИ
  # ============================================
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: telegram-star-redis-commander
    restart: unless-stopped
    depends_on:
      - redis
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "${REDIS_COMMANDER_PORT:-8081}:8081"
    networks:
      - telegram-network
    profiles:
      - dev-tools

# ============================================
# ДОПОЛНИТЕЛЬНЫЕ VOLUMES ДЛЯ РАЗРАБОТКИ
# ============================================
volumes:
  pgadmin_data:
    driver: local