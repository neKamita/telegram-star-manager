# ============================================
# ПРОДАКШН OVERRIDE ДЛЯ DOCKER COMPOSE
# Дополнительная конфигурация для продакшн-окружения
# ============================================

version: '3.8'

services:
  # ============================================
  # РАСШИРЕННАЯ КОНФИГУРАЦИЯ POSTGRESQL
  # ============================================
  postgres:
    environment:
      # Настройки производительности для продакшена
      POSTGRES_SHARED_PRELOAD_LIBRARIES: 'pg_stat_statements'
      POSTGRES_MAX_CONNECTIONS: '200'
      POSTGRES_SHARED_BUFFERS: '256MB'
      POSTGRES_EFFECTIVE_CACHE_SIZE: '1GB'
      POSTGRES_WORK_MEM: '4MB'
    
    volumes:
      # Дополнительные скрипты инициализации
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./scripts/create-indexes.sql:/docker-entrypoint-initdb.d/02-indexes.sql:ro
    
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c work_mem=4MB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  # ============================================
  # РАСШИРЕННАЯ КОНФИГУРАЦИЯ REDIS
  # ============================================
  redis:
    volumes:
      # Кастомная конфигурация Redis
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}

  # ============================================
  # ПРОДАКШН КОНФИГУРАЦИЯ ПРИЛОЖЕНИЯ
  # ============================================
  telegram-star-manager:
    environment:
      # Расширенные профили для продакшена
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-production,payment,postgresql}
      
      # ============================================
      # НАСТРОЙКИ ПЛАТЕЖНЫХ СИСТЕМ
      # ============================================
      
      # TON Wallet
      TON_ENABLED: ${TON_ENABLED:-false}
      TON_API_KEY: ${TON_API_KEY:-}
      TON_SECRET_KEY: ${TON_SECRET_KEY:-}
      TON_WALLET_ADDRESS: ${TON_WALLET_ADDRESS:-}
      TON_WEBHOOK_URL: ${TON_WEBHOOK_URL:-}
      TON_TESTNET: ${TON_TESTNET:-true}
      
      # YooKassa
      YOOKASSA_ENABLED: ${YOOKASSA_ENABLED:-false}
      YOOKASSA_SHOP_ID: ${YOOKASSA_SHOP_ID:-}
      YOOKASSA_SECRET_KEY: ${YOOKASSA_SECRET_KEY:-}
      YOOKASSA_WEBHOOK_URL: ${YOOKASSA_WEBHOOK_URL:-}
      YOOKASSA_TEST_MODE: ${YOOKASSA_TEST_MODE:-true}
      
      # QIWI
      QIWI_ENABLED: ${QIWI_ENABLED:-false}
      QIWI_PUBLIC_KEY: ${QIWI_PUBLIC_KEY:-}
      QIWI_SECRET_KEY: ${QIWI_SECRET_KEY:-}
      QIWI_SITE_ID: ${QIWI_SITE_ID:-}
      QIWI_WEBHOOK_URL: ${QIWI_WEBHOOK_URL:-}
      
      # SberPay
      SBERPAY_ENABLED: ${SBERPAY_ENABLED:-false}
      SBERPAY_MERCHANT_ID: ${SBERPAY_MERCHANT_ID:-}
      SBERPAY_SECRET_KEY: ${SBERPAY_SECRET_KEY:-}
      SBERPAY_API_LOGIN: ${SBERPAY_API_LOGIN:-}
      SBERPAY_API_PASSWORD: ${SBERPAY_API_PASSWORD:-}
      SBERPAY_WEBHOOK_URL: ${SBERPAY_WEBHOOK_URL:-}
      SBERPAY_TEST_MODE: ${SBERPAY_TEST_MODE:-true}
      
      # ============================================
      # НАСТРОЙКИ БЕЗОПАСНОСТИ ПЛАТЕЖЕЙ
      # ============================================
      PAYMENT_CALLBACK_SECRET: ${PAYMENT_CALLBACK_SECRET}
      PAYMENT_SECURITY_ENABLE_IP_WHITELIST: ${PAYMENT_SECURITY_ENABLE_IP_WHITELIST:-true}
      PAYMENT_SECURITY_TON_IPS: ${PAYMENT_SECURITY_TON_IPS:-95.142.46.34,95.142.46.35}
      PAYMENT_SECURITY_YOOKASSA_IPS: ${PAYMENT_SECURITY_YOOKASSA_IPS:-185.71.76.0/27,185.71.77.0/27}
      PAYMENT_SECURITY_QIWI_IPS: ${PAYMENT_SECURITY_QIWI_IPS:-79.142.16.0/20,195.189.100.0/22}
      PAYMENT_SECURITY_SBERPAY_IPS: ${PAYMENT_SECURITY_SBERPAY_IPS:-185.71.76.0/27,212.19.125.0/25}
      
      # ============================================
      # ОПТИМИЗАЦИИ ПРОИЗВОДИТЕЛЬНОСТИ
      # ============================================
      
      # Кэширование SystemHealth
      ADMIN_CACHE_MAX_SIZE: ${ADMIN_CACHE_MAX_SIZE:-50}
      ADMIN_CACHE_TTL_MINUTES: ${ADMIN_CACHE_TTL_MINUTES:-5}
      ADMIN_ASYNC_ENABLED: ${ADMIN_ASYNC_ENABLED:-true}
      
      # Оптимизированные настройки JPA
      JPA_BATCH_SIZE: ${JPA_BATCH_SIZE:-25}
      JPA_FETCH_SIZE: ${JPA_FETCH_SIZE:-50}
      JPA_OPTIMIZE_QUERIES: ${JPA_OPTIMIZE_QUERIES:-true}
      
      # Настройки пула соединений
      DB_POOL_SIZE: ${DB_POOL_SIZE:-20}
      DB_POOL_MIN_IDLE: ${DB_POOL_MIN_IDLE:-5}
      DB_POOL_MAX_LIFETIME: ${DB_POOL_MAX_LIFETIME:-1800000}
      DB_CONNECTION_TIMEOUT: ${DB_CONNECTION_TIMEOUT:-30000}
      
      # Мониторинг производительности
      METRICS_COLLECTION_ENABLED: ${METRICS_COLLECTION_ENABLED:-true}
      PERFORMANCE_MONITORING_LEVEL: ${PERFORMANCE_MONITORING_LEVEL:-INFO}
      
      # ============================================
      # ПРОДАКШН JVM НАСТРОЙКИ
      # ============================================
      JAVA_OPTS: >
        -Xms512m 
        -Xmx1024m
        -XX:+UseG1GC
        -XX:+UseStringDeduplication
        -XX:MaxGCPauseMillis=200
        -XX:+UnlockExperimentalVMOptions
        -Djava.awt.headless=true
        -Dfile.encoding=UTF-8
        -Duser.timezone=UTC
    
    ports:
      # Дополнительный порт для мониторинга
      - "${MANAGEMENT_PORT:-8081}:8081"
    
    volumes:
      # Дополнительные конфигурационные файлы
      - ./config:/app/config:ro
      - ./scripts:/app/scripts:ro
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M

  # ============================================
  # NGINX REVERSE PROXY
  # ============================================
  nginx:
    image: nginx:alpine
    container_name: telegram-star-nginx
    restart: unless-stopped
    depends_on:
      - telegram-star-manager
    environment:
      NGINX_ENVSUBST_TEMPLATE_SUFFIX: .template
      NGINX_ENVSUBST_OUTPUT_DIR: /etc/nginx/conf.d
      DOMAIN_NAME: ${DOMAIN_NAME:-localhost}
      APP_HOST: telegram-star-manager
      APP_PORT: 8080
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./config/nginx/nginx.conf.template:/etc/nginx/templates/default.conf.template:ro
      - ./config/nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    networks:
      - telegram-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    profiles:
      - nginx

  # ============================================
  # MONITORING - PROMETHEUS
  # ============================================
  prometheus:
    image: prom/prometheus:latest
    container_name: telegram-star-prometheus
    restart: unless-stopped
    depends_on:
      - telegram-star-manager
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./config/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./data/prometheus:/prometheus
    networks:
      - telegram-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    profiles:
      - monitoring

  # ============================================
  # MONITORING - GRAFANA
  # ============================================
  grafana:
    image: grafana/grafana:latest
    container_name: telegram-star-grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD}
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - telegram-network
    profiles:
      - monitoring

# ============================================
# ДОПОЛНИТЕЛЬНЫЕ VOLUMES ДЛЯ ПРОДАКШЕНА
# ============================================
volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local