# ============================================
# БАЗОВАЯ КОНФИГУРАЦИЯ DOCKER COMPOSE
# TelegramStarManager - основные сервисы
# ============================================

version: '3.8'

networks:
  telegram-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  app_logs:
    driver: local

services:
  # ============================================
  # POSTGRESQL DATABASE
  # ============================================
  postgres:
    image: postgres:15-alpine
    container_name: telegram-star-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-telegram_star_db}
      POSTGRES_USER: ${DATABASE_USERNAME:-telegram_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    ports:
      - "${DATABASE_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - telegram-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME:-telegram_user} -d ${DATABASE_NAME:-telegram_star_db}"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

  # ============================================
  # REDIS CACHE
  # ============================================
  redis:
    image: redis:7-alpine
    container_name: telegram-star-redis
    restart: unless-stopped
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - telegram-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 3s
      retries: 3
    command: >
      sh -c "
        if [ -n '$$REDIS_PASSWORD' ]; then
          redis-server --requirepass $$REDIS_PASSWORD
        else
          redis-server
        fi
      "

  # ============================================
  # TELEGRAM BOT APPLICATION
  # ============================================
  telegram-star-manager:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: telegram-star-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Основные настройки
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-production,postgresql}
      SERVER_PORT: 8080
      
      # База данных
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME:-telegram_star_db}
      DATABASE_USERNAME: ${DATABASE_USERNAME:-telegram_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      
      # Telegram Bot
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_BOT_USERNAME: ${TELEGRAM_BOT_USERNAME}
      TELEGRAM_WEBHOOK_URL: ${TELEGRAM_WEBHOOK_URL:-}
      
      # Безопасность
      API_SECRET_KEY: ${API_SECRET_KEY}
      
      # Логирование
      LOGGING_LEVEL: ${LOGGING_LEVEL:-INFO}
      
      # JVM настройки
      JAVA_OPTS: ${JAVA_OPTS:--Xms256m -Xmx512m -XX:+UseG1GC}
    
    ports:
      - "${APP_PORT:-8080}:8080"
    
    volumes:
      - app_logs:/app/logs
    
    networks:
      - telegram-network
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    env_file:
      - .env
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
