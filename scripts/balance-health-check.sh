#!/bin/bash

# =============================================================================
# üè¶ –°–ö–†–ò–ü–¢ –ü–†–û–í–ï–†–ö–ò –†–ê–ë–û–¢–û–°–ü–û–°–û–ë–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´ –ë–ê–õ–ê–ù–°–ê
# Telegram Star Manager - Balance System Health Check
# –í–µ—Ä—Å–∏—è 2.0 - –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
# =============================================================================

echo "üè¶ TELEGRAM STAR MANAGER - –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–´ –ë–ê–õ–ê–ù–°–ê v2.0"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
echo "üîí –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π API"
echo ""

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BASE_URL=${BASE_URL:-"http://localhost:8080"}
API_KEY=${API_KEY:-""}
TEST_USER_ID=${TEST_USER_ID:-"999999"}
TIMEOUT=${TIMEOUT:-10}

# –°—á–µ—Ç—á–∏–∫–∏
TOTAL_TESTS=0
PASSED_TESTS=0
FAILED_TESTS=0
SECURITY_BLOCKED_TESTS=0

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∞
test_result() {
    local test_name="$1"
    local status="$2"
    local details="$3"
    
    TOTAL_TESTS=$((TOTAL_TESTS + 1))
    
    case "$status" in
        "PASS")
            echo -e "${GREEN}‚úÖ PASS${NC} - $test_name"
            [ ! -z "$details" ] && echo "    $details"
            PASSED_TESTS=$((PASSED_TESTS + 1))
            ;;
        "FAIL")
            echo -e "${RED}‚ùå FAIL${NC} - $test_name"
            [ ! -z "$details" ] && echo "    $details"
            FAILED_TESTS=$((FAILED_TESTS + 1))
            ;;
        "SECURITY_OK")
            echo -e "${PURPLE}üîí SECURITY_OK${NC} - $test_name"
            [ ! -z "$details" ] && echo "    $details"
            SECURITY_BLOCKED_TESTS=$((SECURITY_BLOCKED_TESTS + 1))
            ;;
        "SKIP")
            echo -e "${YELLOW}‚ö†Ô∏è SKIP${NC} - $test_name"
            [ ! -z "$details" ] && echo "    $details"
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–ø—É–±–ª–∏—á–Ω—ã–µ endpoints)
make_public_request() {
    local method="$1"
    local endpoint="$2"
    local data="$3"
    
    if [ "$method" = "GET" ]; then
        curl -s -w "\n%{http_code}" \
             --connect-timeout $TIMEOUT \
             -H "Content-Type: application/json" \
             "$BASE_URL$endpoint" 2>/dev/null
    else
        curl -s -w "\n%{http_code}" \
             --connect-timeout $TIMEOUT \
             -X "$method" \
             -H "Content-Type: application/json" \
             -d "$data" \
             "$BASE_URL$endpoint" 2>/dev/null
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π (–∑–∞—â–∏—â–µ–Ω–Ω—ã–µ endpoints)
make_authenticated_request() {
    local method="$1"
    local endpoint="$2"
    local data="$3"
    
    if [ -z "$API_KEY" ]; then
        echo -e "\nAPI_KEY_NOT_SET\n401"
        return
    fi
    
    if [ "$method" = "GET" ]; then
        curl -s -w "\n%{http_code}" \
             --connect-timeout $TIMEOUT \
             -H "Authorization: Bearer $API_KEY" \
             -H "Content-Type: application/json" \
             "$BASE_URL$endpoint" 2>/dev/null
    else
        curl -s -w "\n%{http_code}" \
             --connect-timeout $TIMEOUT \
             -X "$method" \
             -H "Authorization: Bearer $API_KEY" \
             -H "Content-Type: application/json" \
             -d "$data" \
             "$BASE_URL$endpoint" 2>/dev/null
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ endpoint –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
check_security_enforcement() {
    local endpoint="$1"
    local description="$2"
    
    # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∫ –∑–∞—â–∏—â–µ–Ω–Ω–æ–º—É endpoint
    response=$(make_public_request "GET" "$endpoint")
    http_code=$(echo "$response" | tail -n1)
    
    if [ "$http_code" = "401" ] || [ "$http_code" = "403" ]; then
        test_result "$description" "SECURITY_OK" "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (HTTP $http_code)"
        return 0
    elif [ "$http_code" = "200" ]; then
        test_result "$description" "FAIL" "–ö–†–ò–¢–ò–ß–ù–û: Endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!"
        return 1
    else
        test_result "$description" "FAIL" "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: HTTP $http_code"
        return 1
    fi
}

echo "üîß –ù–ê–ß–ò–ù–ê–ï–ú –ü–†–û–í–ï–†–ö–£ –°–ò–°–¢–ï–ú–´..."
echo ""

# =============================================================================
# 1. –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–ï–†–í–ò–°–ê (–ü–£–ë–õ–ò–ß–ù–´–ï ENDPOINTS)
# =============================================================================
echo "üì° 1. –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–ï–†–í–ò–°–ê"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# Health Check —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π actuator endpoint
response=$(make_public_request "GET" "/actuator/health")
http_code=$(echo "$response" | tail -n1)
response_body=$(echo "$response" | head -n -1)

if [ "$http_code" = "200" ]; then
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ JSON
    if echo "$response_body" | grep -q '"status":"UP"'; then
        test_result "–û—Å–Ω–æ–≤–Ω–æ–π Health Check" "PASS" "HTTP 200, —Å—Ç–∞—Ç—É—Å: UP"
    elif echo "$response_body" | grep -q '"status"'; then
        status=$(echo "$response_body" | grep -o '"status":"[^"]*"' | cut -d'"' -f4)
        test_result "–û—Å–Ω–æ–≤–Ω–æ–π Health Check" "FAIL" "HTTP 200, –Ω–æ —Å—Ç–∞—Ç—É—Å: $status"
    else
        test_result "–û—Å–Ω–æ–≤–Ω–æ–π Health Check" "PASS" "HTTP 200, –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω"
    fi
else
    test_result "–û—Å–Ω–æ–≤–Ω–æ–π Health Check" "FAIL" "HTTP –∫–æ–¥: $http_code"
fi

# Health Check –¥–ª—è Telegram –±–æ—Ç–∞ (–ø—É–±–ª–∏—á–Ω—ã–π endpoint)
response=$(make_public_request "GET" "/api/bot/health")
http_code=$(echo "$response" | tail -n1)

if [ "$http_code" = "200" ]; then
    test_result "Health Check Telegram –±–æ—Ç–∞" "PASS" "–°–µ—Ä–≤–∏—Å –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω"
elif [ "$http_code" = "401" ] || [ "$http_code" = "403" ]; then
    test_result "Health Check Telegram –±–æ—Ç–∞" "SECURITY_OK" "–¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–æ–∂–∏–¥–∞–µ–º–æ)"
else
    test_result "Health Check Telegram –±–æ—Ç–∞" "FAIL" "HTTP –∫–æ–¥: $http_code"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ API info endpoint
response=$(make_public_request "GET" "/actuator/info")
http_code=$(echo "$response" | tail -n1)

if [ "$http_code" = "200" ]; then
    test_result "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏" "PASS" "–î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã"
elif [ "$http_code" = "404" ]; then
    test_result "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏" "SKIP" "Endpoint –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)"
else
    test_result "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏" "FAIL" "HTTP –∫–æ–¥: $http_code"
fi

echo ""

# =============================================================================
# 2. –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´
# =============================================================================
echo "üîí 2. –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ endpoints —Ç—Ä–µ–±—É—é—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
check_security_enforcement "/api/balance/$TEST_USER_ID" "–ó–∞—â–∏—Ç–∞ API –±–∞–ª–∞–Ω—Å–æ–≤"
check_security_enforcement "/actuator/metrics" "–ó–∞—â–∏—Ç–∞ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã"
check_security_enforcement "/actuator/health/db" "–ó–∞—â–∏—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ë–î"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—É–±–ª–∏—á–Ω—ã—Ö endpoints
echo ""
echo "–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö endpoints:"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook endpoint (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω—ã–º)
response=$(make_public_request "GET" "/webhook/telegram")
http_code=$(echo "$response" | tail -n1)

if [ "$http_code" = "200" ] || [ "$http_code" = "404" ] || [ "$http_code" = "405" ]; then
    test_result "Webhook endpoint –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å" "PASS" "Webhook –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è Telegram (HTTP $http_code)"
else
    test_result "Webhook endpoint –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å" "FAIL" "Webhook –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP $http_code"
fi

echo ""

# =============================================================================
# 3. –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´ (–° –ê–í–¢–û–†–ò–ó–ê–¶–ò–ï–ô)
# =============================================================================
echo "üß™ 3. –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å API –∫–ª—é—á–æ–º
if [ -z "$API_KEY" ]; then
    echo -e "${CYAN}‚ÑπÔ∏è INFO${NC} - API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ endpoints"
    echo "    –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export API_KEY=your-api-key"
    echo ""
fi

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –±–∞–ª–∞–Ω—Å–æ–≤..."
if [ ! -z "$API_KEY" ]; then
    response=$(make_authenticated_request "GET" "/api/balance/$TEST_USER_ID")
    http_code=$(echo "$response" | tail -n1)
    
    if [ "$http_code" = "200" ] || [ "$http_code" = "201" ]; then
        test_result "–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" "PASS" "–ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å API –∫–ª—é—á–æ–º"
    elif [ "$http_code" = "401" ] || [ "$http_code" = "403" ]; then
        test_result "–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" "FAIL" "–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"
    else
        test_result "–ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" "FAIL" "HTTP –∫–æ–¥: $http_code"
    fi
else
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ - –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 401/403
    response=$(make_public_request "GET" "/api/balance/$TEST_USER_ID")
    http_code=$(echo "$response" | tail -n1)
    
    if [ "$http_code" = "401" ] || [ "$http_code" = "403" ]; then
        test_result "–ó–∞—â–∏—Ç–∞ API –±–∞–ª–∞–Ω—Å–æ–≤" "SECURITY_OK" "–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é"
    else
        test_result "–ó–∞—â–∏—Ç–∞ API –±–∞–ª–∞–Ω—Å–æ–≤" "FAIL" "–ö–†–ò–¢–ò–ß–ù–û: API –¥–æ—Å—Ç—É–ø–µ–Ω –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!"
    fi
fi

# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (—Å API –∫–ª—é—á–æ–º –µ—Å–ª–∏ –µ—Å—Ç—å)
echo "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ API..."
if [ ! -z "$API_KEY" ]; then
    response=$(make_authenticated_request "POST" "/api/balance/deposit" '{"userId":'$TEST_USER_ID',"amount":-10.00,"paymentMethod":"TEST","description":"–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è —Å—É–º–º–∞"}')
    http_code=$(echo "$response" | tail -n1)
    
    if [ "$http_code" = "400" ] || [ "$http_code" = "422" ]; then
        test_result "–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º—ã" "PASS" "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞"
    elif [ "$http_code" = "401" ] || [ "$http_code" = "403" ]; then
        test_result "–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º—ã" "FAIL" "–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π API"
    else
        test_result "–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º—ã" "FAIL" "–û–∂–∏–¥–∞–ª—Å—è –∫–æ–¥ 400/422, –ø–æ–ª—É—á–µ–Ω: $http_code"
    fi
else
    test_result "–í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π —Å—É–º–º—ã" "SKIP" "API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

echo ""

# =============================================================================
# 3. –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
# =============================================================================
echo "‚öôÔ∏è 3. –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if [ ! -z "$SPRING_DATASOURCE_URL" ]; then
    test_result "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î" "PASS" "SPRING_DATASOURCE_URL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    test_result "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ë–î" "FAIL" "SPRING_DATASOURCE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

if [ ! -z "$BALANCE_ENCRYPTION_SECRET" ]; then
    test_result "–°–µ–∫—Ä–µ—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è" "PASS" "BALANCE_ENCRYPTION_SECRET —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
else
    test_result "–°–µ–∫—Ä–µ—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è" "FAIL" "BALANCE_ENCRYPTION_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
if [ -f "src/main/resources/application-balance.properties" ]; then
    test_result "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –±–∞–ª–∞–Ω—Å–∞" "PASS" "application-balance.properties –Ω–∞–π–¥–µ–Ω"
else
    test_result "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –±–∞–ª–∞–Ω—Å–∞" "FAIL" "application-balance.properties –Ω–µ –Ω–∞–π–¥–µ–Ω"
fi

echo ""

# =============================================================================
# 4. –ü–†–û–í–ï–†–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò
# =============================================================================
echo "‚ö° 4. –ü–†–û–í–ï–†–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ health check (–ø—É–±–ª–∏—á–Ω—ã–π endpoint)
start_time=$(date +%s%N)
response=$(make_public_request "GET" "/actuator/health")
end_time=$(date +%s%N)
response_time=$(( (end_time - start_time) / 1000000 )) # Convert to milliseconds

if [ "$response_time" -lt 1000 ]; then
    test_result "–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ Health Check" "PASS" "${response_time}ms (< 1000ms)"
else
    test_result "–í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ Health Check" "FAIL" "${response_time}ms (>= 1000ms)"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ (–∑–∞—â–∏—â–µ–Ω–Ω—ã–π endpoint)
if [ ! -z "$API_KEY" ]; then
    response=$(make_authenticated_request "GET" "/actuator/metrics/jvm.memory.used")
    http_code=$(echo "$response" | tail -n1)
    
    if [ "$http_code" = "200" ]; then
        test_result "–ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø)" "PASS" "–ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã"
    elif [ "$http_code" = "401" ] || [ "$http_code" = "403" ]; then
        test_result "–ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø)" "FAIL" "–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á"
    else
        test_result "–ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã (–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø)" "FAIL" "–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: HTTP $http_code"
    fi
else
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É –º–µ—Ç—Ä–∏–∫ –±–µ–∑ API –∫–ª—é—á–∞
    response=$(make_public_request "GET" "/actuator/metrics/jvm.memory.used")
    http_code=$(echo "$response" | tail -n1)
    
    if [ "$http_code" = "401" ] || [ "$http_code" = "403" ]; then
        test_result "–ó–∞—â–∏—Ç–∞ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã" "SECURITY_OK" "–ú–µ—Ç—Ä–∏–∫–∏ –∑–∞—â–∏—â–µ–Ω—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π"
    else
        test_result "–ó–∞—â–∏—Ç–∞ –º–µ—Ç—Ä–∏–∫ —Å–∏—Å—Ç–µ–º—ã" "FAIL" "–ö–†–ò–¢–ò–ß–ù–û: –ú–µ—Ç—Ä–∏–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏!"
    fi
fi

echo ""

# =============================================================================
# 5. –ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í
# =============================================================================
echo "üìù 5. –ü–†–û–í–ï–†–ö–ê –õ–û–ì–û–í"
echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ª–æ–≥ —Ñ–∞–π–ª–æ–≤
if [ -f "logs/application.log" ] || [ -f "logs/balance.log" ]; then
    test_result "–ù–∞–ª–∏—á–∏–µ –ª–æ–≥ —Ñ–∞–π–ª–æ–≤" "PASS" "–õ–æ–≥ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç—Ä–æ–∫)
    error_count=0
    for log_file in logs/*.log; do
        if [ -f "$log_file" ]; then
            errors=$(tail -n 100 "$log_file" 2>/dev/null | grep -i "ERROR\|FATAL\|Exception" | wc -l)
            error_count=$((error_count + errors))
        fi
    done
    
    if [ "$error_count" -eq 0 ]; then
        test_result "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö" "PASS" "–û—à–∏–±–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    else
        test_result "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö" "FAIL" "–ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: $error_count"
    fi
else
    test_result "–ù–∞–ª–∏—á–∏–µ –ª–æ–≥ —Ñ–∞–π–ª–æ–≤" "FAIL" "–õ–æ–≥ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
fi

echo ""

# =============================================================================
# –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢
# =============================================================================
echo "üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢"
echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"

# –í—ã—á–∏—Å–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Å —É—á–µ—Ç–æ–º SECURITY_OK –∫–∞–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
successful_tests=$((PASSED_TESTS + SECURITY_BLOCKED_TESTS))
success_rate=$((successful_tests * 100 / TOTAL_TESTS))

echo "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–æ–≤:"
echo "   –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: $TOTAL_TESTS"
echo -e "   –ü—Ä–æ–π–¥–µ–Ω–æ: ${GREEN}$PASSED_TESTS${NC}"
echo -e "   –ó–∞—â–∏—â–µ–Ω–æ (–æ–∂–∏–¥–∞–µ–º–æ): ${PURPLE}$SECURITY_BLOCKED_TESTS${NC}"
echo -e "   –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${RED}$FAILED_TESTS${NC}"
echo "   –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: $success_rate%"
echo ""

# –ê–Ω–∞–ª–∏–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
if [ "$SECURITY_BLOCKED_TESTS" -gt 0 ]; then
    echo -e "${CYAN}üîí –ê–ù–ê–õ–ò–ó –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:${NC}"
    echo "   –°–∏—Å—Ç–µ–º–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º endpoints"
    echo "   401/403 –æ—à–∏–±–∫–∏ - —ç—Ç–æ –ù–û–†–ú–ê–õ–¨–ù–û–ï –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è production —Å–∏—Å—Ç–µ–º—ã"
    echo ""
fi

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API –∫–ª—é—á–µ
if [ -z "$API_KEY" ]; then
    echo -e "${YELLOW}‚ÑπÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø:${NC}"
    echo "   API –∫–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –ø—É–±–ª–∏—á–Ω—ã–µ endpoints"
    echo "   –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: export API_KEY=your-api-key"
    echo ""
fi

# –û—Ü–µ–Ω–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
if [ "$success_rate" -ge 90 ]; then
    echo -e "${GREEN}üéâ –°–ò–°–¢–ï–ú–ê –ë–ê–õ–ê–ù–°–ê –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!${NC}"
    echo "‚úÖ –í—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    echo "üîí –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
    exit_code=0
elif [ "$success_rate" -ge 70 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è –°–ò–°–¢–ï–ú–ê –ë–ê–õ–ê–ù–°–ê –†–ê–ë–û–¢–ê–ï–¢ –° –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø–ú–ò${NC}"
    echo "üîç –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    echo "üîí –°–∏—Å—Ç–µ–º–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    exit_code=1
else
    echo -e "${RED}üö® –°–ò–°–¢–ï–ú–ê –ë–ê–õ–ê–ù–°–ê –ò–ú–ï–ï–¢ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´!${NC}"
    echo "‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–æ"
    exit_code=2
fi

echo ""
echo "üîß –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:"
echo "   mvn test -Dtest=BalanceSystemIntegrationTest"
echo ""
echo "üìä –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
echo "   curl $BASE_URL/actuator/health                    # –ü—É–±–ª–∏—á–Ω—ã–π health check"
if [ ! -z "$API_KEY" ]; then
    echo "   curl -H \"Authorization: Bearer \$API_KEY\" $BASE_URL/actuator/metrics  # –ú–µ—Ç—Ä–∏–∫–∏ (—Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á)"
else
    echo "   curl -H \"Authorization: Bearer YOUR_API_KEY\" $BASE_URL/actuator/metrics  # –ú–µ—Ç—Ä–∏–∫–∏ (—Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á)"
fi
echo ""
echo "üöÄ –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å API –∫–ª—é—á–æ–º:"
echo "   export API_KEY=your-api-key-here"
echo "   ./scripts/balance-health-check.sh"
echo ""

# –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
rm -f /tmp/health_response.json

exit $exit_code