package shit.back.application.balance.mapper;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import shit.back.application.balance.dto.response.BalanceResponse;
import shit.back.application.balance.dto.response.SimpleBalanceResponse;
import shit.back.domain.balance.valueobjects.Currency;
import shit.back.domain.balance.valueobjects.Money;
import shit.back.domain.balance.BalanceAggregate;

/**
 * –ú–∞–ø–ø–µ—Ä –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è BalanceResponse –≤ SimpleBalanceResponse
 *
 * –°–û–ó–î–ê–ù –¥–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤ –º–µ–∂–¥—É
 * BalanceApplicationServiceV2.getBalance() –∏ ShowBalanceQueryHandler
 */
public final class BalanceResponseMapper {

        private static final Logger log = LoggerFactory.getLogger(BalanceResponseMapper.class);

        private BalanceResponseMapper() {
                // Utility class
        }

        /**
         * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç BalanceResponse –≤ SimpleBalanceResponse
         * –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å –µ–¥–∏–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
         *
         * @param balanceResponse –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
         * @return SimpleBalanceResponse –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Telegram UI
         */
        public static SimpleBalanceResponse toSimpleBalanceResponse(BalanceResponse balanceResponse) {
                if (balanceResponse == null) {
                        log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: BalanceResponseMapper –ø–æ–ª—É—á–∏–ª null balanceResponse");
                        return null;
                }

                // –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –õ–û–ì: –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                log.debug(
                                "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê BalanceResponseMapper: userId={}, currentBalance={}, totalDeposited={}, totalSpent={}, currency={}",
                                balanceResponse.getUserId(),
                                balanceResponse.getCurrentBalance(),
                                balanceResponse.getTotalDeposited(),
                                balanceResponse.getTotalSpent(),
                                balanceResponse.getCurrency());

                // –ü–æ–ª—É—á–∞–µ–º –≤–∞–ª—é—Ç—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–¥ –∏–∑ –æ—Ç–≤–µ—Ç–∞ –∏–ª–∏ –≤–∞–ª—é—Ç—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                Currency currency = Currency.defaultCurrency();
                if (balanceResponse.getCurrency() != null) {
                        currency = Currency.of(balanceResponse.getCurrency());
                }

                // –°–æ–∑–¥–∞–µ–º Money –æ–±—ä–µ–∫—Ç –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                Money currentBalance = Money.of(balanceResponse.getCurrentBalance() != null
                                ? balanceResponse.getCurrentBalance()
                                : java.math.BigDecimal.ZERO);

                // –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –õ–û–ì: –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞–ø–ø–∏–Ω–≥–∞
                log.debug(
                                "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê BalanceResponseMapper –†–ï–ó–£–õ–¨–¢–ê–¢: userId={}, currentBalance={} - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞",
                                balanceResponse.getUserId(),
                                currentBalance.getFormattedAmount());

                return SimpleBalanceResponse.builder()
                                .userId(balanceResponse.getUserId())
                                .currentBalance(currentBalance)
                                .currency(currency)
                                .active(balanceResponse.isActive())
                                .lastUpdated(balanceResponse.getLastUpdated() != null
                                                ? balanceResponse.getLastUpdated()
                                                : java.time.LocalDateTime.now())
                                .build();
        }

        /**
         * –°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É SimpleBalanceResponse –¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –±–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω
         *
         * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
         * @return SimpleBalanceResponse —Å –Ω—É–ª–µ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
         */
        public static SimpleBalanceResponse createEmptyBalance(Long userId) {
                return SimpleBalanceResponse.builder()
                                .userId(userId)
                                .currentBalance(Money.zero())
                                .currency(Currency.defaultCurrency())
                                .active(false)
                                .lastUpdated(java.time.LocalDateTime.now())
                                .build();
        }

        /**
         * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç BalanceAggregate –≤ SimpleBalanceResponse
         *
         * @param balanceAggregate –∞–≥—Ä–µ–≥–∞—Ç –±–∞–ª–∞–Ω—Å–∞
         * @return SimpleBalanceResponse –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —É–ø—Ä–æ—â–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö
         */
        public static SimpleBalanceResponse fromBalanceAggregate(BalanceAggregate balanceAggregate) {
                if (balanceAggregate == null) {
                        log.warn("üîç –§–ê–ó–ê2: BalanceResponseMapper –ø–æ–ª—É—á–∏–ª null balanceAggregate –¥–ª—è SimpleBalance");
                        return null;
                }

                log.debug("üîç –§–ê–ó–ê2: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ BalanceAggregate –≤ SimpleBalanceResponse - userId={}, currentBalance={}",
                                balanceAggregate.getUserId(),
                                balanceAggregate.getCurrentBalance().getFormattedAmount());

                return SimpleBalanceResponse.builder()
                                .userId(balanceAggregate.getUserId())
                                .currentBalance(balanceAggregate.getCurrentBalance())
                                .currency(balanceAggregate.getCurrency())
                                .active(balanceAggregate.isActive())
                                .lastUpdated(balanceAggregate.getLastUpdated())
                                .build();
        }
}