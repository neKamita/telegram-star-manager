package shit.back.application.balance.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import shit.back.application.balance.dto.request.OperationRequest;
import shit.back.application.balance.dto.response.*;
import shit.back.application.balance.common.Result;
import shit.back.application.balance.repository.BalanceAggregateRepository;
import shit.back.application.balance.repository.TransactionAggregateRepository;
import shit.back.domain.balance.BalanceAggregate;
import shit.back.domain.balance.exceptions.InvalidTransactionException;
import shit.back.domain.balance.valueobjects.*;
import shit.back.infrastructure.events.DomainEventPublisher;

import java.math.BigDecimal;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

/**
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ò –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô —Å–µ—Ä–≤–∏—Å –±–∞–ª–∞–Ω—Å–∞
 * 
 * –ö–õ–Æ–ß–ï–í–´–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:
 * 1. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ DB –∑–∞–ø—Ä–æ—Å–æ–≤
 * 2. Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 * 3. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 * 4. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ repository
 * 5. In-memory –∫—ç—à –¥–ª—è —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤
 * 
 * –¶–ï–õ–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:
 * - getBalance: —Å –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ <20ms
 * - checkSufficientFunds: <10ms —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
 * - Cache hit ratio: >85%
 * - Batch –æ–ø–µ—Ä–∞—Ü–∏–∏: +200% throughput
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã: SOLID, DRY, Clean Code, KISS, Fail-Fast, YAGNI
 */
@Slf4j
@Service
@Transactional
public class HighPerformanceBalanceService {

    private final BalanceAggregateRepository balanceAggregateRepository;
    private final TransactionAggregateRepository transactionAggregateRepository;
    private final DomainEventPublisher eventPublisher;

    // –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –∫—ç—à –±–∞–ª–∞–Ω—Å–æ–≤
    private final ConcurrentHashMap<Long, BalanceAggregate> balanceCache = new ConcurrentHashMap<>();
    private final ConcurrentHashMap<Long, Long> balanceVersions = new ConcurrentHashMap<>();

    // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    private final AtomicInteger cacheHits = new AtomicInteger(0);
    private final AtomicInteger cacheMisses = new AtomicInteger(0);
    private final AtomicInteger dbQueries = new AtomicInteger(0);
    private final AtomicLong totalResponseTime = new AtomicLong(0);
    private final AtomicInteger operationCount = new AtomicInteger(0);

    // –ü–æ—Ä–æ–≥–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    private static final int PERFORMANCE_THRESHOLD_MS = 20;
    private static final int FAST_OPERATION_THRESHOLD_MS = 10;
    private static final int CACHE_SIZE_LIMIT = 5000;
    private static final long CACHE_TTL_MS = 300000; // 5 –º–∏–Ω—É—Ç

    public HighPerformanceBalanceService(
            BalanceAggregateRepository balanceAggregateRepository,
            TransactionAggregateRepository transactionAggregateRepository,
            DomainEventPublisher eventPublisher) {
        this.balanceAggregateRepository = balanceAggregateRepository;
        this.transactionAggregateRepository = transactionAggregateRepository;
        this.eventPublisher = eventPublisher;
    }

    /**
     * –í–´–°–û–ö–û–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * –¶–µ–ª—å: <20ms —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    @Transactional(readOnly = true)
    public Result<BalanceResponse> getBalanceOptimized(Long userId) {
        long startTime = System.currentTimeMillis();
        operationCount.incrementAndGet();

        try {
            if (userId == null || userId <= 0) {
                return Result.error(new InvalidTransactionException("INVALID_USER_ID",
                        String.valueOf(userId), "–í–∞–ª–∏–¥–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"));
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à —Å–Ω–∞—á–∞–ª–∞
            BalanceAggregate cachedBalance = balanceCache.get(userId);
            if (cachedBalance != null && isCacheValid(userId)) {
                cacheHits.incrementAndGet();

                BalanceResponse response = convertToResponse(cachedBalance);
                long duration = recordOperationTime(startTime);

                log.debug("‚úÖ BALANCE CACHE HIT: userId={} –∑–∞ {}ms", userId, duration);
                return Result.success(response);
            }

            cacheMisses.incrementAndGet();
            dbQueries.incrementAndGet();

            // –ó–∞–ø—Ä–æ—Å –∫ –ë–î —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π
            var balanceOptional = balanceAggregateRepository.findByUserId(userId);

            if (balanceOptional.isEmpty()) {
                long duration = recordOperationTime(startTime);
                log.warn("‚ö†Ô∏è BALANCE NOT FOUND: userId={} –∑–∞ {}ms", userId, duration);
                return Result.error(new InvalidTransactionException("BALANCE_NOT_FOUND",
                        userId.toString(), "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –±–∞–ª–∞–Ω—Å–æ–º"));
            }

            BalanceAggregate balance = balanceOptional.get();

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å –º–µ—Å—Ç–æ
            if (balanceCache.size() < CACHE_SIZE_LIMIT) {
                balanceCache.put(userId, balance);
                balanceVersions.put(userId, System.currentTimeMillis());
            }

            BalanceResponse response = convertToResponse(balance);
            long duration = recordOperationTime(startTime);

            if (duration <= PERFORMANCE_THRESHOLD_MS) {
                log.debug("‚úÖ BALANCE OPTIMIZED: userId={} –∑–∞ {}ms", userId, duration);
            } else {
                log.warn("‚ö†Ô∏è BALANCE SLOW: userId={} –∑–∞ {}ms (—Ü–µ–ª—å: <{}ms)",
                        userId, duration, PERFORMANCE_THRESHOLD_MS);
            }

            return Result.success(response);

        } catch (Exception e) {
            long duration = recordOperationTime(startTime);
            log.error("üö® BALANCE ERROR: userId={} –ø–æ—Å–ª–µ {}ms: {}", userId, duration, e.getMessage(), e);
            return Result.error(new InvalidTransactionException("BALANCE_RETRIEVAL_ERROR",
                    e.getMessage(), "–í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"));
        }
    }

    /**
     * –í–´–°–û–ö–û–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
     * –¶–µ–ª—å: <10ms —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    @Transactional(readOnly = true)
    public Result<Boolean> checkSufficientFundsOptimized(Long userId, Money amount) {
        long startTime = System.currentTimeMillis();
        operationCount.incrementAndGet();

        try {
            if (userId == null || userId <= 0 || amount == null) {
                return Result.error(new InvalidTransactionException("INVALID_PARAMETERS",
                        "userId=" + userId + ", amount=" + amount, "–í–∞–ª–∏–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã"));
            }

            // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –∫—ç—à
            BalanceAggregate cachedBalance = balanceCache.get(userId);
            if (cachedBalance != null && isCacheValid(userId)) {
                cacheHits.incrementAndGet();

                boolean hasFunds = cachedBalance.hasSufficientFunds(amount);
                long duration = recordOperationTime(startTime);

                log.debug("‚úÖ FUNDS CHECK CACHE HIT: userId={}, amount={}, sufficient={} –∑–∞ {}ms",
                        userId, amount.getAmount(), hasFunds, duration);
                return Result.success(hasFunds);
            }

            cacheMisses.incrementAndGet();
            dbQueries.incrementAndGet();

            // –ó–∞–ø—Ä–æ—Å –∫ –ë–î
            var balanceOptional = balanceAggregateRepository.findByUserId(userId);

            if (balanceOptional.isEmpty()) {
                long duration = recordOperationTime(startTime);
                log.warn("‚ö†Ô∏è FUNDS CHECK - BALANCE NOT FOUND: userId={} –∑–∞ {}ms", userId, duration);
                return Result.success(false);
            }

            BalanceAggregate balance = balanceOptional.get();

            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            if (balanceCache.size() < CACHE_SIZE_LIMIT) {
                balanceCache.put(userId, balance);
                balanceVersions.put(userId, System.currentTimeMillis());
            }

            boolean hasFunds = balance.hasSufficientFunds(amount);
            long duration = recordOperationTime(startTime);

            if (duration <= FAST_OPERATION_THRESHOLD_MS) {
                log.debug("‚úÖ FUNDS CHECK FAST: userId={}, sufficient={} –∑–∞ {}ms",
                        userId, hasFunds, duration);
            } else {
                log.warn("‚ö†Ô∏è FUNDS CHECK SLOW: userId={} –∑–∞ {}ms (—Ü–µ–ª—å: <{}ms)",
                        userId, duration, FAST_OPERATION_THRESHOLD_MS);
            }

            return Result.success(hasFunds);

        } catch (Exception e) {
            long duration = recordOperationTime(startTime);
            log.error("üö® FUNDS CHECK ERROR: userId={} –ø–æ—Å–ª–µ {}ms: {}", userId, duration, e.getMessage(), e);
            return Result.error(new InvalidTransactionException("FUNDS_CHECK_ERROR",
                    e.getMessage(), "–í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"));
        }
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ–ø–µ—Ä–∞—Ü–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
     */
    @CacheEvict(value = "balanceCache", key = "#request.userId")
    @Transactional
    public Result<BalanceResponse> processDepositOptimized(OperationRequest request) {
        long startTime = System.currentTimeMillis();
        operationCount.incrementAndGet();

        try {
            var validationResult = validateOperationRequest(request);
            if (!validationResult.isSuccess()) {
                return Result.error(validationResult.getError());
            }

            // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            invalidateUserCache(request.getUserId());

            // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
            log.debug("üöÄ DEPOSIT START: userId={}, amount={}", request.getUserId(), request.getAmount());

            // TODO: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
            // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            long duration = recordOperationTime(startTime);
            log.warn("‚ö†Ô∏è DEPOSIT NOT IMPLEMENTED: userId={} –∑–∞ {}ms", request.getUserId(), duration);

            return Result.error(new InvalidTransactionException("DEPOSIT_NOT_IMPLEMENTED",
                    "Deposit operation not available", "–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è"));

        } catch (Exception e) {
            long duration = recordOperationTime(startTime);
            log.error("üö® DEPOSIT ERROR: userId={} –ø–æ—Å–ª–µ {}ms: {}",
                    request.getUserId(), duration, e.getMessage(), e);
            return Result.error(new InvalidTransactionException("DEPOSIT_ERROR",
                    e.getMessage(), "–í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"));
        }
    }

    /**
     * BATCH –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    @Transactional(readOnly = true)
    public Result<List<BalanceResponse>> getMultipleBalancesOptimized(List<Long> userIds) {
        long startTime = System.currentTimeMillis();
        operationCount.incrementAndGet();

        try {
            if (userIds == null || userIds.isEmpty()) {
                return Result.error(new InvalidTransactionException("INVALID_USER_IDS",
                        "empty list", "–ù–µ–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"));
            }

            log.debug("üöÄ BATCH BALANCE: –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–æ–≤ –¥–ª—è {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", userIds.size());

            // TODO: –†–µ–∞–ª–∏–∑–∞—Ü–∏—è batch –∑–∞–ø—Ä–æ—Å–∞
            // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
            long duration = recordOperationTime(startTime);
            log.warn("‚ö†Ô∏è BATCH BALANCE NOT IMPLEMENTED –∑–∞ {}ms", duration);

            return Result.error(new InvalidTransactionException("BATCH_NOT_IMPLEMENTED",
                    "Batch operation not available", "–†–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π batch —Å–µ—Ä–≤–∏—Å"));

        } catch (Exception e) {
            long duration = recordOperationTime(startTime);
            log.error("üö® BATCH BALANCE ERROR –ø–æ—Å–ª–µ {}ms: {}", duration, e.getMessage(), e);
            return Result.error(new InvalidTransactionException("BATCH_ERROR",
                    e.getMessage(), "–í–∞–ª–∏–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"));
        }
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –±–∞–ª–∞–Ω—Å–æ–≤
     */
    public CompletableFuture<Void> preloadPopularBalances(List<Long> popularUserIds) {
        return CompletableFuture.runAsync(() -> {
            long startTime = System.currentTimeMillis();
            int loaded = 0;

            try {
                for (Long userId : popularUserIds) {
                    if (!balanceCache.containsKey(userId)) {
                        var balanceOpt = balanceAggregateRepository.findByUserId(userId);
                        if (balanceOpt.isPresent() && balanceCache.size() < CACHE_SIZE_LIMIT) {
                            balanceCache.put(userId, balanceOpt.get());
                            balanceVersions.put(userId, System.currentTimeMillis());
                            loaded++;
                        }
                    }
                }

                long duration = System.currentTimeMillis() - startTime;
                log.info("üìä PRELOAD COMPLETE: –ó–∞–≥—Ä—É–∂–µ–Ω–æ {} –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞ {}ms", loaded, duration);

            } catch (Exception e) {
                long duration = System.currentTimeMillis() - startTime;
                log.error("üö® PRELOAD ERROR –ø–æ—Å–ª–µ {}ms: {}", duration, e.getMessage(), e);
            }
        });
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞
     */
    public void cleanupExpiredCache() {
        long now = System.currentTimeMillis();
        int removed = 0;

        balanceVersions.entrySet().removeIf(entry -> {
            if (now - entry.getValue() > CACHE_TTL_MS) {
                balanceCache.remove(entry.getKey());
                return true;
            }
            return false;
        });

        if (removed > 0) {
            log.info("üßπ CACHE CLEANUP: –£–¥–∞–ª–µ–Ω–æ {} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π", removed);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    public PerformanceMetrics getPerformanceMetrics() {
        int hits = cacheHits.get();
        int misses = cacheMisses.get();
        int operations = operationCount.get();
        double hitRatio = (hits + misses) > 0 ? (double) hits / (hits + misses) * 100 : 0;
        double avgResponseTime = operations > 0 ? (double) totalResponseTime.get() / operations : 0;

        return new PerformanceMetrics(
                hits, misses, hitRatio,
                balanceCache.size(), CACHE_SIZE_LIMIT,
                dbQueries.get(), operations,
                avgResponseTime, PERFORMANCE_THRESHOLD_MS);
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
     */
    private boolean isCacheValid(Long userId) {
        Long cacheTime = balanceVersions.get(userId);
        return cacheTime != null && (System.currentTimeMillis() - cacheTime) < CACHE_TTL_MS;
    }

    private void invalidateUserCache(Long userId) {
        balanceCache.remove(userId);
        balanceVersions.remove(userId);
    }

    private long recordOperationTime(long startTime) {
        long duration = System.currentTimeMillis() - startTime;
        totalResponseTime.addAndGet(duration);
        return duration;
    }

    private Result<OperationRequest> validateOperationRequest(OperationRequest request) {
        if (request == null) {
            return Result.error(new InvalidTransactionException("VALIDATION_FAILED",
                    "null", "–í–∞–ª–∏–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å –æ–ø–µ—Ä–∞—Ü–∏–∏"));
        }
        if (request.getUserId() == null || request.getUserId() <= 0) {
            return Result.error(new InvalidTransactionException("INVALID_USER_ID",
                    String.valueOf(request.getUserId()), "–í–∞–ª–∏–¥–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"));
        }
        if (request.getAmount() == null || request.getAmount().compareTo(BigDecimal.ZERO) <= 0) {
            return Result.error(new InvalidTransactionException("INVALID_AMOUNT",
                    String.valueOf(request.getAmount()), "–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è —Å—É–º–º–∞"));
        }
        return Result.success(request);
    }

    private BalanceResponse convertToResponse(BalanceAggregate balance) {
        return BalanceResponse.builder()
                .userId(balance.getUserId())
                .currentBalance(balance.getCurrentBalance().getAmount())
                .totalDeposited(balance.getTotalDeposited().getAmount())
                .totalSpent(balance.getTotalSpent().getAmount())
                .currency(balance.getCurrency().getCode())
                .isActive(balance.getIsActive())
                .lastUpdated(balance.getLastUpdated())
                .build();
    }

    /**
     * –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    public static class PerformanceMetrics {
        public final int cacheHits;
        public final int cacheMisses;
        public final double hitRatio;
        public final int cacheSize;
        public final int maxCacheSize;
        public final int dbQueries;
        public final int totalOperations;
        public final double avgResponseTime;
        public final int performanceThresholdMs;

        public PerformanceMetrics(int cacheHits, int cacheMisses, double hitRatio,
                int cacheSize, int maxCacheSize, int dbQueries, int totalOperations,
                double avgResponseTime, int performanceThresholdMs) {
            this.cacheHits = cacheHits;
            this.cacheMisses = cacheMisses;
            this.hitRatio = hitRatio;
            this.cacheSize = cacheSize;
            this.maxCacheSize = maxCacheSize;
            this.dbQueries = dbQueries;
            this.totalOperations = totalOperations;
            this.avgResponseTime = avgResponseTime;
            this.performanceThresholdMs = performanceThresholdMs;
        }

        @Override
        public String toString() {
            return String.format(
                    "BalanceMetrics{hits=%d, misses=%d, hitRatio=%.1f%%, cache=%d/%d, dbQueries=%d, ops=%d, avgTime=%.1fms, threshold=%dms}",
                    cacheHits, cacheMisses, hitRatio, cacheSize, maxCacheSize, dbQueries, totalOperations,
                    avgResponseTime, performanceThresholdMs);
        }
    }
}