package shit.back.application.service.metrics;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.web.servlet.mvc.method.annotation.SseEmitter;

import java.io.IOException;
import java.time.LocalDateTime;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ –∏ broadcasting –º–µ—Ç—Ä–∏–∫
 * –ò–∑–≤–ª–µ—á–µ–Ω –∏–∑ BackgroundMetricsService –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è SRP
 * –û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞ SSE connections –∏ –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞–º
 */
@Service
public class MetricsSSEBroadcastService {

    private static final Logger log = LoggerFactory.getLogger(MetricsSSEBroadcastService.class);

    @Autowired
    private MetricsDataFormatterService dataFormatterService;

    // SSE connections management
    private final Set<SseEmitter> activeConnections = ConcurrentHashMap.newKeySet();
    private final AtomicLong totalBroadcasts = new AtomicLong(0);
    private volatile LocalDateTime lastBroadcast;

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    public void addSSEConnection(SseEmitter emitter) {
        activeConnections.add(emitter);
        log.info("‚ûï –ù–æ–≤–æ–µ SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {}", activeConnections.size());

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callbacks –¥–ª—è cleanup
        setupEmitterCallbacks(emitter);

        log.info("üîç SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ");
    }

    /**
     * Broadcast –º–µ—Ç—Ä–∏–∫ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º SSE –∫–ª–∏–µ–Ω—Ç–∞–º
     */
    public void broadcastMetrics(Object metricsData) {
        if (activeConnections.isEmpty()) {
            log.info("üì° –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º broadcast");
            return;
        }

        try {
            String eventData = dataFormatterService.formatMetricsAsJson(metricsData);
            int successfulBroadcasts = performBroadcast(eventData);

            totalBroadcasts.incrementAndGet();
            lastBroadcast = LocalDateTime.now();

            log.info("üì° –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {} SSE –∫–ª–∏–µ–Ω—Ç–∞–º", successfulBroadcasts);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ broadcast –º–µ—Ç—Ä–∏–∫: {}", e.getMessage(), e);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ fallback –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
     */
    public void broadcastFallbackMetrics(Object fallbackMetrics) {
        log.warn("üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ fallback –º–µ—Ç—Ä–∏–∫ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏");

        try {
            String eventData = dataFormatterService.formatMetricsAsJson(fallbackMetrics);
            performBroadcast(eventData);
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ fallback –º–µ—Ç—Ä–∏–∫: {}", e.getMessage(), e);
        }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
     */
    public void sendInitialMetrics(SseEmitter emitter, Object initialMetrics) {
        if (initialMetrics == null) {
            log.debug("–ù–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É");
            return;
        }

        try {
            String eventData = dataFormatterService.formatMetricsAsJson(initialMetrics);
            emitter.send(SseEmitter.event()
                    .name("performance-metrics")
                    .data(eventData));
            log.debug("üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–∞—á–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–æ–≤–æ–º—É SSE –∫–ª–∏–µ–Ω—Ç—É");
        } catch (IOException e) {
            log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞—á–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –Ω–æ–≤–æ–º—É SSE –∫–ª–∏–µ–Ω—Ç—É: {}", e.getMessage());
            activeConnections.remove(emitter);
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ SSE —Å–µ—Ä–≤–∏—Å–∞
     */
    public SSEStatistics getSSEStatistics() {
        return SSEStatistics.builder()
                .activeConnections(activeConnections.size())
                .totalBroadcasts(totalBroadcasts.get())
                .lastBroadcast(lastBroadcast)
                .isHealthy(activeConnections.size() > 0 || lastBroadcast == null ||
                        lastBroadcast.isAfter(LocalDateTime.now().minusMinutes(5)))
                .build();
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    public void closeAllConnections() {
        log.info("üîí –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ({})", activeConnections.size());

        activeConnections.forEach(emitter -> {
            try {
                emitter.complete();
            } catch (Exception e) {
                log.debug("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {}", e.getMessage());
            }
        });

        activeConnections.clear();
        log.info("‚úÖ –í—Å–µ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã");
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è SSE —Å–µ—Ä–≤–∏—Å–∞
     */
    public boolean isHealthy() {
        // –°–µ—Ä–≤–∏—Å –∑–¥–æ—Ä–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –±—ã–ª–∏ broadcasts
        return activeConnections.size() > 0 ||
                lastBroadcast == null ||
                lastBroadcast.isAfter(LocalDateTime.now().minusMinutes(5));
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –º–µ—Ä—Ç–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    public int cleanupDeadConnections() {
        int initialSize = activeConnections.size();

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∂–∏–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        activeConnections.removeIf(emitter -> {
            try {
                emitter.send(SseEmitter.event()
                        .name("ping")
                        .data("ping"));
                return false; // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∂–∏–≤–æ–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º
            } catch (Exception e) {
                log.debug("–£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä—Ç–≤–æ–≥–æ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {}", e.getMessage());
                return true; // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ—Ä—Ç–≤–æ–µ, —É–¥–∞–ª—è–µ–º
            }
        });

        int cleanedUp = initialSize - activeConnections.size();
        if (cleanedUp > 0) {
            log.info("üßπ –û—á–∏—â–µ–Ω–æ {} –º–µ—Ä—Ç–≤—ã—Ö SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π", cleanedUp);
        }

        return cleanedUp;
    }

    // ==================== PRIVATE –ú–ï–¢–û–î–´ ====================

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ broadcast —Å —É–¥–∞–ª–µ–Ω–∏–µ–º –º–µ—Ä—Ç–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    private int performBroadcast(String eventData) {
        int successfulBroadcasts = 0;

        log.debug("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ {} –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º", activeConnections.size());

        // –£–¥–∞–ª—è–µ–º dead connections –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∂–∏–≤—ã–º
        activeConnections.removeIf(emitter -> {
            try {
                log.debug("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ SSE event 'performance-metrics'");

                emitter.send(SseEmitter.event()
                        .name("performance-metrics")
                        .data(eventData));

                log.debug("‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ SSE –∫–ª–∏–µ–Ω—Ç—É");
                return false; // –û—Å—Ç–∞–≤–ª—è–µ–º –≤ –º–Ω–æ–∂–µ—Å—Ç–≤–µ
            } catch (IOException e) {
                log.warn("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –º–µ—Ä—Ç–≤–æ–≥–æ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {}", e.getMessage());
                return true; // –£–¥–∞–ª—è–µ–º –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞
            } catch (Exception e) {
                log.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SSE –¥–∞–Ω–Ω—ã—Ö: {}", e.getMessage(), e);
                return true; // –£–¥–∞–ª—è–µ–º –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
            }
        });

        successfulBroadcasts = activeConnections.size();
        return successfulBroadcasts;
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callbacks –¥–ª—è SSE emitter
     */
    private void setupEmitterCallbacks(SseEmitter emitter) {
        emitter.onCompletion(() -> {
            activeConnections.remove(emitter);
            log.debug("‚úÖ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –û—Å—Ç–∞–µ—Ç—Å—è: {}", activeConnections.size());
        });

        emitter.onTimeout(() -> {
            activeConnections.remove(emitter);
            log.debug("‚è∞ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É. –û—Å—Ç–∞–µ—Ç—Å—è: {}", activeConnections.size());
        });

        emitter.onError((ex) -> {
            activeConnections.remove(emitter);
            log.debug("‚ùå –û—à–∏–±–∫–∞ SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {}. –û—Å—Ç–∞–µ—Ç—Å—è: {}",
                    ex.getMessage(), activeConnections.size());
        });
    }

    // ==================== DATA CLASSES ====================

    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SSE —Å–µ—Ä–≤–∏—Å–∞
     */
    public static class SSEStatistics {
        private final Integer activeConnections;
        private final Long totalBroadcasts;
        private final LocalDateTime lastBroadcast;
        private final Boolean isHealthy;

        public static SSEStatisticsBuilder builder() {
            return new SSEStatisticsBuilder();
        }

        private SSEStatistics(SSEStatisticsBuilder builder) {
            this.activeConnections = builder.activeConnections;
            this.totalBroadcasts = builder.totalBroadcasts;
            this.lastBroadcast = builder.lastBroadcast;
            this.isHealthy = builder.isHealthy;
        }

        // Getters
        public Integer getActiveConnections() {
            return activeConnections;
        }

        public Long getTotalBroadcasts() {
            return totalBroadcasts;
        }

        public LocalDateTime getLastBroadcast() {
            return lastBroadcast;
        }

        public Boolean getIsHealthy() {
            return isHealthy;
        }

        public static class SSEStatisticsBuilder {
            private Integer activeConnections;
            private Long totalBroadcasts;
            private LocalDateTime lastBroadcast;
            private Boolean isHealthy;

            public SSEStatisticsBuilder activeConnections(Integer activeConnections) {
                this.activeConnections = activeConnections;
                return this;
            }

            public SSEStatisticsBuilder totalBroadcasts(Long totalBroadcasts) {
                this.totalBroadcasts = totalBroadcasts;
                return this;
            }

            public SSEStatisticsBuilder lastBroadcast(LocalDateTime lastBroadcast) {
                this.lastBroadcast = lastBroadcast;
                return this;
            }

            public SSEStatisticsBuilder isHealthy(Boolean isHealthy) {
                this.isHealthy = isHealthy;
                return this;
            }

            public SSEStatistics build() {
                return new SSEStatistics(this);
            }
        }
    }
}