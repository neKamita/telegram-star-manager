package shit.back.aspect;

import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.JoinPoint;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import shit.back.annotation.Auditable;
import shit.back.security.SecurityContextManager;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * –ê—Å–ø–µ–∫—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞—É–¥–∏—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–π
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è Security Patterns (Week 3-4) - AuditAspect –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ
 * –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * –§—É–Ω–∫—Ü–∏–∏:
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–∑–æ–≤–æ–≤ –º–µ—Ç–æ–¥–æ–≤
 * - –¢—Ä–µ–∫–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
 * - –ê—É–¥–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * - –°–±–æ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * 
 * @author TelegramStarManager
 * @since Week 3-4 Refactoring - Security Patterns Implementation
 */
@Slf4j
@Aspect
@Component
public class AuditAspect {

    @Autowired(required = false)
    private SecurityContextManager securityContextManager;

    private final Map<String, OperationMetrics> operationMetrics = new ConcurrentHashMap<>();

    /**
     * Pointcut –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ —Å –∞–Ω–Ω–æ—Ç–∞—Ü–∏–µ–π @Auditable
     */
    @Pointcut("@annotation(shit.back.annotation.Auditable)")
    public void auditableMethod() {
    }

    /**
     * Pointcut –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ —Å–µ—Ä–≤–∏—Å–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    @Pointcut("execution(* shit.back.service.Admin*.*(..))")
    public void adminServiceMethods() {
    }

    /**
     * Pointcut –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç–æ–¥–æ–≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    @Pointcut("execution(* shit.back.controller.admin.*.*(..))")
    public void adminControllerMethods() {
    }

    /**
     * Pointcut –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    @Pointcut("execution(* shit.back.security.*.*(..))")
    public void securityMethods() {
    }

    /**
     * Around advice –¥–ª—è –∞—É–¥–∏—Ä—É–µ–º—ã—Ö –º–µ—Ç–æ–¥–æ–≤
     */
    @Around("auditableMethod() && @annotation(auditable)")
    public Object auditMethod(ProceedingJoinPoint joinPoint, Auditable auditable) throws Throwable {
        String methodName = getMethodSignature(joinPoint);
        String userId = getCurrentUserId();
        long startTime = System.currentTimeMillis();

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        log.info("üîç –ê–£–î–ò–¢ [{}]: –ù–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ '{}' | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {} | –¢–∏–ø: {} | –í—Ä–µ–º—è: {}",
                generateAuditId(),
                methodName,
                userId,
                auditable.auditType().name(),
                LocalDateTime.now());

        Object result = null;
        Exception exception = null;

        try {
            // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
            result = joinPoint.proceed();

            long executionTime = System.currentTimeMillis() - startTime;

            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            log.info(
                    "‚úÖ –ê–£–î–ò–¢: –û–ø–µ—Ä–∞—Ü–∏—è '{}' –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {} | –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {}ms | –û–ø–∏—Å–∞–Ω–∏–µ: {}",
                    methodName,
                    userId,
                    executionTime,
                    auditable.description());

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
            updateOperationMetrics(methodName, executionTime, true);

            return result;

        } catch (Exception e) {
            exception = e;
            long executionTime = System.currentTimeMillis() - startTime;

            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
            log.error("‚ùå –ê–£–î–ò–¢: –û—à–∏–±–∫–∞ –≤ –æ–ø–µ—Ä–∞—Ü–∏–∏ '{}' | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {} | –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {}ms | –û—à–∏–±–∫–∞: {}",
                    methodName,
                    userId,
                    executionTime,
                    e.getMessage());

            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —Å –æ—à–∏–±–∫–æ–π
            updateOperationMetrics(methodName, executionTime, false);

            // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞—É–¥–∏—Ç –¥–ª—è –æ—à–∏–±–æ–∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            if (auditable.auditType() == Auditable.AuditType.SECURITY) {
                logCriticalSecurityEvent(methodName, userId, e);
            }

            throw e;
        }
    }

    /**
     * Before advice –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    @Before("adminServiceMethods() || adminControllerMethods()")
    public void auditAdminOperation(JoinPoint joinPoint) {
        String methodName = getMethodSignature(joinPoint);
        String userId = getCurrentUserId();
        Object[] args = joinPoint.getArgs();

        log.info("üîê –ê–î–ú–ò–ù-–ê–£–î–ò–¢: –í—ã–∑–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ '{}' | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {} | –ê—Ä–≥—É–º–µ–Ω—Ç—ã: {} | –í—Ä–µ–º—è: {}",
                methodName,
                userId,
                sanitizeArguments(args),
                LocalDateTime.now());
    }

    /**
     * After advice –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    // Temporarily disabled to avoid recursion with SecurityContextManager.getCurrentUserId()
    // @AfterReturning(pointcut = "securityMethods()", returning = "result")
    public void auditSecurityOperationDisabled(JoinPoint joinPoint, Object result) {
        String methodName = getMethodSignature(joinPoint);
        String userId = getCurrentUserId();

        log.info(
                "üõ°Ô∏è –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–¨-–ê–£–î–ò–¢: –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ '{}' | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {} | –†–µ–∑—É–ª—å—Ç–∞—Ç: {} | –í—Ä–µ–º—è: {}",
                methodName,
                userId,
                sanitizeResult(result),
                LocalDateTime.now());
    }

    /**
     * After throwing advice –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π
     */
    @AfterThrowing(pointcut = "adminServiceMethods() || adminControllerMethods() || securityMethods()", throwing = "exception")
    public void auditException(JoinPoint joinPoint, Exception exception) {
        String methodName = getMethodSignature(joinPoint);
        String userId = getCurrentUserId();

        log.error(
                "üí• –ê–£–î–ò–¢-–ò–°–ö–õ–Æ–ß–ï–ù–ò–ï: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –º–µ—Ç–æ–¥–µ '{}' | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {} | –¢–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {} | –°–æ–æ–±—â–µ–Ω–∏–µ: {} | –í—Ä–µ–º—è: {}",
                methodName,
                userId,
                exception.getClass().getSimpleName(),
                exception.getMessage(),
                LocalDateTime.now());
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    public Map<String, OperationMetrics> getOperationMetrics() {
        return new ConcurrentHashMap<>(operationMetrics);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –º–µ—Ç—Ä–∏–∫ –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    public void clearMetrics() {
        operationMetrics.clear();
        log.info("üßπ –ê–£–î–ò–¢: –ú–µ—Ç—Ä–∏–∫–∏ –æ–ø–µ—Ä–∞—Ü–∏–π –æ—á–∏—â–µ–Ω—ã");
    }

    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    private String getCurrentUserId() {
        if (securityContextManager != null) {
            return securityContextManager.getCurrentUserId().orElse("ANONYMOUS");
        }
        return "SYSTEM";
    }

    private String getMethodSignature(JoinPoint joinPoint) {
        return joinPoint.getSignature().getDeclaringType().getSimpleName() + "." +
                joinPoint.getSignature().getName();
    }

    private String generateAuditId() {
        return "AUD_" + System.currentTimeMillis() + "_" +
                Integer.toHexString((int) (Math.random() * 0xFFFF)).toUpperCase();
    }

    private void updateOperationMetrics(String methodName, long executionTime, boolean success) {
        operationMetrics.computeIfAbsent(methodName, k -> new OperationMetrics())
                .update(executionTime, success);
    }

    private void logCriticalSecurityEvent(String methodName, String userId, Exception exception) {
        log.error(
                "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ê–£–î–ò–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò: –û—à–∏–±–∫–∞ –≤ –º–µ—Ç–æ–¥–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ '{}' | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {} | –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {} | –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –í–ù–ò–ú–ê–ù–ò–ï!",
                methodName,
                userId,
                exception.getClass().getSimpleName());
    }

    private String sanitizeArguments(Object[] args) {
        if (args == null || args.length == 0) {
            return "[]";
        }

        // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - —Å–∫—Ä—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        String[] sanitized = Arrays.stream(args)
                .map(arg -> {
                    if (arg == null)
                        return "null";
                    String str = arg.toString();
                    // –°–∫—Ä—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä–æ–ª–∏, —Ç–æ–∫–µ–Ω—ã –∏ —Ç.–¥.
                    if (str.toLowerCase().contains("password") ||
                            str.toLowerCase().contains("token") ||
                            str.toLowerCase().contains("secret")) {
                        return "[SANITIZED]";
                    }
                    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                    return str.length() > 100 ? str.substring(0, 100) + "..." : str;
                })
                .toArray(String[]::new);

        return Arrays.toString(sanitized);
    }

    private String sanitizeResult(Object result) {
        if (result == null)
            return "null";

        String str = result.toString();
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –ª–æ–≥–∞—Ö
        return str.length() > 200 ? str.substring(0, 200) + "..." : str;
    }

    /**
     * –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    public static class OperationMetrics {
        private long totalCalls = 0;
        private long successfulCalls = 0;
        private long totalExecutionTime = 0;
        private long minExecutionTime = Long.MAX_VALUE;
        private long maxExecutionTime = 0;
        private LocalDateTime lastCall;

        public synchronized void update(long executionTime, boolean success) {
            totalCalls++;
            totalExecutionTime += executionTime;

            if (success) {
                successfulCalls++;
            }

            minExecutionTime = Math.min(minExecutionTime, executionTime);
            maxExecutionTime = Math.max(maxExecutionTime, executionTime);
            lastCall = LocalDateTime.now();
        }

        // –ì–µ—Ç—Ç–µ—Ä—ã
        public long getTotalCalls() {
            return totalCalls;
        }

        public long getSuccessfulCalls() {
            return successfulCalls;
        }

        public double getSuccessRate() {
            return totalCalls == 0 ? 0.0 : (double) successfulCalls / totalCalls * 100;
        }

        public double getAverageExecutionTime() {
            return totalCalls == 0 ? 0.0 : (double) totalExecutionTime / totalCalls;
        }

        public long getMinExecutionTime() {
            return minExecutionTime == Long.MAX_VALUE ? 0 : minExecutionTime;
        }

        public long getMaxExecutionTime() {
            return maxExecutionTime;
        }

        public LocalDateTime getLastCall() {
            return lastCall;
        }
    }
}