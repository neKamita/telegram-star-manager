package shit.back.aspect;

import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import shit.back.annotation.FeatureFlag;
import shit.back.service.FeatureFlagService;

import java.lang.reflect.Method;

@Slf4j
@Aspect
@Component
public class FeatureFlagAspect {
    
    @Autowired
    private FeatureFlagService featureFlagService;
    
    @Around("@annotation(shit.back.annotation.FeatureFlag)")
    public Object aroundFeatureFlaggedMethod(ProceedingJoinPoint joinPoint) throws Throwable {
        MethodSignature signature = (MethodSignature) joinPoint.getSignature();
        Method method = signature.getMethod();
        FeatureFlag featureFlag = method.getAnnotation(FeatureFlag.class);
        
        String flagName = featureFlag.value();
        String userId = extractUserIdFromArgs(joinPoint.getArgs());
        
        boolean isEnabled;
        if (featureFlag.userSpecific() && userId != null) {
            isEnabled = featureFlagService.isFeatureEnabled(flagName, userId);
        } else {
            isEnabled = featureFlagService.isFeatureEnabled(flagName);
        }
        
        if (isEnabled) {
            log.debug("Feature flag '{}' is enabled, proceeding with method execution", flagName);
            return joinPoint.proceed();
        } else {
            log.debug("Feature flag '{}' is disabled, executing fallback", flagName);
            return executeFallback(joinPoint, featureFlag);
        }
    }
    
    private String extractUserIdFromArgs(Object[] args) {
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ userId –≤ –∞—Ä–≥—É–º–µ–Ω—Ç–∞—Ö –º–µ—Ç–æ–¥–∞
        for (Object arg : args) {
            if (arg != null) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ–±—ä–µ–∫—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å userId
                if (arg instanceof org.telegram.telegrambots.meta.api.objects.Message) {
                    org.telegram.telegrambots.meta.api.objects.Message message = 
                        (org.telegram.telegrambots.meta.api.objects.Message) arg;
                    return String.valueOf(message.getFrom().getId());
                }
                
                if (arg instanceof org.telegram.telegrambots.meta.api.objects.CallbackQuery) {
                    org.telegram.telegrambots.meta.api.objects.CallbackQuery callback = 
                        (org.telegram.telegrambots.meta.api.objects.CallbackQuery) arg;
                    return String.valueOf(callback.getFrom().getId());
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—à–∏ –º–æ–¥–µ–ª–∏
                if (arg instanceof shit.back.model.UserSession) {
                    shit.back.model.UserSession session = (shit.back.model.UserSession) arg;
                    return String.valueOf(session.getUserId());
                }
                
                // –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ String, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å userId
                if (arg instanceof String) {
                    String strArg = (String) arg;
                    try {
                        Long.parseLong(strArg);
                        return strArg; // –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ userId
                    } catch (NumberFormatException e) {
                        // –ù–µ —á–∏—Å–ª–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                    }
                }
                
                // –ï—Å–ª–∏ —ç—Ç–æ Long, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –±—ã—Ç—å userId
                if (arg instanceof Long) {
                    return String.valueOf(arg);
                }
            }
        }
        
        return null;
    }
    
    private Object executeFallback(ProceedingJoinPoint joinPoint, FeatureFlag featureFlag) throws Throwable {
        String fallbackMethod = featureFlag.fallback();
        
        if (fallbackMethod.isEmpty()) {
            // –ï—Å–ª–∏ fallback –Ω–µ —É–∫–∞–∑–∞–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
            return createDefaultResponse(joinPoint);
        }
        
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å fallback –º–µ—Ç–æ–¥
            Object target = joinPoint.getTarget();
            Class<?> targetClass = target.getClass();
            Method[] methods = targetClass.getDeclaredMethods();
            
            for (Method method : methods) {
                if (method.getName().equals(fallbackMethod)) {
                    method.setAccessible(true);
                    
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
                    if (method.getParameterCount() == joinPoint.getArgs().length) {
                        return method.invoke(target, joinPoint.getArgs());
                    } else if (method.getParameterCount() == 0) {
                        return method.invoke(target);
                    }
                }
            }
            
            log.warn("Fallback method '{}' not found for feature flag '{}', using default response", 
                fallbackMethod, featureFlag.value());
            
        } catch (Exception e) {
            log.error("Error executing fallback method '{}' for feature flag '{}': {}", 
                fallbackMethod, featureFlag.value(), e.getMessage());
        }
        
        return createDefaultResponse(joinPoint);
    }
    
    private Object createDefaultResponse(ProceedingJoinPoint joinPoint) {
        Class<?> returnType = ((MethodSignature) joinPoint.getSignature()).getReturnType();
        
        // –î–ª—è Telegram bot –º–µ—Ç–æ–¥–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (returnType == org.telegram.telegrambots.meta.api.methods.send.SendMessage.class) {
            return createDisabledFeatureMessage(joinPoint);
        }
        
        if (returnType == org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText.class) {
            return createDisabledFeatureEditMessage(joinPoint);
        }
        
        // –î–ª—è –ø—Ä–∏–º–∏—Ç–∏–≤–Ω—ã—Ö —Ç–∏–ø–æ–≤
        if (returnType == boolean.class || returnType == Boolean.class) {
            return false;
        }
        
        if (returnType == int.class || returnType == Integer.class) {
            return 0;
        }
        
        if (returnType == String.class) {
            return "–§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞";
        }
        
        // –î–ª—è void –º–µ—Ç–æ–¥–æ–≤
        if (returnType == void.class || returnType == Void.class) {
            return null;
        }
        
        // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
        return null;
    }
    
    private org.telegram.telegrambots.meta.api.methods.send.SendMessage createDisabledFeatureMessage(ProceedingJoinPoint joinPoint) {
        Object[] args = joinPoint.getArgs();
        String chatId = extractChatId(args);
        
        org.telegram.telegrambots.meta.api.methods.send.SendMessage message = 
            new org.telegram.telegrambots.meta.api.methods.send.SendMessage();
        message.setChatId(chatId != null ? chatId : "0");
        message.setText("üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É–ª—É—á—à–µ–Ω–∏–µ–º!");
        message.setParseMode("HTML");
        
        return message;
    }
    
    private org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText createDisabledFeatureEditMessage(ProceedingJoinPoint joinPoint) {
        Object[] args = joinPoint.getArgs();
        String chatId = extractChatId(args);
        
        org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText editMessage = 
            new org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText();
        editMessage.setChatId(chatId != null ? chatId : "0");
        editMessage.setText("üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ –µ—ë —É–ª—É—á—à–µ–Ω–∏–µ–º!");
        editMessage.setParseMode("HTML");
        
        return editMessage;
    }
    
    private String extractChatId(Object[] args) {
        for (Object arg : args) {
            if (arg instanceof org.telegram.telegrambots.meta.api.objects.Message) {
                org.telegram.telegrambots.meta.api.objects.Message message = 
                    (org.telegram.telegrambots.meta.api.objects.Message) arg;
                return String.valueOf(message.getChatId());
            }
            
            if (arg instanceof org.telegram.telegrambots.meta.api.objects.CallbackQuery) {
                org.telegram.telegrambots.meta.api.objects.CallbackQuery callback = 
                    (org.telegram.telegrambots.meta.api.objects.CallbackQuery) arg;
                return String.valueOf(callback.getMessage().getChatId());
            }
            
            if (arg instanceof Long) {
                return String.valueOf(arg);
            }
            
            if (arg instanceof String) {
                try {
                    Long.parseLong((String) arg);
                    return (String) arg;
                } catch (NumberFormatException e) {
                    // –ù–µ —á–∏—Å–ª–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
                }
            }
        }
        
        return null;
    }
}
