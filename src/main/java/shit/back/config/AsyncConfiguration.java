package shit.back.config;

import lombok.extern.slf4j.Slf4j;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;

import java.util.concurrent.Executor;

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * 
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø:
 * - –°–æ–∑–¥–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π thread pool –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
 * - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø—É–ª–∞ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ë–î
 * - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ UserActivityLoggingService –æ–ø–µ—Ä–∞—Ü–∏–π
 */
@Slf4j
@Configuration
@EnableAsync
public class AsyncConfiguration {

    /**
     * –ö–†–ò–¢–ò–ß–ï–°–ö–ò –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô executor –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     *
     * –ù–û–í–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Å 180-257ms –¥–æ <30ms:
     * - core-size: 8 (—É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞)
     * - max-size: 25 (—É–≤–µ–ª–∏—á–µ–Ω –¥–ª—è –ø–∏–∫–æ–≤—ã—Ö –Ω–∞–≥—Ä—É–∑–æ–∫)
     * - queue-capacity: 200 (—É–≤–µ–ª–∏—á–µ–Ω –±—É—Ñ–µ—Ä –¥–ª—è batch –æ–ø–µ—Ä–∞—Ü–∏–π)
     * - keep-alive: 120s (–¥–æ–ª—å—à–µ –¥–µ—Ä–∂–∏–º –ø–æ—Ç–æ–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏)
     */
    @Bean(name = "userActivityLoggingExecutor")
    public Executor userActivityLoggingExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();

        // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        executor.setCorePoolSize(8);
        executor.setMaxPoolSize(25);
        executor.setQueueCapacity(200);
        executor.setKeepAliveSeconds(120);

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        executor.setThreadNamePrefix("hp-logging-");
        executor.setWaitForTasksToCompleteOnShutdown(true);
        executor.setAwaitTerminationSeconds(180);
        executor.setAllowCoreThreadTimeOut(false); // –î–µ—Ä–∂–∏–º core –ø–æ—Ç–æ–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏

        // –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        executor.setRejectedExecutionHandler((runnable, executor1) -> {
            log.error("üö® CRITICAL: –ü—É–ª –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω! –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤: {}, –û—á–µ—Ä–µ–¥—å: {}",
                    executor1.getActiveCount(), executor1.getQueue().size());

            // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∫–∞–∫ fallback
            if (!executor1.isShutdown()) {
                long startTime = System.currentTimeMillis();
                runnable.run();
                long duration = System.currentTimeMillis() - startTime;
                log.warn("‚ö†Ô∏è FALLBACK: –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞ {}ms", duration);
            }
        });

        executor.initialize();

        log.info("üöÄ HIGH PERFORMANCE: UserActivityLoggingExecutor –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω (core={}, max={}, queue={})",
                executor.getCorePoolSize(), executor.getMaxPoolSize(), executor.getQueueCapacity());
        log.info("üéØ –¶–ï–õ–¨: –°–Ω–∏–∂–µ–Ω–∏–µ DB –æ–ø–µ—Ä–∞—Ü–∏–π —Å 180-257ms –¥–æ <30ms");

        return executor;
    }

    /**
     * –ù–û–í–´–ô: –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π executor –¥–ª—è DB –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    @Bean(name = "databaseOperationExecutor")
    public Executor databaseOperationExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();

        // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è DB –æ–ø–µ—Ä–∞—Ü–∏–π
        executor.setCorePoolSize(4);
        executor.setMaxPoolSize(12);
        executor.setQueueCapacity(50);
        executor.setKeepAliveSeconds(90);

        executor.setThreadNamePrefix("db-ops-");
        executor.setWaitForTasksToCompleteOnShutdown(true);
        executor.setAwaitTerminationSeconds(120);

        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è DB –æ–ø–µ—Ä–∞—Ü–∏–π
        executor.setRejectedExecutionHandler((runnable, executor1) -> {
            log.error("üö® DB POOL OVERFLOW: DB –ø—É–ª –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω! –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ.");
            if (!executor1.isShutdown()) {
                runnable.run();
            }
        });

        executor.initialize();

        log.info("üöÄ DB OPTIMIZED: DatabaseOperationExecutor —Å–æ–∑–¥–∞–Ω (core={}, max={}, queue={})",
                executor.getCorePoolSize(), executor.getMaxPoolSize(), executor.getQueueCapacity());

        return executor;
    }

    /**
     * –ù–û–í–´–ô: Executor –¥–ª—è –∫—ç—à –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    @Bean(name = "cacheOperationExecutor")
    public Executor cacheOperationExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();

        // –ë—ã—Å—Ç—Ä—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∫—ç—à–∞
        executor.setCorePoolSize(3);
        executor.setMaxPoolSize(8);
        executor.setQueueCapacity(100);
        executor.setKeepAliveSeconds(60);

        executor.setThreadNamePrefix("cache-ops-");
        executor.setWaitForTasksToCompleteOnShutdown(true);
        executor.setAwaitTerminationSeconds(60);

        executor.setRejectedExecutionHandler((runnable, executor1) -> {
            log.warn("‚ö†Ô∏è CACHE EXECUTOR: –ü—É–ª –∫—ç—à–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ");
            if (!executor1.isShutdown()) {
                runnable.run();
            }
        });

        executor.initialize();

        log.info("üöÄ CACHE OPTIMIZED: CacheOperationExecutor —Å–æ–∑–¥–∞–Ω (core={}, max={}, queue={})",
                executor.getCorePoolSize(), executor.getMaxPoolSize(), executor.getQueueCapacity());

        return executor;
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π executor –¥–ª—è –æ–±—â–∏—Ö –∑–∞–¥–∞—á
     * 
     * –ë–æ–ª–µ–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±—â–∏—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    @Bean(name = "taskExecutor")
    public Executor taskExecutor() {
        ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();

        executor.setCorePoolSize(3);
        executor.setMaxPoolSize(10);
        executor.setQueueCapacity(50);
        executor.setKeepAliveSeconds(60);

        executor.setThreadNamePrefix("async-task-");
        executor.setWaitForTasksToCompleteOnShutdown(true);
        executor.setAwaitTerminationSeconds(60);

        executor.initialize();

        log.info("üöÄ ASYNC CONFIG: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –æ–±—â–∏–π TaskExecutor (core={}, max={}, queue={})",
                executor.getCorePoolSize(), executor.getMaxPoolSize(), executor.getQueueCapacity());

        return executor;
    }
}