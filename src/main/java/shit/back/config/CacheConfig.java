package shit.back.config;

import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import org.springframework.cache.concurrent.ConcurrentMapCacheManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.data.redis.cache.RedisCacheConfiguration;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;

import jakarta.annotation.PostConstruct;
import java.time.Duration;

/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å fallback –ª–æ–≥–∏–∫–æ–π
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É Redis –∏ –ª–æ–∫–∞–ª—å–Ω—ã–º –∫—ç—à–µ–º
 * 
 * –û–°–ù–û–í–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
 * 1. –Ø–≤–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ RedisConnectionFactory —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
 * 2. –í—ã–∑–æ–≤ start() –¥–ª—è LettuceConnectionFactory
 * 3. –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
 * 4. Fallback –º–µ—Ö–∞–Ω–∏–∑–º –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Redis
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã SOLID:
 * - Single Responsibility: —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 * - Open/Closed: –ª–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
 * - Dependency Inversion: –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π
 */
@Slf4j
@Configuration
@EnableCaching
public class CacheConfig {

    @Value("${spring.cache.type:simple}")
    private String cacheType;

    @Value("${spring.data.redis.host:localhost}")
    private String redisHost;

    @Value("${spring.data.redis.port:6379}")
    private int redisPort;

    @Value("${spring.data.redis.password:}")
    private String redisPassword;

    @Value("${spring.data.redis.database:0}")
    private int redisDatabase;

    @Autowired
    private ObjectMapper objectMapper;

    private volatile RedisConnectionFactory createdRedisConnectionFactory;

    @PostConstruct
    public void logCacheConfiguration() {
        log.info("üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–≠–®–ê: –¢–∏–ø –∫—ç—à–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {}", cacheType);
        log.info("üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–≠–®–ê: –°–æ–∑–¥–∞–µ–º —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π Redis ConnectionFactory");
        log.info("üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–≠–®–ê: Redis –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ - Host: {}:{}, DB: {}", redisHost, redisPort, redisDatabase);
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ RedisConnectionFactory —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π
     * –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
     */
    @Bean
    @Primary
    public RedisConnectionFactory redisConnectionFactory() {
        log.info("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ RedisConnectionFactory...");

        try {
            // –°–æ–∑–¥–∞–µ–º LettuceConnectionFactory —Å —è–≤–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            LettuceConnectionFactory factory = new LettuceConnectionFactory(redisHost, redisPort);

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º password –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if (redisPassword != null && !redisPassword.trim().isEmpty()) {
                factory.setPassword(redisPassword);
                log.info("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Redis password –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
            }

            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º database
            factory.setDatabase(redisDatabase);

            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º factory
            factory.afterPropertiesSet();

            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ó–∞–ø—É—Å–∫–∞–µ–º factory
            factory.start();

            log.info("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: LettuceConnectionFactory —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø—É—â–µ–Ω");
            log.info("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Host: {}:{}, Database: {}", redisHost, redisPort, redisDatabase);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ factory —Ä–∞–±–æ—Ç–∞–µ—Ç
            try {
                var connection = factory.getConnection();
                connection.ping();
                connection.close();
                log.info("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä–∫–∞ ping —É—Å–ø–µ—à–Ω–∞");

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –¥—Ä—É–≥–∏—Ö –º–µ—Ç–æ–¥–æ–≤
                this.createdRedisConnectionFactory = factory;

            } catch (Exception pingEx) {
                log.error("‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Ping –Ω–µ—É–¥–∞—á–µ–Ω: {}", pingEx.getMessage());
                throw pingEx;
            }

            return factory;

        } catch (Exception e) {
            log.error("‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å RedisConnectionFactory: {}", e.getMessage());
            log.warn("üîÑ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–∏—Å—Ç–µ–º–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à");
            this.createdRedisConnectionFactory = null;
            return null;
        }
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π CacheManager —Å fallback –ª–æ–≥–∏–∫–æ–π
     */
    @Bean
    @Primary
    public CacheManager cacheManager(RedisConnectionFactory redisConnectionFactory) {
        log.info("üîß –ù–ê–°–¢–†–û–ô–ö–ê –ö–≠–®–ê: –°–æ–∑–¥–∞–Ω–∏–µ CacheManager...");

        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å Redis CacheManager
        if (redisConnectionFactory != null && isRedisAvailable(redisConnectionFactory)) {
            try {
                RedisCacheManager redisCacheManager = createRedisCacheManager(redisConnectionFactory);
                log.info("‚úÖ –ö–≠–®: –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω Redis CacheManager");
                return redisCacheManager;
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è –ö–≠–®: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Redis CacheManager: {}", e.getMessage());
            }
        }

        // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∫—ç—à—É
        log.warn("üîÑ –ö–≠–®: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à (fallback)");
        return createLocalCacheManager();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ Redis CacheManager —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ObjectMapper
     * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—à ObjectMapper —Å JSR310 –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
     */
    private RedisCacheManager createRedisCacheManager(RedisConnectionFactory factory) {
        log.info("üîß REDIS: –°–æ–∑–¥–∞–Ω–∏–µ Redis CacheManager —Å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π...");

        // –°–æ–∑–¥–∞–µ–º —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è SystemHealth
        Jackson2JsonRedisSerializer<shit.back.dto.monitoring.SystemHealth> systemHealthSerializer = new Jackson2JsonRedisSerializer<>(
                shit.back.dto.monitoring.SystemHealth.class);
        systemHealthSerializer.setObjectMapper(objectMapper);

        // –û–±—â–∏–π JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫—ç—à–µ–π
        GenericJackson2JsonRedisSerializer jsonSerializer = new GenericJackson2JsonRedisSerializer(objectMapper);

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è systemHealth –∫—ç—à–∞ —Å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º
        RedisCacheConfiguration systemHealthConfig = RedisCacheConfiguration.defaultCacheConfig()
                .entryTtl(Duration.ofMinutes(10))
                .serializeKeysWith(org.springframework.data.redis.serializer.RedisSerializationContext.SerializationPair
                        .fromSerializer(new StringRedisSerializer()))
                .serializeValuesWith(
                        org.springframework.data.redis.serializer.RedisSerializationContext.SerializationPair
                                .fromSerializer(systemHealthSerializer))
                .disableCachingNullValues();

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫—ç—à–µ–π
        RedisCacheConfiguration defaultConfig = RedisCacheConfiguration.defaultCacheConfig()
                .entryTtl(Duration.ofMinutes(5))
                .serializeKeysWith(org.springframework.data.redis.serializer.RedisSerializationContext.SerializationPair
                        .fromSerializer(new StringRedisSerializer()))
                .serializeValuesWith(
                        org.springframework.data.redis.serializer.RedisSerializationContext.SerializationPair
                                .fromSerializer(jsonSerializer))
                .disableCachingNullValues();

        log.info("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Redis CacheManager —Å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–ª—è SystemHealth");
        return RedisCacheManager.builder(factory)
                .cacheDefaults(defaultConfig)
                .withCacheConfiguration("systemHealth", systemHealthConfig)
                .build();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ CacheManager –∫–∞–∫ fallback
     */
    private CacheManager createLocalCacheManager() {
        log.info("üîß LOCAL: –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ CacheManager...");

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Caffeine –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ ConcurrentMap
        try {
            CaffeineCacheManager caffeineCacheManager = new CaffeineCacheManager();
            caffeineCacheManager.setCacheNames(
                    java.util.Arrays.asList(
                            "admin_performance",
                            "admin_recent_activity",
                            "admin_dashboard_cache",
                            "systemHealth"));
            caffeineCacheManager.setCacheSpecification("maximumSize=100,expireAfterWrite=5m");
            log.info("‚úÖ LOCAL: –°–æ–∑–¥–∞–Ω Caffeine CacheManager");
            return caffeineCacheManager;
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è LOCAL: Caffeine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º ConcurrentMap: {}", e.getMessage());
            ConcurrentMapCacheManager concurrentMapCacheManager = new ConcurrentMapCacheManager(
                    "admin_performance",
                    "admin_recent_activity",
                    "admin_dashboard_cache",
                    "systemHealth");
            log.info("‚úÖ LOCAL: –°–æ–∑–¥–∞–Ω ConcurrentMap CacheManager");
            return concurrentMapCacheManager;
        }
    }

    /**
     * RedisTemplate –¥–ª—è –ø—Ä—è–º–æ–π —Ä–∞–±–æ—Ç—ã —Å Redis
     * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—à ObjectMapper —Å JSR310 –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
     */
    @Bean
    public RedisTemplate<String, Object> redisTemplate(RedisConnectionFactory redisConnectionFactory) {
        if (redisConnectionFactory == null) {
            log.warn("‚ö†Ô∏è REDIS: RedisTemplate –Ω–µ —Å–æ–∑–¥–∞–Ω - RedisConnectionFactory –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            return null;
        }

        try {
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à ObjectMapper —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π LocalDateTime
            GenericJackson2JsonRedisSerializer jsonSerializer = new GenericJackson2JsonRedisSerializer(objectMapper);

            RedisTemplate<String, Object> template = new RedisTemplate<>();
            template.setConnectionFactory(redisConnectionFactory);
            template.setKeySerializer(new StringRedisSerializer());
            template.setValueSerializer(jsonSerializer);
            template.setHashKeySerializer(new StringRedisSerializer());
            template.setHashValueSerializer(jsonSerializer);
            template.afterPropertiesSet();

            log.info("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: RedisTemplate —Å–æ–∑–¥–∞–Ω —Å ObjectMapper –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π JSR310");
            return template;
        } catch (Exception e) {
            log.error("‚ùå REDIS: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RedisTemplate: {}", e.getMessage());
            return null;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Redis —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    private boolean isRedisAvailable(RedisConnectionFactory factory) {
        if (factory == null) {
            log.warn("üîç REDIS –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: ConnectionFactory –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
            return false;
        }

        log.info("üîç REDIS –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: ConnectionFactory –Ω–∞–π–¥–µ–Ω: {}",
                factory.getClass().getSimpleName());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ LettuceConnectionFactory
        if (factory instanceof LettuceConnectionFactory) {
            LettuceConnectionFactory lettuceFactory = (LettuceConnectionFactory) factory;

            log.info("üîç REDIS –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: LettuceConnectionFactory –æ–±–Ω–∞—Ä—É–∂–µ–Ω");
            log.info("üîç REDIS –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Host: {}:{}", lettuceFactory.getHostName(), lettuceFactory.getPort());

            // –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ–∞–±—Ä–∏–∫–∏
            try {
                boolean isStarted = lettuceFactory.getConnection() != null;
                log.info("üîç REDIS –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Connection –¥–æ—Å—Ç—É–ø–µ–Ω: {}", isStarted);
            } catch (Exception e) {
                log.error("‚ùå REDIS –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: LettuceConnectionFactory has been STOPPED! –û—à–∏–±–∫–∞: {}", e.getMessage());
                log.error("‚ùå REDIS –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–≤–∞—Ç—å start() –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...");

                try {
                    lettuceFactory.start();
                    log.info("‚úÖ REDIS –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: start() –≤—ã–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ");
                } catch (Exception startEx) {
                    log.error("‚ùå REDIS –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∑–≤–∞—Ç—å start(): {}", startEx.getMessage());
                    return false;
                }
            }
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            var connection = factory.getConnection();
            connection.ping();
            connection.close();
            log.info("‚úÖ REDIS –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Ping —É—Å–ø–µ—à–µ–Ω - Redis –¥–æ—Å—Ç—É–ø–µ–Ω");
            return true;
        } catch (Exception e) {
            log.error("‚ùå REDIS –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Ping –Ω–µ—É–¥–∞—á–µ–Ω: {}", e.getMessage());
            log.error("‚ùå REDIS –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
            log.error("   1. Redis —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            log.error("   2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ credentials");
            log.error("   3. LettuceConnectionFactory –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (STOPPED)");
            log.error("   4. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é/firewall");
            return false;
        }
    }

    /**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –Ø–≤–Ω–æ —É–∫–∞–∑–∞–Ω –æ—Å–Ω–æ–≤–Ω–æ–π CacheManager —Å @Qualifier
     */
    @Bean
    public CacheDiagnosticService cacheDiagnosticService(@Qualifier("cacheManager") CacheManager cacheManager) {
        return new CacheDiagnosticService(cacheManager, this.createdRedisConnectionFactory);
    }

    /**
     * –°–µ—Ä–≤–∏—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫—ç—à–∞
     */
    public static class CacheDiagnosticService {
        private final CacheManager cacheManager;
        private final RedisConnectionFactory redisConnectionFactory;

        public CacheDiagnosticService(CacheManager cacheManager, RedisConnectionFactory redisConnectionFactory) {
            this.cacheManager = cacheManager;
            this.redisConnectionFactory = redisConnectionFactory;
            performStartupDiagnostic();
        }

        private void performStartupDiagnostic() {
            log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–≠–®–ê: ===== –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò =====");

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ CacheManager
            log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: CacheManager —Ç–∏–ø: {}",
                    cacheManager != null ? cacheManager.getClass().getSimpleName() : "NULL");

            if (cacheManager != null) {
                log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—ç—à–∏: {}", cacheManager.getCacheNames());
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
            if (redisConnectionFactory != null) {
                try {
                    redisConnectionFactory.getConnection().ping();
                    log.info("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Redis –î–û–°–¢–£–ü–ï–ù");
                } catch (Exception e) {
                    log.error("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Redis –ù–ï –î–û–°–¢–£–ü–ï–ù: {}", e.getMessage());
                }
            } else {
                log.error("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Redis ConnectionFactory –ù–ï –ù–ê–°–¢–†–û–ï–ù");
            }

            log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–≠–®–ê: ===== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò =====");
        }

        public boolean isRedisAvailable() {
            if (redisConnectionFactory == null) {
                return false;
            }
            try {
                redisConnectionFactory.getConnection().ping();
                return true;
            } catch (Exception e) {
                return false;
            }
        }

        public String getCacheProviderType() {
            if (cacheManager == null) {
                return "NONE";
            }
            return cacheManager.getClass().getSimpleName();
        }
    }
}