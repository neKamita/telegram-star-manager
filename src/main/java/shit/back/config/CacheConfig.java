package shit.back.config;

import com.fasterxml.jackson.databind.ObjectMapper;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cache.CacheManager;
import org.springframework.cache.annotation.EnableCaching;
import org.springframework.cache.caffeine.CaffeineCacheManager;
import org.springframework.cache.concurrent.ConcurrentMapCacheManager;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.data.redis.cache.RedisCacheConfiguration;
import org.springframework.data.redis.cache.RedisCacheManager;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;
import org.springframework.data.redis.serializer.StringRedisSerializer;

import jakarta.annotation.PostConstruct;
import java.time.Duration;

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å fallback –ª–æ–≥–∏–∫–æ–π
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –º–µ–∂–¥—É Redis –∏ –ª–æ–∫–∞–ª—å–Ω—ã–º –∫—ç—à–µ–º
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã SOLID:
 * - Single Responsibility: —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
 * - Open/Closed: –ª–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º–∏
 * - Dependency Inversion: –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π
 */
@Slf4j
@Configuration
@EnableCaching
public class CacheConfig {

    @Value("${spring.cache.type:simple}")
    private String cacheType;

    @Autowired(required = false)
    private RedisConnectionFactory redisConnectionFactory;

    @Autowired
    private ObjectMapper objectMapper;

    @PostConstruct
    public void logCacheConfiguration() {
        log.info("üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–≠–®–ê: –¢–∏–ø –∫—ç—à–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {}", cacheType);
        log.info("üîß –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –ö–≠–®–ê: Redis ConnectionFactory –¥–æ—Å—Ç—É–ø–µ–Ω: {}",
                redisConnectionFactory != null);
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π CacheManager —Å fallback –ª–æ–≥–∏–∫–æ–π
     */
    @Bean
    @Primary
    public CacheManager cacheManager() {
        log.info("üîß –ù–ê–°–¢–†–û–ô–ö–ê –ö–≠–®–ê: –°–æ–∑–¥–∞–Ω–∏–µ CacheManager...");

        // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å Redis CacheManager
        if (isRedisAvailable()) {
            try {
                RedisCacheManager redisCacheManager = createRedisCacheManager();
                log.info("‚úÖ –ö–≠–®: –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω Redis CacheManager");
                return redisCacheManager;
            } catch (Exception e) {
                log.warn("‚ö†Ô∏è –ö–≠–®: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Redis CacheManager: {}", e.getMessage());
            }
        }

        // Fallback –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∫—ç—à—É
        log.warn("üîÑ –ö–≠–®: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à (fallback)");
        return createLocalCacheManager();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ Redis CacheManager —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ObjectMapper
     * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—à ObjectMapper —Å JSR310 –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
     */
    private RedisCacheManager createRedisCacheManager() {
        log.info("üîß REDIS: –°–æ–∑–¥–∞–Ω–∏–µ Redis CacheManager —Å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π...");

        // –°–æ–∑–¥–∞–µ–º —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è SystemHealth
        Jackson2JsonRedisSerializer<shit.back.dto.monitoring.SystemHealth> systemHealthSerializer = new Jackson2JsonRedisSerializer<>(
                shit.back.dto.monitoring.SystemHealth.class);
        systemHealthSerializer.setObjectMapper(objectMapper);

        // –û–±—â–∏–π JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫—ç—à–µ–π
        GenericJackson2JsonRedisSerializer jsonSerializer = new GenericJackson2JsonRedisSerializer(objectMapper);

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è systemHealth –∫—ç—à–∞ —Å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ç–æ—Ä–æ–º
        RedisCacheConfiguration systemHealthConfig = RedisCacheConfiguration.defaultCacheConfig()
                .entryTtl(Duration.ofMinutes(10))
                .serializeKeysWith(org.springframework.data.redis.serializer.RedisSerializationContext.SerializationPair
                        .fromSerializer(new StringRedisSerializer()))
                .serializeValuesWith(
                        org.springframework.data.redis.serializer.RedisSerializationContext.SerializationPair
                                .fromSerializer(systemHealthSerializer))
                .disableCachingNullValues();

        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫—ç—à–µ–π
        RedisCacheConfiguration defaultConfig = RedisCacheConfiguration.defaultCacheConfig()
                .entryTtl(Duration.ofMinutes(5))
                .serializeKeysWith(org.springframework.data.redis.serializer.RedisSerializationContext.SerializationPair
                        .fromSerializer(new StringRedisSerializer()))
                .serializeValuesWith(
                        org.springframework.data.redis.serializer.RedisSerializationContext.SerializationPair
                                .fromSerializer(jsonSerializer))
                .disableCachingNullValues();

        log.info("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Redis CacheManager —Å —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –¥–ª—è SystemHealth");
        return RedisCacheManager.builder(redisConnectionFactory)
                .cacheDefaults(defaultConfig)
                .withCacheConfiguration("systemHealth", systemHealthConfig)
                .build();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ CacheManager –∫–∞–∫ fallback
     */
    private CacheManager createLocalCacheManager() {
        log.info("üîß LOCAL: –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ CacheManager...");

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Caffeine –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ ConcurrentMap
        try {
            CaffeineCacheManager caffeineCacheManager = new CaffeineCacheManager();
            caffeineCacheManager.setCacheNames(
                    java.util.Arrays.asList(
                            "admin_performance",
                            "admin_recent_activity",
                            "admin_dashboard_cache",
                            "systemHealth"));
            caffeineCacheManager.setCacheSpecification("maximumSize=100,expireAfterWrite=5m");
            log.info("‚úÖ LOCAL: –°–æ–∑–¥–∞–Ω Caffeine CacheManager");
            return caffeineCacheManager;
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è LOCAL: Caffeine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º ConcurrentMap: {}", e.getMessage());
            ConcurrentMapCacheManager concurrentMapCacheManager = new ConcurrentMapCacheManager(
                    "admin_performance",
                    "admin_recent_activity",
                    "admin_dashboard_cache",
                    "systemHealth");
            log.info("‚úÖ LOCAL: –°–æ–∑–¥–∞–Ω ConcurrentMap CacheManager");
            return concurrentMapCacheManager;
        }
    }

    /**
     * RedisTemplate –¥–ª—è –ø—Ä—è–º–æ–π —Ä–∞–±–æ—Ç—ã —Å Redis
     * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—à ObjectMapper —Å JSR310 –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
     */
    @Bean
    public RedisTemplate<String, Object> redisTemplate() {
        if (!isRedisAvailable()) {
            log.warn("‚ö†Ô∏è REDIS: RedisTemplate –Ω–µ —Å–æ–∑–¥–∞–Ω - Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            return null;
        }

        try {
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à ObjectMapper —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π LocalDateTime
            GenericJackson2JsonRedisSerializer jsonSerializer = new GenericJackson2JsonRedisSerializer(objectMapper);

            RedisTemplate<String, Object> template = new RedisTemplate<>();
            template.setConnectionFactory(redisConnectionFactory);
            template.setKeySerializer(new StringRedisSerializer());
            template.setValueSerializer(jsonSerializer);
            template.setHashKeySerializer(new StringRedisSerializer());
            template.setHashValueSerializer(jsonSerializer);
            template.afterPropertiesSet();

            log.info("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: RedisTemplate —Å–æ–∑–¥–∞–Ω —Å ObjectMapper –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π JSR310");
            return template;
        } catch (Exception e) {
            log.error("‚ùå REDIS: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RedisTemplate: {}", e.getMessage());
            return null;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Redis
     */
    private boolean isRedisAvailable() {
        if (redisConnectionFactory == null) {
            log.debug("üîç REDIS: ConnectionFactory –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
            return false;
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            redisConnectionFactory.getConnection().ping();
            log.debug("‚úÖ REDIS: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ");
            return true;
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è REDIS: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ—É–¥–∞—á–Ω–∞: {}", e.getMessage());
            return false;
        }
    }

    /**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    @Bean
    public CacheDiagnosticService cacheDiagnosticService(CacheManager cacheManager) {
        return new CacheDiagnosticService(cacheManager, redisConnectionFactory);
    }

    /**
     * –°–µ—Ä–≤–∏—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –∫—ç—à–∞
     */
    public static class CacheDiagnosticService {
        private final CacheManager cacheManager;
        private final RedisConnectionFactory redisConnectionFactory;

        public CacheDiagnosticService(CacheManager cacheManager, RedisConnectionFactory redisConnectionFactory) {
            this.cacheManager = cacheManager;
            this.redisConnectionFactory = redisConnectionFactory;
            performStartupDiagnostic();
        }

        private void performStartupDiagnostic() {
            log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–≠–®–ê: ===== –ó–ê–ü–£–°–ö –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò =====");

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ CacheManager
            log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: CacheManager —Ç–∏–ø: {}",
                    cacheManager != null ? cacheManager.getClass().getSimpleName() : "NULL");

            if (cacheManager != null) {
                log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—ç—à–∏: {}", cacheManager.getCacheNames());
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
            if (redisConnectionFactory != null) {
                try {
                    redisConnectionFactory.getConnection().ping();
                    log.info("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Redis –î–û–°–¢–£–ü–ï–ù");
                } catch (Exception e) {
                    log.error("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Redis –ù–ï –î–û–°–¢–£–ü–ï–ù: {}", e.getMessage());
                }
            } else {
                log.error("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Redis ConnectionFactory –ù–ï –ù–ê–°–¢–†–û–ï–ù");
            }

            log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–≠–®–ê: ===== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò =====");
        }

        public boolean isRedisAvailable() {
            if (redisConnectionFactory == null) {
                return false;
            }
            try {
                redisConnectionFactory.getConnection().ping();
                return true;
            } catch (Exception e) {
                return false;
            }
        }

        public String getCacheProviderType() {
            if (cacheManager == null) {
                return "NONE";
            }
            return cacheManager.getClass().getSimpleName();
        }
    }
}