package shit.back.config;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.stereotype.Component;

/**
 * AOP –∞—Å–ø–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è cache –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –º–µ—Ç—Ä–∏–∫
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å @Cacheable, @CachePut, @CacheEvict –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è–º–∏
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã SOLID:
 * - Single Responsibility: —Ç–æ–ª—å–∫–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç cache –æ–ø–µ—Ä–∞—Ü–∏–π
 * - Open/Closed: –ª–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è –¥–ª—è –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
 * - Dependency Inversion: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π
 */
@Slf4j
@Aspect
@Component
@RequiredArgsConstructor
public class CacheEventListener {

    private final CacheMetricsInterceptor cacheMetricsInterceptor;
    private final CacheManager cacheManager;

    /**
     * –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥—ã —Å @Cacheable –∞–Ω–Ω–æ—Ç–∞—Ü–∏–µ–π
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å–æ Spring Cache
     */
    @Around("@annotation(org.springframework.cache.annotation.Cacheable)")
    public Object aroundCacheable(ProceedingJoinPoint joinPoint) throws Throwable {
        String cacheName = extractCacheNameFromCacheable(joinPoint);
        Object key = generateCacheKey(joinPoint);
        String methodName = joinPoint.getSignature().getName();

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –∫—ç—à–µ –ü–ï–†–ï–î –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –º–µ—Ç–æ–¥–∞
            Cache cache = cacheManager.getCache(cacheName);
            if (cache != null) {
                Cache.ValueWrapper valueWrapper = cache.get(key);
                if (valueWrapper != null) {
                    // Cache Hit
                    Object cachedResult = valueWrapper.get();
                    cacheMetricsInterceptor.onCacheLookup(cache, key, cachedResult);
                    log.info("‚úÖ CACHE HIT: –ú–µ—Ç–æ–¥ {} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫—ç—à {}", methodName, cacheName);
                    return cachedResult;
                }
            }

            // Cache Miss - –≤—ã–ø–æ–ª–Ω—è–µ–º –º–µ—Ç–æ–¥ –∏ –∫—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            log.info("‚ùå CACHE MISS: –í—ã–ø–æ–ª–Ω—è–µ–º –º–µ—Ç–æ–¥ {} –∏ –∫—ç—à–∏—Ä—É–µ–º –≤ {}", methodName, cacheName);
            Object result = joinPoint.proceed();

            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∫—ç—à –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if (cache != null && result != null) {
                cache.put(key, result);
                log.info("üíæ CACHE PUT: –†–µ–∑—É–ª—å—Ç–∞—Ç –º–µ—Ç–æ–¥–∞ {} —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à {}", methodName, cacheName);
            }

            // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º miss
            if (cache != null) {
                cacheMetricsInterceptor.onCacheLookup(cache, key, null); // Miss
            }

            return result;

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è CACHE ERROR: –û—à–∏–±–∫–∞ –≤ –∫—ç—à AOP –¥–ª—è –º–µ—Ç–æ–¥–∞ {}: {}", methodName, e.getMessage());
            return joinPoint.proceed();
        }
    }

    /**
     * –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥—ã —Å @CachePut –∞–Ω–Ω–æ—Ç–∞—Ü–∏–µ–π
     */
    @Around("@annotation(org.springframework.cache.annotation.CachePut)")
    public Object aroundCachePut(ProceedingJoinPoint joinPoint) throws Throwable {
        Object result = joinPoint.proceed();

        try {
            String cacheName = extractCacheNameFromCachePut(joinPoint);
            Object key = generateCacheKey(joinPoint);

            Cache cache = cacheManager.getCache(cacheName);
            if (cache != null) {
                cacheMetricsInterceptor.onCachePut(cache, key, result);
                log.trace("üíæ Cache PUT –¥–ª—è –º–µ—Ç–æ–¥–∞: {}", joinPoint.getSignature().getName());
            }

        } catch (Exception e) {
            log.debug("Error in cache PUT AOP: {}", e.getMessage());
        }

        return result;
    }

    /**
     * –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥—ã —Å @CacheEvict –∞–Ω–Ω–æ—Ç–∞—Ü–∏–µ–π
     */
    @Around("@annotation(org.springframework.cache.annotation.CacheEvict)")
    public Object aroundCacheEvict(ProceedingJoinPoint joinPoint) throws Throwable {
        try {
            String cacheName = extractCacheNameFromCacheEvict(joinPoint);
            Object key = generateCacheKey(joinPoint);

            Cache cache = cacheManager.getCache(cacheName);
            if (cache != null) {
                cacheMetricsInterceptor.onCacheEvict(cache, key);
                log.trace("üóëÔ∏è Cache EVICT –¥–ª—è –º–µ—Ç–æ–¥–∞: {}", joinPoint.getSignature().getName());
            }

        } catch (Exception e) {
            log.debug("Error in cache EVICT AOP: {}", e.getMessage());
        }

        return joinPoint.proceed();
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫—ç—à–∞ –∏–∑ @Cacheable –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
     */
    private String extractCacheNameFromCacheable(ProceedingJoinPoint joinPoint) {
        try {
            org.springframework.cache.annotation.Cacheable cacheable = joinPoint.getTarget().getClass().getMethod(
                    joinPoint.getSignature().getName(),
                    ((org.aspectj.lang.reflect.MethodSignature) joinPoint.getSignature()).getParameterTypes())
                    .getAnnotation(org.springframework.cache.annotation.Cacheable.class);

            if (cacheable != null && cacheable.value().length > 0) {
                return cacheable.value()[0];
            }
        } catch (Exception e) {
            log.debug("Could not extract cache name from @Cacheable: {}", e.getMessage());
        }
        return "unknown";
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫—ç—à–∞ –∏–∑ @CachePut –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
     */
    private String extractCacheNameFromCachePut(ProceedingJoinPoint joinPoint) {
        try {
            org.springframework.cache.annotation.CachePut cachePut = joinPoint.getTarget().getClass().getMethod(
                    joinPoint.getSignature().getName(),
                    ((org.aspectj.lang.reflect.MethodSignature) joinPoint.getSignature()).getParameterTypes())
                    .getAnnotation(org.springframework.cache.annotation.CachePut.class);

            if (cachePut != null && cachePut.value().length > 0) {
                return cachePut.value()[0];
            }
        } catch (Exception e) {
            log.debug("Could not extract cache name from @CachePut: {}", e.getMessage());
        }
        return "unknown";
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∫—ç—à–∞ –∏–∑ @CacheEvict –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏
     */
    private String extractCacheNameFromCacheEvict(ProceedingJoinPoint joinPoint) {
        try {
            org.springframework.cache.annotation.CacheEvict cacheEvict = joinPoint.getTarget().getClass().getMethod(
                    joinPoint.getSignature().getName(),
                    ((org.aspectj.lang.reflect.MethodSignature) joinPoint.getSignature()).getParameterTypes())
                    .getAnnotation(org.springframework.cache.annotation.CacheEvict.class);

            if (cacheEvict != null && cacheEvict.value().length > 0) {
                return cacheEvict.value()[0];
            }
        } catch (Exception e) {
            log.debug("Could not extract cache name from @CacheEvict: {}", e.getMessage());
        }
        return "unknown";
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è cache –∫–ª—é—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–µ—Ç–æ–¥–∞
     */
    private Object generateCacheKey(ProceedingJoinPoint joinPoint) {
        try {
            Object[] args = joinPoint.getArgs();
            if (args.length == 0) {
                return joinPoint.getSignature().getName();
            } else if (args.length == 1) {
                return args[0];
            } else {
                return java.util.Arrays.toString(args);
            }
        } catch (Exception e) {
            log.debug("Could not generate cache key: {}", e.getMessage());
            return "unknown-key";
        }
    }
}