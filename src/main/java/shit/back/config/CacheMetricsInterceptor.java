package shit.back.config;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.Cache;
import org.springframework.cache.interceptor.CacheInterceptor;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import shit.back.service.metrics.CacheMetricsService;

/**
 * –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è cache hit/miss –º–µ—Ç—Ä–∏–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å Spring Cache –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 *
 * –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞–º:
 * - Single Responsibility: —Ç–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ cache —Å–æ–±—ã—Ç–∏–π
 * - Open/Closed: —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞
 * - Dependency Inversion: –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏ CacheMetricsService
 *
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é @Lazy –∏–Ω—ä–µ–∫—Ü–∏–∏
 */
@Slf4j
@Component
public class CacheMetricsInterceptor {

    private final CacheMetricsService cacheMetricsService;

    public CacheMetricsInterceptor(@Lazy CacheMetricsService cacheMetricsService) {
        this.cacheMetricsService = cacheMetricsService;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ cache lookup —Å–æ–±—ã—Ç–∏–π
     * 
     * @param cache —Ü–µ–ª–µ–≤–æ–π –∫—ç—à
     * @param key   –∫–ª—é—á –ø–æ–∏—Å–∫–∞
     * @param value –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (null –µ—Å–ª–∏ miss)
     */
    public void onCacheLookup(Cache cache, Object key, Object value) {
        try {
            String cacheName = cache.getName();

            if (value != null) {
                // Cache Hit
                cacheMetricsService.recordCacheHit(cacheName);
                log.trace("‚úÖ Cache HIT –¥–ª—è '{}' —Å –∫–ª—é—á–æ–º: {}", cacheName, key);
            } else {
                // Cache Miss
                cacheMetricsService.recordCacheMiss(cacheName);
                log.trace("‚ùå Cache MISS –¥–ª—è '{}' —Å –∫–ª—é—á–æ–º: {}", cacheName, key);
            }

        } catch (Exception e) {
            log.debug("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ cache –º–µ—Ç—Ä–∏–∫–∏: {}", e.getMessage());
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ cache put —Å–æ–±—ã—Ç–∏–π
     * 
     * @param cache —Ü–µ–ª–µ–≤–æ–π –∫—ç—à
     * @param key   –∫–ª—é—á –∑–∞–ø–∏—Å–∏
     * @param value –∑–∞–ø–∏—Å—ã–≤–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
     */
    public void onCachePut(Cache cache, Object key, Object value) {
        try {
            String cacheName = cache.getName();
            log.trace("üíæ Cache PUT –¥–ª—è '{}' —Å –∫–ª—é—á–æ–º: {}", cacheName, key);

            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è PUT –æ–ø–µ—Ä–∞—Ü–∏–π
            // if needed for future extensions

        } catch (Exception e) {
            log.debug("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ cache put –º–µ—Ç—Ä–∏–∫–∏: {}", e.getMessage());
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ cache eviction —Å–æ–±—ã—Ç–∏–π
     * 
     * @param cache —Ü–µ–ª–µ–≤–æ–π –∫—ç—à
     * @param key   –∫–ª—é—á —É–¥–∞–ª–µ–Ω–∏—è
     */
    public void onCacheEvict(Cache cache, Object key) {
        try {
            String cacheName = cache.getName();
            log.trace("üóëÔ∏è Cache EVICT –¥–ª—è '{}' —Å –∫–ª—é—á–æ–º: {}", cacheName, key);

            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è EVICT –æ–ø–µ—Ä–∞—Ü–∏–π
            // if needed for future extensions

        } catch (Exception e) {
            log.debug("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ cache evict –º–µ—Ç—Ä–∏–∫–∏: {}", e.getMessage());
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ cache clear —Å–æ–±—ã—Ç–∏–π
     * 
     * @param cache —Ü–µ–ª–µ–≤–æ–π –∫—ç—à
     */
    public void onCacheClear(Cache cache) {
        try {
            String cacheName = cache.getName();
            log.trace("üßπ Cache CLEAR –¥–ª—è '{}'", cacheName);

            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è CLEAR –æ–ø–µ—Ä–∞—Ü–∏–π
            // if needed for future extensions

        } catch (Exception e) {
            log.debug("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ cache clear –º–µ—Ç—Ä–∏–∫–∏: {}", e.getMessage());
        }
    }
}