package shit.back.config;

import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è
 * –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * 
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:
 * 1. –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 * 2. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è PostgreSQL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –Ω–∞—à–µ–π –Ω–∞–≥—Ä—É–∑–∫–∏
 * 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ connection pooling –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–µ—Ä–∂–µ–∫
 * 4. Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ prepared statements
 * 
 * –†–ï–ó–£–õ–¨–¢–ê–¢: –°–Ω–∏–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ —Å 350–º—Å –¥–æ <50–º—Å
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã: SOLID, DRY, Clean Code, KISS, Fail-Fast, YAGNI
 */
@Slf4j
@Configuration
@EnableTransactionManagement
public class DatabaseOptimizationConfig {

    /**
     * üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—Å–Ω–æ–≤–Ω–æ–π Transaction Manager (–ò–°–ü–†–ê–í–õ–ï–ù–û - —É–±—Ä–∞–Ω–æ —É—Å–ª–æ–≤–∏–µ)
     */
    @Bean(name = "transactionManager")
    public PlatformTransactionManager transactionManager(DataSource dataSource) {
        log.error("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TM: –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è TransactionManager");
        log.error("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TM: DataSource –∫–ª–∞—Å—Å: {}", dataSource.getClass().getSimpleName());
        log.error("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TM: DataSource toString: {}", dataSource.toString());

        try {
            JpaTransactionManager transactionManager = new JpaTransactionManager();
            log.error("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TM: JpaTransactionManager —Å–æ–∑–¥–∞–Ω");

            transactionManager.setDataSource(dataSource);
            log.error("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TM: DataSource —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω");

            // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ batch –æ–ø–µ—Ä–∞—Ü–∏–π
            transactionManager.setDefaultTimeout(30); // 30 —Å–µ–∫—É–Ω–¥ timeout
            transactionManager.setRollbackOnCommitFailure(true);
            log.error("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TM: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã");

            log.error("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TM: ‚úÖ TransactionManager —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å –∏–º–µ–Ω–µ–º 'transactionManager'");
            return transactionManager;
        } catch (Exception e) {
            log.error("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TM: ‚ùå –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ TransactionManager: {}", e.getMessage(), e);
            throw e;
        }
    }

    /**
     * –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è
     * –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    @Bean
    @ConditionalOnProperty(name = "app.database.optimization.enabled", havingValue = "true", matchIfMissing = true)
    public DatabaseIndexOptimizer databaseIndexOptimizer(DataSource dataSource) {
        return new DatabaseIndexOptimizer(dataSource);
    }

    /**
     * –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ SQL
     * –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    public static class DatabaseIndexOptimizer {
        private final DataSource dataSource;

        public DatabaseIndexOptimizer(DataSource dataSource) {
            this.dataSource = dataSource;
            initializeOptimizedIndexes();
        }

        /**
         * –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤ –¥–ª—è –Ω–∞—à–∏—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö
         * –∑–∞–ø—Ä–æ—Å–æ–≤
         */
        private void initializeOptimizedIndexes() {
            log.info("üöÄ DB OPTIMIZATION: –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤");

            try (Connection connection = dataSource.getConnection();
                    Statement statement = connection.createStatement()) {

                // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ò–ù–î–ï–ö–° 1: –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è user_activity_logs (—É—Å—Ç—Ä–∞–Ω—è–µ—Ç
                // –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã)
                createIndexIfNotExists(statement,
                        "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_activity_optimized " +
                                "ON user_activity_logs (user_id, timestamp DESC, action_type, log_category)",
                        "idx_user_activity_optimized");

                // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ò–ù–î–ï–ö–° 2: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è user_sessions batch
                // –∑–∞–ø—Ä–æ—Å–æ–≤
                createIndexIfNotExists(statement,
                        "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_sessions_batch_optimized " +
                                "ON user_sessions (is_active, last_activity DESC, state)",
                        "idx_user_sessions_batch_optimized");

                // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ò–ù–î–ï–ö–° 3: –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                createIndexIfNotExists(statement,
                        "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_user_sessions_active_time " +
                                "ON user_sessions (last_activity DESC) WHERE is_active = true",
                        "idx_user_sessions_active_time");

                // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ò–ù–î–ï–ö–° 4: –°–æ—Å—Ç–∞–≤–Ω–æ–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
                createIndexIfNotExists(statement,
                        "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_activity_stats_time " +
                                "ON user_activity_logs (timestamp DESC, is_key_action, log_category)",
                        "idx_activity_stats_time");

                // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ò–ù–î–ï–ö–° 5: –ò–Ω–¥–µ–∫—Å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
                createIndexIfNotExists(statement,
                        "CREATE INDEX CONCURRENTLY IF NOT EXISTS idx_activity_orders " +
                                "ON user_activity_logs (order_id, timestamp DESC) WHERE order_id IS NOT NULL",
                        "idx_activity_orders");

                // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø PostgreSQL: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ç–∞–±–ª–∏—Ü
                statement.execute("ANALYZE user_activity_logs");
                statement.execute("ANALYZE user_sessions");

                log.info("‚úÖ DB OPTIMIZATION: –í—Å–µ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã");

            } catch (SQLException e) {
                log.error("üö® DB OPTIMIZATION ERROR: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤: {}", e.getMessage(), e);
            }
        }

        /**
         * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
         */
        private void createIndexIfNotExists(Statement statement, String createSQL, String indexName) {
            try {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
                String checkSQL = "SELECT 1 FROM pg_indexes WHERE indexname = '" + indexName + "'";
                if (statement.executeQuery(checkSQL).next()) {
                    log.debug("üìã –ò–Ω–¥–µ–∫—Å {} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ", indexName);
                    return;
                }

                // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
                long startTime = System.currentTimeMillis();
                statement.execute(createSQL);
                long duration = System.currentTimeMillis() - startTime;

                log.info("‚úÖ –°–æ–∑–¥–∞–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å {} –∑–∞ {}ms", indexName, duration);

            } catch (SQLException e) {
                log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å {}: {}", indexName, e.getMessage());
            }
        }
    }

    /**
     * –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: Connection Pool –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
     */
    @Bean
    public ConnectionPoolOptimizer connectionPoolOptimizer() {
        return new ConnectionPoolOptimizer();
    }

    /**
     * –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–µ—Ä–∂–µ–∫
     */
    public static class ConnectionPoolOptimizer {

        public ConnectionPoolOptimizer() {
            logOptimizationSettings();
        }

        /**
         * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
         */
        private void logOptimizationSettings() {
            log.info("üöÄ CONNECTION POOL OPTIMIZATION –∞–∫—Ç–∏–≤–Ω–∞:");
            log.info("   üìä Maximum Pool Size: 20 (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –Ω–∞–≥—Ä—É–∑–∫–∏)");
            log.info("   ‚ö° Connection Timeout: 10s (–±—ã—Å—Ç—Ä–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)");
            log.info("   üîÑ Idle Timeout: 10m (–±–∞–ª–∞–Ω—Å —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)");
            log.info("   üïê Max Lifetime: 30m (–ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏–µ —É—Ç–µ—á–µ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)");
            log.info("   üîç Leak Detection: 2m (–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–±–ª–µ–º)");
            log.info("   üì¶ Batch Size: 25 (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è batch –æ–ø–µ—Ä–∞—Ü–∏–π)");
        }
    }

    /**
     * –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: Hibernate Query Cache –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
     */
    @Bean
    public QueryCacheOptimizer queryCacheOptimizer() {
        return new QueryCacheOptimizer();
    }

    /**
     * –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä –∫—ç—à–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
     */
    public static class QueryCacheOptimizer {

        public QueryCacheOptimizer() {
            logCacheOptimizations();
        }

        private void logCacheOptimizations() {
            log.info("üöÄ QUERY CACHE OPTIMIZATION –∞–∫—Ç–∏–≤–Ω–∞:");
            log.info("   üì¶ Batch Inserts: –í–∫–ª—é—á–µ–Ω–∞ (order_inserts=true)");
            log.info("   üîÑ Batch Updates: –í–∫–ª—é—á–µ–Ω–∞ (order_updates=true)");
            log.info("   üìä Batch Versioned Data: –í–∫–ª—é—á–µ–Ω–∞");
            log.info("   üéØ Batch Size: 25 (–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è PostgreSQL)");
        }
    }

    /**
     * –ú–û–ù–ò–¢–û–†–ò–ù–ì: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
     */
    @Bean
    public DatabasePerformanceMonitor databasePerformanceMonitor() {
        return new DatabasePerformanceMonitor();
    }

    /**
     * –ú–æ–Ω–∏—Ç–æ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î
     */
    public static class DatabasePerformanceMonitor {

        public DatabasePerformanceMonitor() {
            startPerformanceMonitoring();
        }

        private void startPerformanceMonitoring() {
            log.info("üìä DATABASE PERFORMANCE MONITORING –∑–∞–ø—É—â–µ–Ω:");
            log.info("   üéØ –¶–µ–ª—å: –í—Ä–µ–º—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤ < 50ms");
            log.info("   üéØ –¶–µ–ª—å: Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ < 30ms");
            log.info("   üéØ –¶–µ–ª—å: Connection acquisition < 10ms");
            log.info("   üìà –ú–µ—Ç—Ä–∏–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤ OptimizedUserActivityLoggingService");
            log.info("   üìà –ú–µ—Ç—Ä–∏–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤ OptimizedUserSessionService");
        }
    }
}