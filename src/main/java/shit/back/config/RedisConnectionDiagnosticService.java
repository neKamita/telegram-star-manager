package shit.back.config;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

/**
 * –ù–û–í–´–ô –°–ï–†–í–ò–°: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –ø—Ä–æ–±–ª–µ–º
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è LettuceConnectionFactory –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
 * - –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ —Å–±–æ—è—Ö
 * - –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏—á–∏–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Redis
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã SOLID:
 * - Single Responsibility: —Ç–æ–ª—å–∫–æ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Redis
 * - Open/Closed: –ª–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
 * - Dependency Inversion: —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è–º–∏
 */
@Slf4j
@Component
public class RedisConnectionDiagnosticService {

    private final RedisConnectionFactory redisConnectionFactory;

    @Value("${spring.data.redis.host:localhost}")
    private String redisHost;

    @Value("${spring.data.redis.port:6379}")
    private int redisPort;

    @Value("${spring.data.redis.database:0}")
    private int redisDatabase;

    private volatile boolean redisHealthy = false;
    private volatile int consecutiveFailures = 0;
    private static final int MAX_CONSECUTIVE_FAILURES = 5;

    public RedisConnectionDiagnosticService(RedisConnectionFactory redisConnectionFactory) {
        this.redisConnectionFactory = redisConnectionFactory;
    }

    /**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    @EventListener(ApplicationReadyEvent.class)
    public void performStartupRedisDiagnostic() {
        log.info("üöÄ REDIS STARTUP DIAGNOSTIC: ===== –ù–ê–ß–ê–õ–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò =====");

        if (redisConnectionFactory == null) {
            log.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: RedisConnectionFactory —Ä–∞–≤–µ–Ω NULL!");
            log.error("‚ùå –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
            log.error("   1. –û—à–∏–±–∫–∞ –≤ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–∏–Ω–∞ RedisConnectionFactory");
            log.error("   2. –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Redis");
            log.error("   3. –ö–æ–Ω—Ñ–ª–∏–∫—Ç –º–µ–∂–¥—É –∞–≤—Ç–æ–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏ —è–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø ConnectionFactory
        diagnoseFacotryType();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ LettuceConnectionFactory
        diagnoseLettuceConnectionState();

        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        testRedisConnection();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        diagnoseRedisSettings();

        log.info("üöÄ REDIS STARTUP DIAGNOSTIC: ===== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê =====");
        log.info("üöÄ –°–¢–ê–¢–£–°: Redis {} (–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏: {})",
                redisHealthy ? "–†–ê–ë–û–¢–ê–ï–¢" : "–ù–ï –î–û–°–¢–£–ü–ï–ù", consecutiveFailures);
    }

    /**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∏–ø–∞ ConnectionFactory
     */
    private void diagnoseFacotryType() {
        log.info("üîç –¢–ò–ü FACTORY: {}", redisConnectionFactory.getClass().getSimpleName());

        if (redisConnectionFactory instanceof LettuceConnectionFactory) {
            LettuceConnectionFactory lettuce = (LettuceConnectionFactory) redisConnectionFactory;
            log.info("‚úÖ LettuceConnectionFactory –æ–±–Ω–∞—Ä—É–∂–µ–Ω");
            log.info("üîç Host: {}", lettuce.getHostName());
            log.info("üîç Port: {}", lettuce.getPort());
            log.info("üîç Database: {}", lettuce.getDatabase());

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            checkLettuceConnectionStatus(lettuce);
        } else {
            log.warn("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø ConnectionFactory: {}",
                    redisConnectionFactory.getClass().getName());
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ LettuceConnectionFactory
     */
    private void checkLettuceConnectionStatus(LettuceConnectionFactory lettuce) {
        try {
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
            var connection = lettuce.getConnection();

            if (connection == null) {
                log.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: getConnection() –≤–µ—Ä–Ω—É–ª NULL!");
                log.error("‚ùå –≠—Ç–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —Ç–æ, —á—Ç–æ LettuceConnectionFactory –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ STOPPED");

                // –ü–æ–ø—ã—Ç–∫–∞ –≤—ã–∑–≤–∞—Ç—å start()
                try {
                    log.info("üîÑ –ü–û–ü–´–¢–ö–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø: –í—ã–∑—ã–≤–∞–µ–º start()...");
                    lettuce.start();
                    log.info("‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï: start() –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");

                    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                    var newConnection = lettuce.getConnection();
                    if (newConnection != null) {
                        log.info("‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï: –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
                        newConnection.close();
                    } else {
                        log.error("‚ùå –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï: start() –Ω–µ –ø–æ–º–æ–≥, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ NULL");
                    }
                } catch (Exception startEx) {
                    log.error("‚ùå –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï: –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ start(): {}", startEx.getMessage());
                }
            } else {
                log.info("‚úÖ –°–û–ï–î–ò–ù–ï–ù–ò–ï: getConnection() —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–Ω—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ");
                connection.close();
            }

        } catch (Exception e) {
            log.error("‚ùå –û–®–ò–ë–ö–ê –ü–†–û–í–ï–†–ö–ò: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {}", e.getMessage());
            log.error("‚ùå –¢–∏–ø –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {}", e.getClass().getSimpleName());

            if (e.getMessage() != null && e.getMessage().contains("STOPPED")) {
                log.error("‚ùå –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï: LettuceConnectionFactory –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ STOPPED!");
            }
        }
    }

    /**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è LettuceConnectionFactory
     */
    private void diagnoseLettuceConnectionState() {
        if (!(redisConnectionFactory instanceof LettuceConnectionFactory)) {
            return;
        }

        LettuceConnectionFactory lettuce = (LettuceConnectionFactory) redisConnectionFactory;

        log.info("üîç –ê–ù–ê–õ–ò–ó –°–û–°–¢–û–Ø–ù–ò–Ø LettuceConnectionFactory:");

        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            log.info("üîç Host: {}", lettuce.getHostName());
            log.info("üîç Port: {}", lettuce.getPort());
            log.info("üîç Database: {}", lettuce.getDatabase());
            log.info("üîç Timeout: {}", lettuce.getTimeout());

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–∞—Ä–æ–ª—å
            boolean hasPassword = lettuce.getPassword() != null && !lettuce.getPassword().isEmpty();
            log.info("üîç Password configured: {}", hasPassword);

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ LettuceConnectionFactory: {}", e.getMessage());
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    private void testRedisConnection() {
        log.info("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö REDIS:");

        try {
            var connection = redisConnectionFactory.getConnection();

            if (connection == null) {
                log.error("‚ùå –¢–ï–°–¢: getConnection() –≤–µ—Ä–Ω—É–ª NULL - Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                redisHealthy = false;
                consecutiveFailures++;
                return;
            }

            // –¢–µ—Å—Ç ping
            try {
                connection.ping();
                log.info("‚úÖ –¢–ï–°–¢: PING —É—Å–ø–µ—à–µ–Ω");
                redisHealthy = true;
                consecutiveFailures = 0;
            } catch (Exception pingEx) {
                log.error("‚ùå –¢–ï–°–¢: PING –Ω–µ—É–¥–∞—á–µ–Ω: {}", pingEx.getMessage());
                redisHealthy = false;
                consecutiveFailures++;
            }

            // –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
            try {
                String testKey = "diagnostic_test_" + System.currentTimeMillis();
                String testValue = "test_value";

                connection.set(testKey.getBytes(), testValue.getBytes());
                byte[] result = connection.get(testKey.getBytes());

                if (result != null && testValue.equals(new String(result))) {
                    log.info("‚úÖ –¢–ï–°–¢: SET/GET –æ–ø–µ—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω—ã");
                    connection.del(testKey.getBytes()); // –û—á–∏—â–∞–µ–º
                } else {
                    log.warn("‚ö†Ô∏è –¢–ï–°–¢: SET/GET –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–µ—Ä–Ω—É–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç");
                }

            } catch (Exception setGetEx) {
                log.warn("‚ö†Ô∏è –¢–ï–°–¢: –û—à–∏–±–∫–∞ SET/GET –æ–ø–µ—Ä–∞—Ü–∏–π: {}", setGetEx.getMessage());
            }

            connection.close();

        } catch (Exception e) {
            log.error("‚ùå –¢–ï–°–¢: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {}", e.getMessage());
            log.error("‚ùå –¢–ï–°–¢: Stack trace: ", e);
            redisHealthy = false;
            consecutiveFailures++;
        }
    }

    /**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Redis
     */
    private void diagnoseRedisSettings() {
        log.info("üîç –ê–ù–ê–õ–ò–ó –ù–ê–°–¢–†–û–ï–ö REDIS:");
        log.info("üîç Configured Host: {}", redisHost);
        log.info("üîç Configured Port: {}", redisPort);
        log.info("üîç Configured Database: {}", redisDatabase);

        // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å LettuceConnectionFactory –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        if (redisConnectionFactory instanceof LettuceConnectionFactory) {
            LettuceConnectionFactory lettuce = (LettuceConnectionFactory) redisConnectionFactory;

            boolean hostMatches = redisHost.equals(lettuce.getHostName());
            boolean portMatches = redisPort == lettuce.getPort();
            boolean dbMatches = redisDatabase == lettuce.getDatabase();

            log.info("üîç –°–û–ü–û–°–¢–ê–í–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö:");
            log.info("üîç Host matches: {} (config: {}, factory: {})", hostMatches, redisHost, lettuce.getHostName());
            log.info("üîç Port matches: {} (config: {}, factory: {})", portMatches, redisPort, lettuce.getPort());
            log.info("üîç DB matches: {} (config: {}, factory: {})", dbMatches, redisDatabase, lettuce.getDatabase());

            if (!hostMatches || !portMatches || !dbMatches) {
                log.warn("‚ö†Ô∏è –û–ë–ù–ê–†–£–ñ–ï–ù–û –ù–ï–°–û–û–¢–í–ï–¢–°–¢–í–ò–ï –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Redis!");
            }
        }
    }

    /**
     * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Redis (–∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã)
     */
    @Scheduled(fixedRate = 120000)
    public void periodicRedisHealthCheck() {
        log.debug("üè• PERIODIC REDIS CHECK: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Redis...");

        if (redisConnectionFactory == null) {
            log.warn("‚ö†Ô∏è PERIODIC CHECK: RedisConnectionFactory –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            return;
        }

        try {
            var connection = redisConnectionFactory.getConnection();
            if (connection != null) {
                connection.ping();
                connection.close();

                if (!redisHealthy) {
                    log.info("‚úÖ RECOVERY: Redis –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–±–æ—è");
                    redisHealthy = true;
                    consecutiveFailures = 0;
                }

                log.debug("‚úÖ PERIODIC CHECK: Redis —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            } else {
                log.warn("‚ö†Ô∏è PERIODIC CHECK: getConnection() –≤–µ—Ä–Ω—É–ª NULL");
                handleRedisFailure("getConnection returned NULL");
            }

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è PERIODIC CHECK: Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {}", e.getMessage());
            handleRedisFailure(e.getMessage());
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–±–æ—è Redis
     */
    private void handleRedisFailure(String reason) {
        redisHealthy = false;
        consecutiveFailures++;

        log.warn("‚ö†Ô∏è REDIS FAILURE: {} (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –æ—à–∏–±–∫–∏: {})", reason, consecutiveFailures);

        if (consecutiveFailures >= MAX_CONSECUTIVE_FAILURES) {
            log.error("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –°–ë–û–ô REDIS: {} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫!", consecutiveFailures);
            log.error("üö® –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:");
            log.error("   1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redis —Å–µ—Ä–≤–µ—Ä–∞");
            log.error("   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è");
            log.error("   3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ Redis —Å–µ—Ä–≤–µ—Ä");
        }
    }

    /**
     * –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    public boolean isRedisHealthy() {
        return redisHealthy;
    }

    public int getConsecutiveFailures() {
        return consecutiveFailures;
    }

    public void forceRedisHealthCheck() {
        log.info("üîß FORCE HEALTH CHECK: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ Redis");
        testRedisConnection();
    }
}