package shit.back.config;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import shit.back.security.ApiKeyAuthFilter;

import java.util.Arrays;
import java.util.List;

@Slf4j
@Configuration
@EnableWebSecurity
@EnableConfigurationProperties(SecurityProperties.class)
public class SecurityConfig {

    @Autowired
    private SecurityProperties securityProperties;

    @Value("${test.payment.enabled:false}")
    private boolean testPaymentEnabled;

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http, ApiKeyAuthFilter apiKeyAuthFilter) throws Exception {
        log.info("Configuring security filter chain. API Security enabled: {}",
                securityProperties.getApi().isEnabled());

        http
                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CSRF –∑–∞—â–∏—Ç—É
                .csrf(csrf -> {
                    var matchers = csrf
                            .csrfTokenRepository(
                                    org.springframework.security.web.csrf.CookieCsrfTokenRepository.withHttpOnlyFalse())
                            .ignoringRequestMatchers(
                                    // Telegram Bot API - –Ω–µ –Ω—É–∂–µ–Ω CSRF
                                    "/api/bot/**",
                                    "/webhook/telegram", // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø—É—Ç—å –¥–ª—è webhook
                                    "/webhook/**", // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ webhook –ø—É—Ç–∏

                                    // Health checks –∏ monitoring - –ø—É–±–ª–∏—á–Ω—ã–µ endpoints
                                    "/actuator/health",
                                    "/actuator/info");

                    // –¢–µ—Å—Ç–æ–≤—ã–µ endpoints –∏—Å–∫–ª—é—á–∞–µ–º –∏–∑ CSRF –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
                    if (testPaymentEnabled) {
                        log.info("üß™ TEST MODE: –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ payment endpoints –∏–∑ CSRF –∑–∞—â–∏—Ç—ã");
                        matchers.ignoringRequestMatchers("/api/payment/callback/test/**");
                    }
                })

                // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º CORS
                .cors(cors -> {
                    if (securityProperties.getCors().isEnabled()) {
                        cors.configurationSource(corsConfigurationSource());
                    } else {
                        cors.disable();
                    }
                })

                // Stateless —Å–µ—Å—Å–∏–∏
                .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))

                // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                .authorizeHttpRequests(authz -> {
                    authz
                            // –ü—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
                            .requestMatchers("/api/bot/health").permitAll()
                            .requestMatchers("/actuator/health").permitAll()
                            .requestMatchers("/actuator/info").permitAll()

                            // Telegram webhook - –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û –¥–ª—è –±–æ—Ç–∞!
                            .requestMatchers("/webhook/telegram").permitAll()
                            .requestMatchers("/webhook/**").permitAll();

                    // –¢–µ—Å—Ç–æ–≤—ã–µ endpoints —Ç–æ–ª—å–∫–æ –≤ dev —Ä–µ–∂–∏–º–µ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º)
                    if (testPaymentEnabled) {
                        log.info("üß™ TEST MODE: –†–∞–∑—Ä–µ—à–µ–Ω –¥–æ—Å—Ç—É–ø –∫ —Ç–µ—Å—Ç–æ–≤—ã–º payment endpoints –±–µ–∑ API –∫–ª—é—á–∞");
                        authz.requestMatchers("/api/payment/callback/test/**").permitAll();
                    }

                    authz
                            // API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                            .requestMatchers("/api/**").authenticated()

                            // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã
                            .anyRequest().permitAll();
                });

        // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä API –∫–ª—é—á–µ–π –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
        if (securityProperties.getApi().isEnabled()) {
            http.addFilterBefore(apiKeyAuthFilter, UsernamePasswordAuthenticationFilter.class);
            log.info("API Key authentication filter enabled");
        }

        return http.build();
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();

        // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ origins
        List<String> allowedOrigins = securityProperties.getCors().getAllowedOrigins();
        if (allowedOrigins != null && !allowedOrigins.isEmpty()) {
            configuration.setAllowedOrigins(allowedOrigins);
        } else {
            configuration.addAllowedOrigin("*");
        }

        // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        configuration.setAllowedMethods(securityProperties.getCors().getAllowedMethods());

        // –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        configuration.setAllowedHeaders(securityProperties.getCors().getAllowedHeaders());

        // –†–∞–∑—Ä–µ—à–∞–µ–º credentials
        configuration.setAllowCredentials(true);

        // –í—Ä–µ–º—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è preflight –∑–∞–ø—Ä–æ—Å–æ–≤
        configuration.setMaxAge(securityProperties.getCors().getMaxAge());

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/api/**", configuration);

        log.info("CORS configuration applied for origins: {}", allowedOrigins);

        return source;
    }
}
