package shit.back.controller;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import shit.back.entity.UserActivityLogEntity;
import shit.back.repository.UserActivityLogJpaRepository;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –≤
 * user_activity_logs
 */
@RestController
@RequestMapping("/diagnostic/activity-log")
@RequiredArgsConstructor
@Slf4j
public class DiagnosticActivityLogController {

    private final UserActivityLogJpaRepository activityLogRepository;
    private final DataSource dataSource;

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å—Ö–µ–º—É —Ç–∞–±–ª–∏—Ü—ã user_activity_logs –≤ PostgreSQL
     */
    @GetMapping("/schema")
    public ResponseEntity<Map<String, Object>> checkTableSchema() {
        Map<String, Object> result = new HashMap<>();
        List<Map<String, String>> columns = new ArrayList<>();

        try (Connection connection = dataSource.getConnection();
                Statement statement = connection.createStatement()) {

            log.info("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã user_activity_logs ===");

            String sql = """
                    SELECT column_name, data_type, character_maximum_length, is_nullable
                    FROM information_schema.columns
                    WHERE table_name = 'user_activity_logs'
                    ORDER BY ordinal_position
                    """;

            ResultSet rs = statement.executeQuery(sql);

            while (rs.next()) {
                Map<String, String> column = new HashMap<>();
                String columnName = rs.getString("column_name");
                String dataType = rs.getString("data_type");
                String maxLength = rs.getString("character_maximum_length");
                String nullable = rs.getString("is_nullable");

                column.put("name", columnName);
                column.put("type", dataType);
                column.put("maxLength", maxLength);
                column.put("nullable", nullable);
                columns.add(column);

                log.info("–ö–æ–ª–æ–Ω–∫–∞: {} | –¢–∏–ø: {} | –î–ª–∏–Ω–∞: {} | Nullable: {}",
                        columnName, dataType, maxLength, nullable);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–ª—è
                if ("username".equals(columnName) || "first_name".equals(columnName) ||
                        "last_name".equals(columnName) || "order_id".equals(columnName) ||
                        "action_details".equals(columnName)) {

                    if ("bytea".equals(dataType)) {
                        log.error("üö® –ù–ê–ô–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª–µ {} –∏–º–µ–µ—Ç —Ç–∏–ø bytea –≤–º–µ—Å—Ç–æ text/varchar!", columnName);
                    } else {
                        log.info("‚úÖ –ü–æ–ª–µ {} –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø: {}", columnName, dataType);
                    }
                }
            }

            result.put("columns", columns);
            result.put("status", "success");

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã: ", e);
            result.put("error", e.getMessage());
            result.put("status", "error");
        }

        return ResponseEntity.ok(result);
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ LOWER() —Ñ—É–Ω–∫—Ü–∏–∏
     */
    @GetMapping("/simple-query")
    public ResponseEntity<Map<String, Object>> testSimpleQuery() {
        Map<String, Object> result = new HashMap<>();

        try {
            log.info("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ ===");

            // –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ LOWER()
            List<UserActivityLogEntity> logs = activityLogRepository.findAll(PageRequest.of(0, 5)).getContent();

            log.info("‚úÖ –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ. –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {}", logs.size());

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–∞—Ö
            for (UserActivityLogEntity log : logs) {
                this.log.info("ID: {} | Username: {} | FirstName: {} | LastName: {} | OrderId: {}",
                        log.getId(), log.getUsername(), log.getFirstName(), log.getLastName(), log.getOrderId());
            }

            result.put("recordsFound", logs.size());
            result.put("status", "success");
            result.put("message", "–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");

        } catch (Exception e) {
            log.error("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ", e);
            result.put("error", e.getMessage());
            result.put("status", "error");
        }

        return ResponseEntity.ok(result);
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–Ω–µ–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å LOWER() —Ñ—É–Ω–∫—Ü–∏–µ–π
     * –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê: –£–±—Ä–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è LOWER() –∏–∑ HQL –∑–∞–ø—Ä–æ—Å–æ–≤ –≤
     * UserActivityLogJpaRepository
     */
    @GetMapping("/problematic-query")
    public ResponseEntity<Map<String, Object>> testProblematicQuery() {
        Map<String, Object> result = new HashMap<>();

        try {
            log.info("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–Ω–µ–µ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (–ò–°–ü–†–ê–í–õ–ï–ù–û) ===");

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –±–µ–∑ LOWER()
            var logs = activityLogRepository.findWithFilters(
                    false, // showAll
                    null, // fromTime
                    null, // toTime
                    null, // actionTypes
                    "test", // searchTerm - —Ç–µ–ø–µ—Ä—å –ë–ï–ó LOWER()
                    PageRequest.of(0, 5));

            log.info("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ! –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {}", logs.getTotalElements());
            result.put("status", "success");
            result.put("message", "‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–ø—Ä–æ—Å —Ä–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–∏ LOWER()!");
            result.put("recordsFound", logs.getTotalElements());
            result.put("fix", "–£–±—Ä–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è LOWER() –∏–∑ HQL –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–∫–∏ bytea");

        } catch (Exception e) {
            log.error("üö® –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –≤—Å–µ –µ—â–µ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É: ", e);
            result.put("error", e.getMessage());
            result.put("status", "error");
            result.put("message", "–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–º–æ–≥–ª–æ - —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞");

            // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            String errorMessage = e.getMessage();
            if (errorMessage != null && errorMessage.contains("bytea")) {
                result.put("diagnosis", "–ü—Ä–æ–±–ª–µ–º–∞ bytea –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –Ω—É–∂–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –ë–î");
            }
        }

        return ResponseEntity.ok(result);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Hibernate
     */
    @GetMapping("/hibernate-config")
    public ResponseEntity<Map<String, Object>> checkHibernateConfig() {
        Map<String, Object> result = new HashMap<>();

        log.info("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Hibernate ===");

        // –ü–æ–ª—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ Hibernate
        Map<String, String> hibernateProps = new HashMap<>();

        System.getProperties().entrySet().stream()
                .filter(entry -> entry.getKey().toString().contains("hibernate"))
                .forEach(entry -> {
                    String key = entry.getKey().toString();
                    String value = entry.getValue().toString();
                    hibernateProps.put(key, value);
                    log.info("Hibernate —Å–≤–æ–π—Å—Ç–≤–æ: {} = {}", key, value);
                });

        result.put("hibernateProperties", hibernateProps);
        result.put("status", "success");

        return ResponseEntity.ok(result);
    }

    /**
     * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ—á–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É
     */
    @GetMapping("/test-lower-function")
    public ResponseEntity<Map<String, Object>> testLowerFunction() {
        Map<String, Object> result = new HashMap<>();

        log.info("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ LOWER() —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–ª—è—Ö ===");

        try (Connection connection = dataSource.getConnection();
                Statement statement = connection.createStatement()) {

            // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–æ–ª–µ–π
            String[] testFields = { "username", "first_name", "last_name", "order_id", "action_details" };
            Map<String, String> fieldTypes = new HashMap<>();

            for (String field : testFields) {
                try {
                    String typeQuery = String.format(
                            "SELECT data_type FROM information_schema.columns WHERE table_name='user_activity_logs' AND column_name='%s'",
                            field);
                    ResultSet rs = statement.executeQuery(typeQuery);
                    if (rs.next()) {
                        String dataType = rs.getString("data_type");
                        fieldTypes.put(field, dataType);
                        log.info("üîç –ü–æ–ª–µ {} –∏–º–µ–µ—Ç —Ç–∏–ø: {}", field, dataType);

                        if ("bytea".equals(dataType)) {
                            log.error("üö® –ù–ê–ô–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª–µ {} –∏–º–µ–µ—Ç —Ç–∏–ø bytea!", field);
                        }
                    }
                } catch (Exception e) {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ –ø–æ–ª—è {}: {}", field, e.getMessage());
                    fieldTypes.put(field, "ERROR: " + e.getMessage());
                }
            }

            // –¢–µ—Å—Ç 2: –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å LOWER() –Ω–∞ –∫–∞–∂–¥–æ–º –ø–æ–ª–µ
            Map<String, String> lowerTests = new HashMap<>();

            for (String field : testFields) {
                try {
                    String lowerQuery = String.format(
                            "SELECT LOWER(%s) FROM user_activity_logs WHERE %s IS NOT NULL LIMIT 1",
                            field, field);
                    log.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å: {}", lowerQuery);

                    ResultSet rs = statement.executeQuery(lowerQuery);
                    if (rs.next()) {
                        lowerTests.put(field, "SUCCESS");
                        log.info("‚úÖ LOWER({}) —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", field);
                    } else {
                        lowerTests.put(field, "NO_DATA");
                        log.warn("‚ö†Ô∏è LOWER({}) - –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", field);
                    }
                } catch (Exception e) {
                    lowerTests.put(field, "ERROR: " + e.getMessage());
                    log.error("üö® LOWER({}) –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É: {}", field, e.getMessage());

                    if (e.getMessage().contains("bytea")) {
                        log.error("üéØ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª–µ {} –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç—Å—è –∫–∞–∫ bytea!", field);
                    }
                }
            }

            // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            try {
                String problematicQuery = """
                        SELECT COUNT(*) FROM user_activity_logs
                        WHERE (username IS NOT NULL AND LOWER(username) LIKE LOWER(CONCAT('%', 'test', '%')))
                        LIMIT 1
                        """;
                log.info("–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...");

                ResultSet rs = statement.executeQuery(problematicQuery);
                if (rs.next()) {
                    result.put("repositoryQueryTest", "SUCCESS");
                    log.info("‚úÖ –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç");
                }
            } catch (Exception e) {
                result.put("repositoryQueryTest", "ERROR: " + e.getMessage());
                log.error("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü—Ä–æ–±–ª–µ–º–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è: {}", e.getMessage());
            }

            result.put("fieldTypes", fieldTypes);
            result.put("lowerFunctionTests", lowerTests);
            result.put("status", "success");
            result.put("diagnosis", "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–∏–ø–æ–≤ –ø–æ–ª–µ–π –∏ LOWER() —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞");

        } catch (Exception e) {
            log.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: ", e);
            result.put("error", e.getMessage());
            result.put("status", "error");
        }

        return ResponseEntity.ok(result);
    }

    /**
     * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
     */
    @GetMapping("/diagnosis-report")
    public ResponseEntity<Map<String, Object>> generateDiagnosisReport() {
        Map<String, Object> result = new HashMap<>();
        List<String> problems = new ArrayList<>();
        List<String> recommendations = new ArrayList<>();

        log.info("=== –ì–ï–ù–ï–†–ê–¶–ò–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–û–ì–û –û–¢–ß–ï–¢–ê ===");

        try (Connection connection = dataSource.getConnection();
                Statement statement = connection.createStatement()) {

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –ø–æ–ª—è
            String[] criticalFields = { "username", "first_name", "last_name", "order_id" };

            for (String field : criticalFields) {
                String query = String.format(
                        "SELECT column_name, data_type, character_maximum_length " +
                                "FROM information_schema.columns " +
                                "WHERE table_name = 'user_activity_logs' AND column_name = '%s'",
                        field);

                ResultSet rs = statement.executeQuery(query);
                if (rs.next()) {
                    String dataType = rs.getString("data_type");
                    String maxLength = rs.getString("character_maximum_length");

                    if ("bytea".equals(dataType)) {
                        problems.add(String.format("–ü–æ–ª–µ '%s' –∏–º–µ–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø 'bytea' –≤–º–µ—Å—Ç–æ 'varchar'", field));
                        recommendations.add(String
                                .format("ALTER TABLE user_activity_logs ALTER COLUMN %s TYPE VARCHAR(255);", field));
                        log.error("üö® –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª–µ {} –∏–º–µ–µ—Ç —Ç–∏–ø bytea", field);
                    } else {
                        log.info("‚úÖ –ü–æ–ª–µ {} –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø: {} ({})", field, dataType, maxLength);
                    }
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º LOB –ø–æ–ª–µ
            String lobQuery = """
                    SELECT column_name, data_type
                    FROM information_schema.columns
                    WHERE table_name = 'user_activity_logs' AND column_name = 'action_details'
                    """;

            ResultSet lobRs = statement.executeQuery(lobQuery);
            if (lobRs.next()) {
                String lobType = lobRs.getString("data_type");
                log.info("üìù LOB –ø–æ–ª–µ action_details –∏–º–µ–µ—Ç —Ç–∏–ø: {}", lobType);

                if ("bytea".equals(lobType)) {
                    problems.add("LOB –ø–æ–ª–µ 'action_details' –∏—Å–ø–æ–ª—å–∑—É–µ—Ç bytea, —á—Ç–æ –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è");
                    recommendations.add(
                            "–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∏–ø–∞ action_details –Ω–∞ TEXT: ALTER TABLE user_activity_logs ALTER COLUMN action_details TYPE TEXT;");
                }
            }

            result.put("problems", problems);
            result.put("recommendations", recommendations);
            result.put("problemsCount", problems.size());
            result.put("status", problems.isEmpty() ? "healthy" : "issues_found");

            if (problems.isEmpty()) {
                result.put("message", "–ü—Ä–æ–±–ª–µ–º —Å —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ");
                log.info("‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ");
            } else {
                result.put("message", String.format("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ %d –ø—Ä–æ–±–ª–µ–º —Å —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö", problems.size()));
                log.error("üö® –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –Ω–∞–π–¥–µ–Ω–æ {} –ø—Ä–æ–±–ª–µ–º", problems.size());
            }

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞: ", e);
            result.put("error", e.getMessage());
            result.put("status", "error");
        }

        return ResponseEntity.ok(result);
    }
}