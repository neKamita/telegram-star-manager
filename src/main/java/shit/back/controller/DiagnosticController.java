package shit.back.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import shit.back.service.TelegramWebhookBotService;

import java.util.HashMap;
import java.util.Map;

/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ Telegram Bot –∏ —Å–∏—Å—Ç–µ–º—ã
 */
@RestController
@RequestMapping("/diagnostic")
public class DiagnosticController {

    private static final Logger logger = LoggerFactory.getLogger(DiagnosticController.class);

    @Autowired(required = false)
    private TelegramWebhookBotService telegramBotService;

    @Autowired
    private ApplicationContext applicationContext;

    @Value("${telegram.bot.token:}")
    private String botToken;

    @Value("${telegram.bot.username:}")
    private String botUsername;

    @Value("${telegram.bot.webhook-url:}")
    private String webhookUrl;

    @Value("${spring.profiles.active:}")
    private String activeProfile;

    /**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Telegram –±–æ—Ç–∞
     */
    @GetMapping("/telegram-config")
    public ResponseEntity<Map<String, Object>> getTelegramConfig() {
        logger.info("üîç –ó–∞–ø—Ä–æ—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
        
        Map<String, Object> config = new HashMap<>();
        config.put("timestamp", System.currentTimeMillis());
        config.put("activeProfile", activeProfile);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        Map<String, Object> tokenInfo = new HashMap<>();
        tokenInfo.put("isSet", botToken != null && !botToken.trim().isEmpty());
        tokenInfo.put("length", botToken != null ? botToken.length() : 0);
        tokenInfo.put("maskedValue", maskToken(botToken));
        config.put("botToken", tokenInfo);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –±–æ—Ç–∞
        Map<String, Object> usernameInfo = new HashMap<>();
        usernameInfo.put("isSet", botUsername != null && !botUsername.trim().isEmpty());
        usernameInfo.put("value", botUsername);
        config.put("botUsername", usernameInfo);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook URL
        Map<String, Object> webhookInfo = new HashMap<>();
        webhookInfo.put("isSet", webhookUrl != null && !webhookUrl.trim().isEmpty());
        webhookInfo.put("value", webhookUrl);
        config.put("webhookUrl", webhookInfo);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
        Map<String, Object> serviceInfo = new HashMap<>();
        serviceInfo.put("serviceExists", telegramBotService != null);
        if (telegramBotService != null) {
            serviceInfo.put("serviceClass", telegramBotService.getClass().getSimpleName());
            serviceInfo.put("isInitialized", true);
        }
        config.put("telegramService", serviceInfo);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–Ω–æ–≤ Spring
        Map<String, Object> beansInfo = new HashMap<>();
        beansInfo.put("telegramWebhookBotServiceExists", 
            applicationContext.containsBean("telegramWebhookBotService"));
        config.put("springBeans", beansInfo);
        
        return ResponseEntity.ok(config);
    }

    /**
     * –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
     */
    @GetMapping("/health")
    public ResponseEntity<Map<String, Object>> getHealth() {
        logger.info("üíö –ó–∞–ø—Ä–æ—Å –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã");
        
        Map<String, Object> health = new HashMap<>();
        health.put("timestamp", System.currentTimeMillis());
        health.put("status", "UP");
        health.put("activeProfile", activeProfile);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        Map<String, String> components = new HashMap<>();
        components.put("application", "UP");
        components.put("telegramService", telegramBotService != null ? "UP" : "DOWN");
        components.put("springContext", applicationContext != null ? "UP" : "DOWN");
        health.put("components", components);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        Map<String, Boolean> configStatus = new HashMap<>();
        configStatus.put("botTokenConfigured", botToken != null && !botToken.trim().isEmpty());
        configStatus.put("webhookUrlConfigured", webhookUrl != null && !webhookUrl.trim().isEmpty());
        configStatus.put("botUsernameConfigured", botUsername != null && !botUsername.trim().isEmpty());
        health.put("configuration", configStatus);
        
        return ResponseEntity.ok(health);
    }

    /**
     * –û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
     */
    @GetMapping("/env-debug")
    public ResponseEntity<Map<String, Object>> getEnvDebug() {
        logger.info("üîß –ó–∞–ø—Ä–æ—Å –æ—Ç–ª–∞–¥–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
        
        Map<String, Object> envDebug = new HashMap<>();
        envDebug.put("timestamp", System.currentTimeMillis());
        
        // –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–±–µ–∑–æ–ø–∞—Å–Ω–æ)
        Map<String, String> systemInfo = new HashMap<>();
        systemInfo.put("javaVersion", System.getProperty("java.version"));
        systemInfo.put("osName", System.getProperty("os.name"));
        systemInfo.put("springProfilesActive", System.getProperty("spring.profiles.active"));
        envDebug.put("system", systemInfo);
        
        // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        Map<String, Object> appConfig = new HashMap<>();
        appConfig.put("activeProfile", activeProfile);
        appConfig.put("botTokenPresent", botToken != null && !botToken.trim().isEmpty());
        appConfig.put("webhookUrlPresent", webhookUrl != null && !webhookUrl.trim().isEmpty());
        appConfig.put("botUsernamePresent", botUsername != null && !botUsername.trim().isEmpty());
        envDebug.put("applicationConfig", appConfig);
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ Spring –±–∏–Ω–æ–≤
        Map<String, Boolean> beans = new HashMap<>();
        beans.put("telegramWebhookBotService", applicationContext.containsBean("telegramWebhookBotService"));
        beans.put("telegramBotService", applicationContext.containsBean("telegramBotService"));
        envDebug.put("springBeans", beans);
        
        return ResponseEntity.ok(envDebug);
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram —Å–µ—Ä–≤–∏—Å–∞
     */
    @GetMapping("/force-telegram-init")
    public ResponseEntity<Map<String, Object>> forceTelegramInit() {
        logger.info("üîÑ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram —Å–µ—Ä–≤–∏—Å–∞");
        
        Map<String, Object> result = new HashMap<>();
        result.put("timestamp", System.currentTimeMillis());
        
        if (telegramBotService == null) {
            result.put("status", "ERROR");
            result.put("message", "TelegramWebhookBotService –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Spring");
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ TelegramWebhookBotService –¥–ª—è –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏");
            return ResponseEntity.badRequest().body(result);
        }
        
        try {
            // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
            logger.info("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TelegramWebhookBotService...");
            
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–µ—Ä–≤–∏—Å–µ
            result.put("status", "SUCCESS");
            result.put("message", "–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω");
            result.put("serviceClass", telegramBotService.getClass().getSimpleName());
            
            logger.info("‚úÖ –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramWebhookBotService –≤—ã–ø–æ–ª–Ω–µ–Ω–∞");
            
        } catch (Exception e) {
            result.put("status", "ERROR");
            result.put("message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: " + e.getMessage());
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TelegramWebhookBotService: {}", e.getMessage(), e);
            return ResponseEntity.internalServerError().body(result);
        }
        
        return ResponseEntity.ok(result);
    }

    /**
     * –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private String maskToken(String token) {
        if (token == null || token.trim().isEmpty()) {
            return "NOT_SET";
        }
        if (token.length() <= 8) {
            return "***";
        }
        return token.substring(0, 4) + "..." + token.substring(token.length() - 4);
    }
}
