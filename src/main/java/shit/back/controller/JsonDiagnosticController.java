package shit.back.controller;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;
import shit.back.service.JsonValidationService;
import shit.back.service.BackgroundMetricsService;

import java.time.LocalDateTime;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –ö–û–ù–¢–†–û–õ–õ–ï–†: –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å JSON parsing –≤ SSE
 * —Å–æ–±—ã—Ç–∏—è—Ö
 */
@Slf4j
@RestController
@RequestMapping("/admin/api/json-diagnostic")
public class JsonDiagnosticController {

    @Autowired
    private JsonValidationService jsonValidationService;

    @Autowired
    private BackgroundMetricsService backgroundMetricsService;

    /**
     * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–µ—Å—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ JSON –¥–ª—è performance-metrics
     */
    @GetMapping(value = "/test-performance-metrics-json", produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public Map<String, Object> testPerformanceMetricsJson() {
        try {
            log.info("üîç JSON –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è performance-metrics");

            // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫
            Map<String, Object> testMetrics = createTestPerformanceMetrics();

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é —á–µ—Ä–µ–∑ JsonValidationService
            String validatedJson = jsonValidationService.validateAndFixPerformanceMetricsJson(testMetrics);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            boolean isValid = jsonValidationService.isValidJson(validatedJson);

            return Map.of(
                    "status", isValid ? "JSON_VALID" : "JSON_INVALID",
                    "message", "Performance metrics JSON validation test completed",
                    "originalData", testMetrics,
                    "validatedJson", validatedJson,
                    "isValid", isValid,
                    "jsonLength", validatedJson.length(),
                    "timestamp", LocalDateTime.now(),
                    "success", true);

        } catch (Exception e) {
            log.error("‚ùå JSON –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {}", e.getMessage(), e);
            return Map.of(
                    "status", "JSON_TEST_ERROR",
                    "error", e.getMessage(),
                    "message", "JSON validation test failed",
                    "timestamp", LocalDateTime.now(),
                    "success", false);
        }
    }

    /**
     * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–µ—Å—Ç –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ JSON
     */
    @GetMapping(value = "/test-problematic-characters", produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public Map<String, Object> testProblematicCharacters() {
        try {
            log.info("üîç JSON –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ JSON");

            // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –ø—Ä–æ–±–ª–µ–º–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
            Map<String, Object> problematicData = new LinkedHashMap<>();
            problematicData.put("responseTime", 75.5);
            problematicData.put("source", "test'source\"with\\problematic/characters");
            problematicData.put("timestamp", "2025-01-25T23:27:00'T'invalid");
            problematicData.put("message", "Test message with \"quotes\" and 'apostrophes'");

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
            String validatedJson = jsonValidationService.validateAndFixPerformanceMetricsJson(problematicData);
            boolean isValid = jsonValidationService.isValidJson(validatedJson);

            return Map.of(
                    "status", "PROBLEMATIC_CHARS_TEST",
                    "message", "Test completed for problematic characters",
                    "originalData", problematicData,
                    "validatedJson", validatedJson,
                    "isValid", isValid,
                    "sanitized", isValid,
                    "timestamp", LocalDateTime.now(),
                    "success", true);

        } catch (Exception e) {
            log.error("‚ùå JSON –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤: {}", e.getMessage(), e);
            return Map.of(
                    "status", "PROBLEMATIC_CHARS_ERROR",
                    "error", e.getMessage(),
                    "timestamp", LocalDateTime.now(),
                    "success", false);
        }
    }

    /**
     * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–∫–∏ JSON.parse: expected double-quoted property
     * name
     */
    @GetMapping(value = "/simulate-json-parse-error", produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public Map<String, Object> simulateJsonParseError() {
        try {
            log.info("üîç JSON –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–∫–∏ JSON.parse");

            // –°–æ–∑–¥–∞–µ–º –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON (–∫–∞–∫ –±—ã–ª –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è)
            String invalidJson = "{\n    'responseTime': 75.5,\n    \"memoryUsage\": 70,\n    timestamp: \"2025-01-25T23:27:00\"\n}";

            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
            boolean isValid = jsonValidationService.isValidJson(invalidJson);

            // –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å
            Map<String, Object> testData = Map.of(
                    "responseTime", 75.5,
                    "memoryUsage", 70,
                    "timestamp", "2025-01-25T23:27:00");

            String fixedJson = jsonValidationService.validateAndFixPerformanceMetricsJson(testData);
            boolean isFixedValid = jsonValidationService.isValidJson(fixedJson);

            return Map.of(
                    "status", "JSON_PARSE_ERROR_SIMULATION",
                    "message", "Simulation of JSON parse error completed",
                    "invalidJson", invalidJson,
                    "invalidJsonValid", isValid,
                    "fixedJson", fixedJson,
                    "fixedJsonValid", isFixedValid,
                    "errorFixed", !isValid && isFixedValid,
                    "timestamp", LocalDateTime.now(),
                    "success", true);

        } catch (Exception e) {
            log.error("‚ùå JSON –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ JSON parse error: {}", e.getMessage(), e);
            return Map.of(
                    "status", "SIMULATION_ERROR",
                    "error", e.getMessage(),
                    "timestamp", LocalDateTime.now(),
                    "success", false);
        }
    }

    /**
     * –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ BackgroundMetricsService
     */
    @GetMapping(value = "/background-service-stats", produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseBody
    public Map<String, Object> getBackgroundServiceStats() {
        try {
            BackgroundMetricsService.BackgroundServiceStats stats = backgroundMetricsService.getServiceStats();

            return Map.of(
                    "status", "BACKGROUND_SERVICE_STATS",
                    "serviceStats", Map.of(
                            "totalCollections", stats.getTotalCollections(),
                            "lastCollectionDuration", stats.getLastCollectionDuration() + "ms",
                            "activeSSEConnections", stats.getActiveSSEConnections(),
                            "isHealthy", stats.getIsHealthy(),
                            "lastSuccessfulCollection", stats.getLastSuccessfulCollection()),
                    "timestamp", LocalDateTime.now(),
                    "success", true);

        } catch (Exception e) {
            log.error("‚ùå JSON –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ background service: {}", e.getMessage());
            return Map.of(
                    "status", "STATS_ERROR",
                    "error", e.getMessage(),
                    "timestamp", LocalDateTime.now(),
                    "success", false);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö performance metrics
     */
    private Map<String, Object> createTestPerformanceMetrics() {
        Map<String, Object> testData = new LinkedHashMap<>();
        testData.put("responseTime", 85.7);
        testData.put("averageResponseTime", 85.7);
        testData.put("memoryUsage", 72);
        testData.put("memoryUsagePercent", 72);
        testData.put("cacheHitRatio", 95);
        testData.put("totalUsers", 1250L);
        testData.put("activeUsers", 45L);
        testData.put("onlineUsers", 12L);
        testData.put("totalOrders", 8760L);
        testData.put("healthScore", 88);
        testData.put("uptime", 7200L);
        testData.put("timestamp", LocalDateTime.now());
        testData.put("source", "json-diagnostic-test");
        testData.put("collectionNumber", 999L);
        testData.put("success", true);

        return testData;
    }
}