package shit.back.controller;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import shit.back.config.PaymentConfigurationProperties;
import shit.back.entity.PaymentEntity;
import shit.back.entity.PaymentStatus;
import shit.back.service.PaymentService;
import shit.back.security.SecurityValidator;

import jakarta.servlet.http.HttpServletRequest;
import javax.crypto.Mac;
import javax.crypto.spec.SecretKeySpec;
import java.nio.charset.StandardCharsets;
import java.security.InvalidKeyException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback'–æ–≤ –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
 * 
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
 * –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 */
@Slf4j
@RestController
@RequestMapping("/api/payment/callback")
public class PaymentCallbackController {

    @Autowired
    private PaymentService paymentService;

    @Autowired
    private PaymentConfigurationProperties paymentConfig;

    @Autowired
    private SecurityValidator securityValidator;

    @Value("${TON_WEBHOOK_SECRET:}")
    private String tonWebhookSecret;

    /**
     * Callback –æ—Ç TON Wallet
     */
    @PostMapping("/ton")
    public ResponseEntity<Map<String, Object>> handleTonCallback(
            @RequestBody Map<String, Object> payload,
            @RequestHeader Map<String, String> headers,
            HttpServletRequest request) {

        log.info("üíé –ü–æ–ª—É—á–µ–Ω callback –æ—Ç TON Wallet: {}", payload);

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ TON –≤–∫–ª—é—á–µ–Ω
            if (!paymentConfig.getTon().getEnabled()) {
                log.warn("‚ö†Ô∏è TON Wallet –æ—Ç–∫–ª—é—á–µ–Ω, –Ω–æ –ø–æ–ª—É—á–µ–Ω callback");
                return createErrorResponse("TON Wallet –æ—Ç–∫–ª—é—á–µ–Ω", HttpStatus.BAD_REQUEST);
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ payload
            Map<String, String> params = extractTonParams(payload);
            String paymentId = params.get("payment_id");

            if (paymentId == null || paymentId.isEmpty()) {
                log.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω payment_id –≤ TON callback");
                return createErrorResponse("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç payment_id", HttpStatus.BAD_REQUEST);
            }

            // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            if (!verifyTonSignature(params, headers)) {
                log.warn("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å TON callback –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞: {}", paymentId);
                return createErrorResponse("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å", HttpStatus.UNAUTHORIZED);
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback
            boolean success = paymentService.verifyPaymentCallback(paymentId, params);

            if (success) {
                log.info("‚úÖ TON callback —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞: {}", paymentId);
                return createSuccessResponse("OK");
            } else {
                log.warn("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ TON callback –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞: {}", paymentId);
                return createErrorResponse("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", HttpStatus.INTERNAL_SERVER_ERROR);
            }

        } catch (Exception e) {
            log.error("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ TON callback: {}", e.getMessage(), e);
            return createErrorResponse("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Callback –æ—Ç YooKassa
     */
    @PostMapping("/yookassa")
    public ResponseEntity<Map<String, Object>> handleYooKassaCallback(
            @RequestBody Map<String, Object> payload,
            @RequestHeader Map<String, String> headers,
            HttpServletRequest request) {

        log.info("üí≥ –ü–æ–ª—É—á–µ–Ω callback –æ—Ç YooKassa: {}", payload);

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ YooKassa –≤–∫–ª—é—á–µ–Ω–∞
            if (!paymentConfig.getYookassa().getEnabled()) {
                log.warn("‚ö†Ô∏è YooKassa –æ—Ç–∫–ª—é—á–µ–Ω–∞, –Ω–æ –ø–æ–ª—É—á–µ–Ω callback");
                return createErrorResponse("YooKassa –æ—Ç–∫–ª—é—á–µ–Ω–∞", HttpStatus.BAD_REQUEST);
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ payload
            Map<String, String> params = extractYooKassaParams(payload);
            String paymentId = params.get("payment_id");

            if (paymentId == null || paymentId.isEmpty()) {
                log.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω payment_id –≤ YooKassa callback");
                return createErrorResponse("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç payment_id", HttpStatus.BAD_REQUEST);
            }

            // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            if (!verifyYooKassaSignature(params, headers)) {
                log.warn("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å YooKassa callback –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞: {}", paymentId);
                return createErrorResponse("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å", HttpStatus.UNAUTHORIZED);
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback
            boolean success = paymentService.verifyPaymentCallback(paymentId, params);

            if (success) {
                log.info("‚úÖ YooKassa callback —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞: {}", paymentId);
                return createSuccessResponse("OK");
            } else {
                log.warn("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ YooKassa callback –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞: {}", paymentId);
                return createErrorResponse("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", HttpStatus.INTERNAL_SERVER_ERROR);
            }

        } catch (Exception e) {
            log.error("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ YooKassa callback: {}", e.getMessage(), e);
            return createErrorResponse("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Callback –æ—Ç Qiwi
     */
    @PostMapping("/qiwi")
    public ResponseEntity<Map<String, Object>> handleQiwiCallback(
            @RequestBody Map<String, Object> payload,
            @RequestHeader Map<String, String> headers,
            HttpServletRequest request) {

        log.info("ü•ù –ü–æ–ª—É—á–µ–Ω callback –æ—Ç Qiwi: {}", payload);

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Qiwi –≤–∫–ª—é—á–µ–Ω
            if (!paymentConfig.getQiwi().getEnabled()) {
                log.warn("‚ö†Ô∏è Qiwi –æ—Ç–∫–ª—é—á–µ–Ω, –Ω–æ –ø–æ–ª—É—á–µ–Ω callback");
                return createErrorResponse("Qiwi –æ—Ç–∫–ª—é—á–µ–Ω", HttpStatus.BAD_REQUEST);
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ payload
            Map<String, String> params = extractQiwiParams(payload);
            String paymentId = params.get("payment_id");

            if (paymentId == null || paymentId.isEmpty()) {
                log.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω payment_id –≤ Qiwi callback");
                return createErrorResponse("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç payment_id", HttpStatus.BAD_REQUEST);
            }

            // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            if (!verifyQiwiSignature(params, headers)) {
                log.warn("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å Qiwi callback –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞: {}", paymentId);
                return createErrorResponse("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å", HttpStatus.UNAUTHORIZED);
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback
            boolean success = paymentService.verifyPaymentCallback(paymentId, params);

            if (success) {
                log.info("‚úÖ Qiwi callback —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞: {}", paymentId);
                return createSuccessResponse("OK");
            } else {
                log.warn("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Qiwi callback –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞: {}", paymentId);
                return createErrorResponse("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", HttpStatus.INTERNAL_SERVER_ERROR);
            }

        } catch (Exception e) {
            log.error("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Qiwi callback: {}", e.getMessage(), e);
            return createErrorResponse("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * Callback –æ—Ç SberPay
     */
    @PostMapping("/sberpay")
    public ResponseEntity<Map<String, Object>> handleSberPayCallback(
            @RequestBody Map<String, Object> payload,
            @RequestHeader Map<String, String> headers,
            HttpServletRequest request) {

        log.info("üè¶ –ü–æ–ª—É—á–µ–Ω callback –æ—Ç SberPay: {}", payload);

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ SberPay –≤–∫–ª—é—á–µ–Ω
            if (!paymentConfig.getSberpay().getEnabled()) {
                log.warn("‚ö†Ô∏è SberPay –æ—Ç–∫–ª—é—á–µ–Ω, –Ω–æ –ø–æ–ª—É—á–µ–Ω callback");
                return createErrorResponse("SberPay –æ—Ç–∫–ª—é—á–µ–Ω", HttpStatus.BAD_REQUEST);
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ payload
            Map<String, String> params = extractSberPayParams(payload);
            String paymentId = params.get("payment_id");

            if (paymentId == null || paymentId.isEmpty()) {
                log.warn("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω payment_id –≤ SberPay callback");
                return createErrorResponse("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç payment_id", HttpStatus.BAD_REQUEST);
            }

            // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å
            if (!verifySberPaySignature(params, headers)) {
                log.warn("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å SberPay callback –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞: {}", paymentId);
                return createErrorResponse("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å", HttpStatus.UNAUTHORIZED);
            }

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback
            boolean success = paymentService.verifyPaymentCallback(paymentId, params);

            if (success) {
                log.info("‚úÖ SberPay callback —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞: {}", paymentId);
                return createSuccessResponse("OK");
            } else {
                log.warn("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ SberPay callback –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞: {}", paymentId);
                return createErrorResponse("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", HttpStatus.INTERNAL_SERVER_ERROR);
            }

        } catch (Exception e) {
            log.error("‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ SberPay callback: {}", e.getMessage(), e);
            return createErrorResponse("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
     */
    @GetMapping("/status/{paymentId}")
    public ResponseEntity<Map<String, Object>> getPaymentStatus(@PathVariable String paymentId) {
        log.info("üîç –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞: {}", paymentId);

        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è payment ID
            if (paymentId == null || paymentId.trim().isEmpty() || paymentId.length() > 50) {
                return createErrorResponse("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–ª–∞—Ç–µ–∂–∞", HttpStatus.BAD_REQUEST);
            }

            Optional<PaymentEntity> paymentOpt = paymentService.getPayment(paymentId);

            if (paymentOpt.isEmpty()) {
                return createErrorResponse("–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", HttpStatus.NOT_FOUND);
            }

            PaymentEntity payment = paymentOpt.get();

            Map<String, Object> response = new HashMap<>();
            response.put("success", true);
            response.put("payment_id", payment.getPaymentId());
            response.put("status", payment.getStatus().name());
            response.put("status_display", payment.getFormattedStatus());
            response.put("amount", payment.getFormattedAmount());
            response.put("payment_method", payment.getPaymentMethod());
            response.put("created_at", payment.getCreatedAt());
            response.put("updated_at", payment.getUpdatedAt());

            if (payment.getCompletedAt() != null) {
                response.put("completed_at", payment.getCompletedAt());
            }

            if (payment.getErrorMessage() != null) {
                response.put("error_message", payment.getErrorMessage());
            }

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞ {}: {}", paymentId, e.getMessage(), e);
            return createErrorResponse("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }

    // ===== –ú–ï–¢–û–î–´ –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø –ü–ê–†–ê–ú–ï–¢–†–û–í =====

    private Map<String, String> extractTonParams(Map<String, Object> payload) {
        Map<String, String> params = new HashMap<>();

        // TODO: –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è TON Wallet
        // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        params.put("payment_id", String.valueOf(payload.getOrDefault("payment_id", "")));
        params.put("status", String.valueOf(payload.getOrDefault("status", "completed")));
        params.put("amount", String.valueOf(payload.getOrDefault("amount", "0")));

        return params;
    }

    private Map<String, String> extractYooKassaParams(Map<String, Object> payload) {
        Map<String, String> params = new HashMap<>();

        // TODO: –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è YooKassa
        // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        params.put("payment_id", String.valueOf(payload.getOrDefault("payment_id", "")));
        params.put("status", String.valueOf(payload.getOrDefault("status", "succeeded")));
        params.put("amount", String.valueOf(payload.getOrDefault("amount", "0")));

        return params;
    }

    private Map<String, String> extractQiwiParams(Map<String, Object> payload) {
        Map<String, String> params = new HashMap<>();

        // TODO: –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è Qiwi
        // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        params.put("payment_id", String.valueOf(payload.getOrDefault("payment_id", "")));
        params.put("status", String.valueOf(payload.getOrDefault("status", "PAID")));
        params.put("amount", String.valueOf(payload.getOrDefault("amount", "0")));

        return params;
    }

    private Map<String, String> extractSberPayParams(Map<String, Object> payload) {
        Map<String, String> params = new HashMap<>();

        // TODO: –†–µ–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è SberPay
        // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        params.put("payment_id", String.valueOf(payload.getOrDefault("payment_id", "")));
        params.put("status", String.valueOf(payload.getOrDefault("status", "DEPOSITED")));
        params.put("amount", String.valueOf(payload.getOrDefault("amount", "0")));

        return params;
    }

    // ===== –ú–ï–¢–û–î–´ –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò –ü–û–î–ü–ò–°–ï–ô =====

    /**
     * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è HMAC-SHA256 –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è TON –ø–ª–∞—Ç–µ–∂–µ–π
     *
     * @param params  –ø–∞—Ä–∞–º–µ—Ç—Ä—ã callback'–∞ –æ—Ç TON
     * @param headers –∑–∞–≥–æ–ª–æ–≤–∫–∏ HTTP –∑–∞–ø—Ä–æ—Å–∞
     * @return true –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, false –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
     */
    private boolean verifyTonSignature(Map<String, String> params, Map<String, String> headers) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            if (tonWebhookSecret == null || tonWebhookSecret.trim().isEmpty()) {
                log.error("üîí TON webhook secret –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
                return false;
            }

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–¥–ø–∏—Å—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            String providedSignature = headers.get("x-signature");
            if (providedSignature == null) {
                providedSignature = headers.get("X-Signature");
            }
            if (providedSignature == null) {
                providedSignature = headers.get("signature");
            }

            if (providedSignature == null || providedSignature.trim().isEmpty()) {
                log.warn("‚ö†Ô∏è TON callback: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–ø–∏—Å—å –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö");
                return false;
            }

            // –£–¥–∞–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "sha256=" –µ—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç
            if (providedSignature.startsWith("sha256=")) {
                providedSignature = providedSignature.substring(7);
            }

            // –°—Ç—Ä–æ–∏–º —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            String signatureString = buildTonSignatureString(params);
            log.debug("üîç TON signature string: {}", signatureString);

            // –í—ã—á–∏—Å–ª—è–µ–º HMAC-SHA256
            String computedSignature = computeHmacSha256(signatureString, tonWebhookSecret.trim());

            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π (constant-time)
            boolean isValid = constantTimeEquals(providedSignature, computedSignature);

            if (isValid) {
                log.info("‚úÖ TON webhook signature —É—Å–ø–µ—à–Ω–æ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞: {}",
                        params.get("payment_id"));
            } else {
                log.warn("‚ùå TON webhook signature –Ω–µ –ø—Ä–æ—à–ª–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é. Payment ID: {}, " +
                        "Expected: {}, Provided: {}",
                        params.get("payment_id"), computedSignature, providedSignature);
            }

            return isValid;

        } catch (Exception e) {
            log.error("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ TON –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {}: {}",
                    params.get("payment_id"), e.getMessage(), e);
            return false;
        }
    }

    /**
     * –°—Ç—Ä–æ–∏—Ç —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ TON callback'–∞
     * —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ TON Wallet API
     */
    private String buildTonSignatureString(Map<String, String> params) {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –∫–ª—é—á—É –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º –≤ —Å—Ç—Ä–æ–∫—É
        // –§–æ—Ä–º–∞—Ç: key1=value1&key2=value2&...
        return params.entrySet()
                .stream()
                .filter(entry -> entry.getKey() != null && entry.getValue() != null)
                .sorted(Map.Entry.comparingByKey())
                .map(entry -> entry.getKey() + "=" + entry.getValue())
                .collect(Collectors.joining("&"));
    }

    /**
     * –í—ã—á–∏—Å–ª—è–µ—Ç HMAC-SHA256 –ø–æ–¥–ø–∏—Å—å
     *
     * @param data –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
     * @param key  —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á
     * @return HEX –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ HMAC-SHA256
     */
    private String computeHmacSha256(String data, String key) throws NoSuchAlgorithmException, InvalidKeyException {
        Mac mac = Mac.getInstance("HmacSHA256");
        SecretKeySpec keySpec = new SecretKeySpec(key.getBytes(StandardCharsets.UTF_8), "HmacSHA256");
        mac.init(keySpec);

        byte[] hmacBytes = mac.doFinal(data.getBytes(StandardCharsets.UTF_8));

        // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ HEX
        StringBuilder hexString = new StringBuilder();
        for (byte b : hmacBytes) {
            String hex = Integer.toHexString(0xff & b);
            if (hex.length() == 1) {
                hexString.append('0');
            }
            hexString.append(hex);
        }

        return hexString.toString();
    }

    /**
     * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è timing attacks
     *
     * @param a –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
     * @param b –≤—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
     * @return true –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã
     */
    private boolean constantTimeEquals(String a, String b) {
        if (a == null || b == null) {
            return a == b;
        }

        if (a.length() != b.length()) {
            return false;
        }

        int result = 0;
        for (int i = 0; i < a.length(); i++) {
            result |= a.charAt(i) ^ b.charAt(i);
        }

        return result == 0;
    }

    private boolean verifyYooKassaSignature(Map<String, String> params, Map<String, String> headers) {
        // TODO: –†–µ–∞–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ YooKassa
        log.info("üöß YooKassa: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ (–∑–∞–≥–ª—É—à–∫–∞)");
        return true; // –ó–∞–≥–ª—É—à–∫–∞
    }

    private boolean verifyQiwiSignature(Map<String, String> params, Map<String, String> headers) {
        // TODO: –†–µ–∞–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ Qiwi
        log.info("üöß Qiwi: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ (–∑–∞–≥–ª—É—à–∫–∞)");
        return true; // –ó–∞–≥–ª—É—à–∫–∞
    }

    private boolean verifySberPaySignature(Map<String, String> params, Map<String, String> headers) {
        // TODO: –†–µ–∞–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ SberPay
        log.info("üöß SberPay: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ (–∑–∞–≥–ª—É—à–∫–∞)");
        return true; // –ó–∞–≥–ª—É—à–∫–∞
    }

    // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

    private ResponseEntity<Map<String, Object>> createSuccessResponse(String message) {
        Map<String, Object> response = new HashMap<>();
        response.put("success", true);
        response.put("message", message);
        return ResponseEntity.ok(response);
    }

    private ResponseEntity<Map<String, Object>> createErrorResponse(String message, HttpStatus status) {
        Map<String, Object> response = new HashMap<>();
        response.put("success", false);
        response.put("error", message);
        return ResponseEntity.status(status).body(response);
    }
}