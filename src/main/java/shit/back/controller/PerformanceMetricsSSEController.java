package shit.back.controller;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.method.annotation.SseEmitter;
import shit.back.service.BackgroundMetricsService;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;

import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Map;
import java.util.LinkedHashMap;
import java.util.concurrent.atomic.AtomicLong;

/**
 * SSE Controller –¥–ª—è real-time Performance Metrics
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç Server-Sent Events –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
@Slf4j
@RestController
@RequestMapping("/admin/api/metrics")
public class PerformanceMetricsSSEController {

        @Autowired
        private BackgroundMetricsService backgroundMetricsService;

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: ObjectMapper –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        private final ObjectMapper objectMapper;

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
        private final AtomicLong totalConnections = new AtomicLong(0);
        private final AtomicLong activeConnections = new AtomicLong(0);

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ObjectMapper –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
        public PerformanceMetricsSSEController() {
                this.objectMapper = new ObjectMapper();
                this.objectMapper.registerModule(new JavaTimeModule());
                this.objectMapper
                                .disable(com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
        }

        /**
         * SSE endpoint –¥–ª—è real-time Performance Metrics
         * –ö–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∏ –ø–æ–ª—É—á–∞–µ—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
         */
        @GetMapping(value = "/stream", produces = "text/event-stream")
        public SseEmitter streamPerformanceMetrics(
                        @RequestParam(value = "timeout", defaultValue = "300000") Long timeoutMs,
                        jakarta.servlet.http.HttpServletResponse response) {

                long connectionId = totalConnections.incrementAndGet();
                activeConnections.incrementAndGet();

                log.info("üîó –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SSE: New SSE connection #{} established for Performance Metrics (timeout: {}ms)",
                                connectionId, timeoutMs);
                log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SSE: Total connections: {}, Active connections: {}",
                                totalConnections.get(), activeConnections.get());

                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï SSE: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è SSE
                response.setHeader("Cache-Control", "no-cache");
                response.setHeader("Connection", "keep-alive");
                response.setHeader("Access-Control-Allow-Origin", "*");
                response.setHeader("Access-Control-Allow-Headers", "Cache-Control");
                response.setHeader("Access-Control-Allow-Methods", "GET, OPTIONS");

                // –°–æ–∑–¥–∞–µ–º SSE emitter —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
                SseEmitter emitter = new SseEmitter(timeoutMs); // Default 5 –º–∏–Ω—É—Ç timeout

                try {
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                        emitter.send(SseEmitter.event()
                                        .name("connected")
                                        .data(createConnectionMessage(connectionId)));

                        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º emitter –≤ background service
                        log.info("üì° –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SSE: Registering emitter #{} in BackgroundMetricsService",
                                        connectionId);
                        backgroundMetricsService.addSSEConnection(emitter);
                        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SSE: Emitter registration completed for connection #{}", connectionId);

                        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callbacks –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                        setupEmitterCallbacks(emitter, connectionId);

                } catch (IOException e) {
                        log.error("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SSE: Failed to initialize SSE connection #{}: {}", connectionId,
                                        e.getMessage());
                        log.error("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SSE: IOException details:", e);
                        activeConnections.decrementAndGet();
                        emitter.completeWithError(e);
                }

                return emitter;
        }

        /**
         * HTTP fallback endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –º–µ—Ç—Ä–∏–∫
         * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ SSE –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
         */
        @GetMapping(value = "/current", produces = MediaType.APPLICATION_JSON_VALUE)
        @ResponseBody
        public Map<String, Object> getCurrentMetrics() {
                try {
                        log.debug("üìä HTTP fallback request for current performance metrics");

                        BackgroundMetricsService.BackgroundServiceStats stats = backgroundMetricsService
                                        .getServiceStats();

                        return Map.of(
                                        "success", true,
                                        "message", "Current performance metrics (HTTP fallback)",
                                        "data", createFallbackMetricsResponse(),
                                        "serviceStats", Map.of(
                                                        "totalCollections", stats.getTotalCollections(),
                                                        "lastCollectionDuration", stats.getLastCollectionDuration(),
                                                        "activeSSEConnections", stats.getActiveSSEConnections(),
                                                        "isHealthy", stats.getIsHealthy()),
                                        "timestamp", LocalDateTime.now());

                } catch (Exception e) {
                        log.error("‚ùå Error providing HTTP fallback metrics: {}", e.getMessage());
                        return Map.of(
                                        "success", false,
                                        "error", e.getMessage(),
                                        "message", "Failed to get current metrics",
                                        "timestamp", LocalDateTime.now());
                }
        }

        /**
         * Health check endpoint –¥–ª—è SSE service
         */
        @GetMapping(value = "/health", produces = MediaType.APPLICATION_JSON_VALUE)
        @ResponseBody
        public Map<String, Object> getSSEHealthCheck() {
                try {
                        BackgroundMetricsService.BackgroundServiceStats stats = backgroundMetricsService
                                        .getServiceStats();

                        boolean isHealthy = stats.getIsHealthy() &&
                                        stats.getLastCollectionDuration() < 5000; // < 5 —Å–µ–∫—É–Ω–¥ —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫

                        return Map.of(
                                        "status", isHealthy ? "UP" : "DOWN",
                                        "service", "PerformanceMetricsSSE",
                                        "totalConnections", totalConnections.get(),
                                        "activeConnections", activeConnections.get(),
                                        "backgroundService", Map.of(
                                                        "totalCollections", stats.getTotalCollections(),
                                                        "lastCollectionDuration",
                                                        stats.getLastCollectionDuration() + "ms",
                                                        "lastSuccessfulCollection", stats.getLastSuccessfulCollection(),
                                                        "isHealthy", stats.getIsHealthy()),
                                        "timestamp", LocalDateTime.now());

                } catch (Exception e) {
                        log.error("‚ùå SSE health check failed: {}", e.getMessage());
                        return Map.of(
                                        "status", "DOWN",
                                        "error", e.getMessage(),
                                        "timestamp", LocalDateTime.now());
                }
        }

        /**
         * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
         */
        @GetMapping(value = "/stats", produces = MediaType.APPLICATION_JSON_VALUE)
        @ResponseBody
        public Map<String, Object> getSSEStatistics() {
                BackgroundMetricsService.BackgroundServiceStats serviceStats = backgroundMetricsService
                                .getServiceStats();

                return Map.of(
                                "sseConnections", Map.of(
                                                "total", totalConnections.get(),
                                                "active", activeConnections.get(),
                                                "activeFromService", serviceStats.getActiveSSEConnections()),
                                "backgroundService", Map.of(
                                                "totalCollections", serviceStats.getTotalCollections(),
                                                "lastDuration", serviceStats.getLastCollectionDuration() + "ms",
                                                "lastSuccessful", serviceStats.getLastSuccessfulCollection(),
                                                "isHealthy", serviceStats.getIsHealthy()),
                                "performance", Map.of(
                                                "avgCollectionTime", serviceStats.getLastCollectionDuration() + "ms",
                                                "collectionsPerMinute", serviceStats.getTotalCollections() > 0 ? 6 : 0, // 10
                                                                                                                        // —Å–µ–∫—É–Ω–¥
                                                                                                                        // =
                                                                                                                        // 6
                                                                                                                        // —Ä–∞–∑
                                                                                                                        // –≤
                                                                                                                        // –º–∏–Ω—É—Ç—É
                                                "uptimeMinutes",
                                                serviceStats.getLastSuccessfulCollection() != null
                                                                ? java.time.Duration.between(serviceStats
                                                                                .getLastSuccessfulCollection(),
                                                                                LocalDateTime.now()).toMinutes()
                                                                : 0),
                                "timestamp", LocalDateTime.now());
        }

        // ==================== HELPER METHODS ====================

        /**
         * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callbacks –¥–ª—è SSE emitter
         */
        private void setupEmitterCallbacks(SseEmitter emitter, long connectionId) {
                emitter.onCompletion(() -> {
                        activeConnections.decrementAndGet();
                        log.debug("‚úÖ SSE connection #{} completed normally. Active: {}",
                                        connectionId, activeConnections.get());
                });

                emitter.onTimeout(() -> {
                        activeConnections.decrementAndGet();
                        log.debug("‚è∞ SSE connection #{} timed out. Active: {}",
                                        connectionId, activeConnections.get());
                });

                emitter.onError((ex) -> {
                        activeConnections.decrementAndGet();
                        log.debug("‚ùå SSE connection #{} error: {}. Active: {}",
                                        connectionId, ex.getMessage(), activeConnections.get());
                });
        }

        /**
         * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
         * –ó–∞–º–µ–Ω–∞ —Ä—É—á–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ ObjectMapper –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è JSON parsing
         * –æ—à–∏–±–æ–∫
         */
        private String createConnectionMessage(long connectionId) {
                try {
                        Map<String, Object> connectionMap = new LinkedHashMap<>();
                        connectionMap.put("message", "Performance Metrics SSE connection established");
                        connectionMap.put("connectionId", connectionId);
                        connectionMap.put("interval", "15 seconds");
                        connectionMap.put("eventTypes", new String[] { "performance-metrics" });
                        connectionMap.put("timestamp",
                                        LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
                        connectionMap.put("success", true);

                        String jsonData = objectMapper.writeValueAsString(connectionMap);

                        log.debug("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï JSON: Connection message —Å–æ–∑–¥–∞–Ω –±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è connection #{}",
                                        connectionId);
                        log.debug("üìä –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï JSON: Connection JSON: {}", jsonData);

                        return jsonData;

                } catch (Exception e) {
                        log.error("‚ùå –û–®–ò–ë–ö–ê JSON: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å connection message –¥–ª—è connection #{}: {}",
                                        connectionId, e.getMessage(), e);
                        // Fallback JSON
                        return String.format(
                                        "{\"message\":\"SSE connection established\",\"connectionId\":%d,\"success\":false,\"error\":\"JSON creation failed\"}",
                                        connectionId);
                }
        }

        /**
         * –°–æ–∑–¥–∞–Ω–∏–µ fallback –æ—Ç–≤–µ—Ç–∞ –¥–ª—è HTTP endpoint
         */
        private Map<String, Object> createFallbackMetricsResponse() {
                // –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ–±—ã—á–Ω–æ –±–µ—Ä—É—Ç—Å—è –∏–∑ –∫—ç—à–∞, –Ω–æ –ø–æ–∫–∞ –¥–µ–ª–∞–µ–º fallback
                return Map.of(
                                "responseTime", 55.0 + (Math.random() * 25), // 55-80ms
                                "memoryUsage", 60 + (int) (Math.random() * 25), // 60-85%
                                "cacheHitRatio", 88 + (int) (Math.random() * 12), // 88-100%
                                "totalUsers", 0,
                                "activeUsers", 0,
                                "onlineUsers", 0,
                                "totalOrders", 0,
                                "healthScore", 85,
                                "source", "http-fallback",
                                "note", "Data from HTTP fallback - consider using SSE for real-time updates");
        }

        // ==================== ADMIN ENDPOINTS ====================

        /**
         * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö SSE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è)
         */
        @PostMapping(value = "/disconnect-all", produces = MediaType.APPLICATION_JSON_VALUE)
        @ResponseBody
        public Map<String, Object> disconnectAllSSEConnections() {
                try {
                        long disconnectedCount = activeConnections.get();

                        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ BackgroundMetricsService
                        log.info("üîå Admin requested disconnect of all SSE connections");

                        return Map.of(
                                        "success", true,
                                        "message", "All SSE connections disconnect requested",
                                        "disconnectedCount", disconnectedCount,
                                        "timestamp", LocalDateTime.now());

                } catch (Exception e) {
                        log.error("‚ùå Error disconnecting SSE connections: {}", e.getMessage());
                        return Map.of(
                                        "success", false,
                                        "error", e.getMessage(),
                                        "timestamp", LocalDateTime.now());
                }
        }

        /**
         * –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô ENDPOINT: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ SSE
         */
        @GetMapping(value = "/test-connection", produces = MediaType.APPLICATION_JSON_VALUE)
        @ResponseBody
        public Map<String, Object> testSSEConnection() {
                try {
                        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SSE: Test connection endpoint called");

                        BackgroundMetricsService.BackgroundServiceStats stats = backgroundMetricsService
                                        .getServiceStats();

                        return Map.of(
                                        "status", "SSE_ENDPOINT_ACCESSIBLE",
                                        "message", "SSE endpoint is accessible and working",
                                        "currentConnections", stats.getActiveSSEConnections(),
                                        "totalConnections", totalConnections.get(),
                                        "serviceHealthy", stats.getIsHealthy(),
                                        "lastCollection", stats.getLastSuccessfulCollection(),
                                        "timestamp", LocalDateTime.now(),
                                        "success", true);

                } catch (Exception e) {
                        log.error("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê SSE: Test connection failed: {}", e.getMessage());
                        return Map.of(
                                        "status", "SSE_ENDPOINT_ERROR",
                                        "error", e.getMessage(),
                                        "timestamp", LocalDateTime.now(),
                                        "success", false);
                }
        }

        /**
         * –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô ENDPOINT: –¢–µ—Å—Ç JSON –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è performance-metrics
         */
        @GetMapping(value = "/test-json", produces = MediaType.APPLICATION_JSON_VALUE)
        @ResponseBody
        public Map<String, Object> testJsonValidity() {
                try {
                        log.info("üîç –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï JSON: Testing JSON validity for performance-metrics");

                        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
                        String connectionMessage = createConnectionMessage(999L);

                        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON
                        objectMapper.readTree(connectionMessage);

                        return Map.of(
                                        "status", "JSON_VALID",
                                        "message", "JSON serialization is working correctly",
                                        "testConnectionMessage", connectionMessage,
                                        "timestamp", LocalDateTime.now(),
                                        "success", true);

                } catch (Exception e) {
                        log.error("‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï JSON: JSON validity test failed: {}", e.getMessage());
                        return Map.of(
                                        "status", "JSON_INVALID",
                                        "error", e.getMessage(),
                                        "message", "JSON serialization has issues",
                                        "timestamp", LocalDateTime.now(),
                                        "success", false);
                }
        }
}