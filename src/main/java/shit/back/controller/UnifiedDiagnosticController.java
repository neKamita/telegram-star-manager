package shit.back.controller;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationContext;
import org.springframework.data.domain.PageRequest;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;
import shit.back.entity.UserActivityLogEntity;
import shit.back.repository.UserActivityLogJpaRepository;
import shit.back.service.BotSelfTestService;
import shit.back.service.TelegramWebhookBotService;

import jakarta.servlet.http.HttpServletRequest;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.CompletableFuture;
import java.util.stream.Collectors;

/**
 * –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
 * –í–∫–ª—é—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö diagnostic –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤
 * –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞–º DRY, SOLID –∏ Clean Code
 */
@Slf4j
@RestController
@RequestMapping("/diagnostic")
@RequiredArgsConstructor
public class UnifiedDiagnosticController {

    @Autowired(required = false)
    private TelegramWebhookBotService telegramBotService;

    @Autowired(required = false)
    private BotSelfTestService botSelfTestService;

    @Autowired
    private ApplicationContext applicationContext;

    @Autowired
    private RequestMappingHandlerMapping requestMappingHandlerMapping;

    private final UserActivityLogJpaRepository activityLogRepository;
    private final DataSource dataSource;

    @Value("${telegram.bot.token:}")
    private String botToken;

    @Value("${telegram.bot.username:}")
    private String botUsername;

    @Value("${telegram.bot.webhook-url:}")
    private String webhookUrl;

    @Value("${spring.profiles.active:}")
    private String activeProfile;

    // ============= TELEGRAM –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê =============

    /**
     * –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Telegram –±–æ—Ç–∞
     */
    @GetMapping("/telegram-config")
    public ResponseEntity<Map<String, Object>> getTelegramConfig() {
        log.info("üîç –ó–∞–ø—Ä–æ—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Telegram –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");

        Map<String, Object> config = new HashMap<>();
        config.put("timestamp", System.currentTimeMillis());
        config.put("activeProfile", activeProfile);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
        Map<String, Object> tokenInfo = new HashMap<>();
        tokenInfo.put("isSet", botToken != null && !botToken.trim().isEmpty());
        tokenInfo.put("length", botToken != null ? botToken.length() : 0);
        tokenInfo.put("maskedValue", maskToken(botToken));
        config.put("botToken", tokenInfo);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–µ–Ω–∏ –±–æ—Ç–∞
        Map<String, Object> usernameInfo = new HashMap<>();
        usernameInfo.put("isSet", botUsername != null && !botUsername.trim().isEmpty());
        usernameInfo.put("value", botUsername);
        config.put("botUsername", usernameInfo);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook URL
        Map<String, Object> webhookInfo = new HashMap<>();
        webhookInfo.put("isSet", webhookUrl != null && !webhookUrl.trim().isEmpty());
        webhookInfo.put("value", webhookUrl);
        config.put("webhookUrl", webhookInfo);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
        Map<String, Object> serviceInfo = new HashMap<>();
        serviceInfo.put("serviceExists", telegramBotService != null);
        if (telegramBotService != null) {
            serviceInfo.put("serviceClass", telegramBotService.getClass().getSimpleName());
            serviceInfo.put("isInitialized", true);
        }
        config.put("telegramService", serviceInfo);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∏–Ω–æ–≤ Spring
        Map<String, Object> beansInfo = new HashMap<>();
        beansInfo.put("telegramWebhookBotServiceExists",
                applicationContext.containsBean("telegramWebhookBotService"));
        config.put("springBeans", beansInfo);

        return ResponseEntity.ok(config);
    }

    /**
     * –ó–∞–ø—É—Å–∫ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
     */
    @GetMapping("/bot-self-test")
    public ResponseEntity<Map<String, Object>> runBotSelfTest() {
        log.info("üß™ –ó–∞–ø—Ä–æ—Å –∑–∞–ø—É—Å–∫–∞ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞");

        Map<String, Object> response = new HashMap<>();
        response.put("timestamp", System.currentTimeMillis());

        if (botSelfTestService == null) {
            response.put("status", "ERROR");
            response.put("message", "BotSelfTestService –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω");
            return ResponseEntity.badRequest().body(response);
        }

        try {
            CompletableFuture<BotSelfTestService.SelfTestResult> futureResult = botSelfTestService.performSelfTest();

            BotSelfTestService.SelfTestResult testResult = futureResult.get(30, java.util.concurrent.TimeUnit.SECONDS);

            response.put("status", testResult.isOverallSuccess() ? "SUCCESS" : "FAILURE");
            response.put("overallSuccess", testResult.isOverallSuccess());
            response.put("duration", testResult.getEndTime() - testResult.getStartTime());

            Map<String, Boolean> testResults = new HashMap<>();
            testResults.put("configuration", testResult.isConfigurationCheck());
            testResults.put("service", testResult.isServiceCheck());
            testResults.put("webhook", testResult.isWebhookCheck());
            testResults.put("messageTest", testResult.isMessageTestCheck());
            response.put("testResults", testResults);

            if (testResult.getErrorMessage() != null) {
                response.put("errorMessage", testResult.getErrorMessage());
            }

            return ResponseEntity.ok(response);

        } catch (java.util.concurrent.TimeoutException e) {
            response.put("status", "TIMEOUT");
            response.put("message", "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (30 —Å–µ–∫)");
            return ResponseEntity.internalServerError().body(response);

        } catch (Exception e) {
            response.put("status", "ERROR");
            response.put("message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: " + e.getMessage());
            return ResponseEntity.internalServerError().body(response);
        }
    }

    // ============= ENDPOINTS –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê =============

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö endpoints
     */
    @GetMapping("/endpoints")
    public ResponseEntity<Map<String, Object>> getAllEndpoints(HttpServletRequest request) {
        log.info("üîç –ó–∞–ø—Ä–æ—Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö endpoints");

        Map<String, Object> result = new HashMap<>();

        try {
            Map<String, String> allMappings = requestMappingHandlerMapping
                    .getHandlerMethods()
                    .entrySet()
                    .stream()
                    .collect(Collectors.toMap(
                            entry -> entry.getKey().toString(),
                            entry -> entry.getValue().getMethod().getDeclaringClass().getSimpleName()
                                    + "." + entry.getValue().getMethod().getName()));

            result.put("totalEndpoints", allMappings.size());
            result.put("allMappings", allMappings);

            // –ê–¥–º–∏–Ω—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            Map<String, String> adminEndpoints = allMappings.entrySet().stream()
                    .filter(entry -> entry.getKey().contains("/admin/"))
                    .collect(Collectors.toMap(Map.Entry::getKey, Map.Entry::getValue));

            result.put("adminEndpoints", adminEndpoints);
            result.put("adminEndpointsCount", adminEndpoints.size());

            // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            result.put("hasDashboardDataEndpoint", allMappings.keySet().stream()
                    .anyMatch(key -> key.contains("dashboard-data")));
            result.put("hasSystemHealthEndpoint", allMappings.keySet().stream()
                    .anyMatch(key -> key.contains("system-health")));

            result.put("timestamp", LocalDateTime.now());
            result.put("success", true);

        } catch (Exception e) {
            log.error("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ endpoints", e);
            result.put("error", e.getMessage());
            result.put("success", false);
        }

        return ResponseEntity.ok(result);
    }

    // ============= ACTIVITY LOG –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê =============

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã user_activity_logs
     */
    @GetMapping("/activity-log/schema")
    public ResponseEntity<Map<String, Object>> checkActivityLogSchema() {
        Map<String, Object> result = new HashMap<>();
        List<Map<String, String>> columns = new ArrayList<>();

        try (Connection connection = dataSource.getConnection();
                Statement statement = connection.createStatement()) {

            log.info("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã user_activity_logs ===");

            String sql = """
                    SELECT column_name, data_type, character_maximum_length, is_nullable
                    FROM information_schema.columns
                    WHERE table_name = 'user_activity_logs'
                    ORDER BY ordinal_position
                    """;

            ResultSet rs = statement.executeQuery(sql);

            while (rs.next()) {
                Map<String, String> column = new HashMap<>();
                String columnName = rs.getString("column_name");
                String dataType = rs.getString("data_type");
                String maxLength = rs.getString("character_maximum_length");
                String nullable = rs.getString("is_nullable");

                column.put("name", columnName);
                column.put("type", dataType);
                column.put("maxLength", maxLength);
                column.put("nullable", nullable);
                columns.add(column);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–ª—è
                if (Arrays.asList("username", "first_name", "last_name", "order_id", "action_details")
                        .contains(columnName)) {
                    if ("bytea".equals(dataType)) {
                        log.error("üö® –ù–ê–ô–î–ï–ù–ê –ü–†–û–ë–õ–ï–ú–ê: –ü–æ–ª–µ {} –∏–º–µ–µ—Ç —Ç–∏–ø bytea –≤–º–µ—Å—Ç–æ text/varchar!", columnName);
                    } else {
                        log.info("‚úÖ –ü–æ–ª–µ {} –∏–º–µ–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø: {}", columnName, dataType);
                    }
                }
            }

            result.put("columns", columns);
            result.put("status", "success");

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ö–µ–º—ã —Ç–∞–±–ª–∏—Ü—ã: ", e);
            result.put("error", e.getMessage());
            result.put("status", "error");
        }

        return ResponseEntity.ok(result);
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ activity log
     */
    @GetMapping("/activity-log/test-query")
    public ResponseEntity<Map<String, Object>> testActivityLogQuery() {
        Map<String, Object> result = new HashMap<>();

        try {
            log.info("=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ activity log ===");

            List<UserActivityLogEntity> logs = activityLogRepository.findAll(PageRequest.of(0, 5)).getContent();
            log.info("‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ. –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {}", logs.size());

            result.put("recordsFound", logs.size());
            result.put("status", "success");
            result.put("message", "–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ");

        } catch (Exception e) {
            log.error("üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: ", e);
            result.put("error", e.getMessage());
            result.put("status", "error");
        }

        return ResponseEntity.ok(result);
    }

    // ============= –û–ë–©–ò–ï –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –ú–ï–¢–û–î–´ =============

    /**
     * –û–±—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
     */
    @GetMapping("/health")
    public ResponseEntity<Map<String, Object>> getSystemHealth() {
        log.info("üíö –ó–∞–ø—Ä–æ—Å –æ–±—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã");

        Map<String, Object> health = new HashMap<>();
        health.put("timestamp", System.currentTimeMillis());
        health.put("status", "UP");
        health.put("activeProfile", activeProfile);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        Map<String, String> components = new HashMap<>();
        components.put("application", "UP");
        components.put("telegramService", telegramBotService != null ? "UP" : "DOWN");
        components.put("springContext", applicationContext != null ? "UP" : "DOWN");
        health.put("components", components);

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        Map<String, Boolean> configStatus = new HashMap<>();
        configStatus.put("botTokenConfigured", botToken != null && !botToken.trim().isEmpty());
        configStatus.put("webhookUrlConfigured", webhookUrl != null && !webhookUrl.trim().isEmpty());
        configStatus.put("botUsernameConfigured", botUsername != null && !botUsername.trim().isEmpty());
        health.put("configuration", configStatus);

        return ResponseEntity.ok(health);
    }

    /**
     * –¢–µ—Å—Ç–æ–≤—ã–π endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
     */
    @GetMapping("/test")
    public ResponseEntity<Map<String, Object>> testEndpoint() {
        log.info("üß™ –¢–µ—Å—Ç–æ–≤—ã–π endpoint –≤—ã–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!");

        Map<String, Object> response = new HashMap<>();
        response.put("status", "OK");
        response.put("message", "–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç");
        response.put("timestamp", LocalDateTime.now());

        return ResponseEntity.ok(response);
    }

    // ============= –£–¢–ò–õ–ò–¢–ù–´–ï –ú–ï–¢–û–î–´ =============

    /**
     * –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
     */
    private String maskToken(String token) {
        if (token == null || token.trim().isEmpty()) {
            return "NOT_SET";
        }
        if (token.length() <= 8) {
            return "***";
        }
        return token.substring(0, 4) + "..." + token.substring(token.length() - 4);
    }
}