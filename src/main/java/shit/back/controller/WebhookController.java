package shit.back.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Profile;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.objects.Update;
import shit.back.service.TelegramWebhookBotService;

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;

@RestController
@Profile("production")
@RequestMapping("/webhook")
public class WebhookController {

    private static final Logger logger = LoggerFactory.getLogger(WebhookController.class);

    @Autowired
    private TelegramWebhookBotService telegramWebhookBotService;

    @PostMapping("/telegram")
    public ResponseEntity<BotApiMethod<?>> webhook(@RequestBody Update update) {
        try {
            // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–µ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö
            // –¥–∞–Ω–Ω—ã—Ö
            if (update.hasMessage()) {
                String maskedUserId = maskUserData(update.getMessage().getFrom().getId());
                String messageType = update.getMessage().hasText() ? "TEXT"
                        : update.getMessage().hasPhoto() ? "PHOTO"
                                : update.getMessage().hasDocument() ? "DOCUMENT" : "OTHER";

                logger.info("üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [–ê–ù–û–ù–ò–ú–ù–û] (ID: {}): —Ç–∏–ø={}",
                        maskedUserId, messageType);
            } else if (update.hasCallbackQuery()) {
                String maskedUserId = maskUserData(update.getCallbackQuery().getFrom().getId());
                String callbackType = update.getCallbackQuery().getData() != null ? "DATA_CALLBACK" : "GAME_CALLBACK";

                logger.info("üîò –ü–æ–ª—É—á–µ–Ω callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è [–ê–ù–û–ù–ò–ú–ù–û] (ID: {}): —Ç–∏–ø={}",
                        maskedUserId, callbackType);
            } else {
                logger.info("üì¨ –ü–æ–ª—É—á–µ–Ω webhook update ID: {} (—Ç–∏–ø: {})",
                        update.getUpdateId(), getUpdateType(update));
            }

            BotApiMethod<?> response = telegramWebhookBotService.onWebhookUpdateReceived(update);

            if (response != null) {
                logger.info("üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç: {}", response.getMethod());
                return ResponseEntity.ok(response);
            } else {
                logger.debug("‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è update: {}", update.getUpdateId());
                return ResponseEntity.ok().build();
            }

        } catch (Exception e) {
            logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook update {}: {}",
                    update.getUpdateId(), e.getMessage(), e);
            return ResponseEntity.internalServerError().build();
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private String getUpdateType(Update update) {
        if (update.hasMessage())
            return "MESSAGE";
        if (update.hasCallbackQuery())
            return "CALLBACK";
        if (update.hasInlineQuery())
            return "INLINE_QUERY";
        if (update.hasEditedMessage())
            return "EDITED_MESSAGE";
        if (update.hasChannelPost())
            return "CHANNEL_POST";
        if (update.hasEditedChannelPost())
            return "EDITED_CHANNEL_POST";
        if (update.hasShippingQuery())
            return "SHIPPING_QUERY";
        if (update.hasPreCheckoutQuery())
            return "PRE_CHECKOUT_QUERY";
        if (update.hasPoll())
            return "POLL";
        if (update.hasPollAnswer())
            return "POLL_ANSWER";
        return "UNKNOWN";
    }

    /**
     * –ê–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç SHA-256 —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–∞—Å–∫–∏—Ä–æ–≤–∫–∏ User ID
     * –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º GDPR/PDPA –ø–æ –∑–∞—â–∏—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     *
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏
     * @return –ê–Ω–æ–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ö–µ—à (–ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ SHA-256)
     */
    private String maskUserData(Long userId) {
        if (userId == null) {
            return "[–ù–ï–ò–ó–í–ï–°–¢–ù–û]";
        }

        try {
            MessageDigest digest = MessageDigest.getInstance("SHA-256");
            byte[] hash = digest.digest(userId.toString().getBytes(StandardCharsets.UTF_8));

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ hex –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –ª–æ–≥–∞—Ö
            StringBuilder hexString = new StringBuilder();
            for (int i = 0; i < Math.min(4, hash.length); i++) {
                String hex = Integer.toHexString(0xff & hash[i]);
                if (hex.length() == 1) {
                    hexString.append('0');
                }
                hexString.append(hex);
            }

            return "HASH_" + hexString.toString().toUpperCase();

        } catch (NoSuchAlgorithmException e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–æ–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", e.getMessage());
            return "[–ê–ù–û–ù–ò–ú–ù–û]";
        }
    }

    @GetMapping("/telegram/status")
    public ResponseEntity<WebhookStatus> getWebhookStatus() {
        try {
            WebhookStatus status = WebhookStatus.builder()
                    .webhookSet(telegramWebhookBotService.isWebhookSet())
                    .botStatus(telegramWebhookBotService.getBotStatus())
                    .errorMessage(telegramWebhookBotService.getErrorMessage())
                    .lastUpdate(telegramWebhookBotService.getLastUpdate())
                    .botUsername(telegramWebhookBotService.getBotUsername())
                    .webhookPath(telegramWebhookBotService.getBotPath())
                    .timestamp(LocalDateTime.now())
                    .build();

            return ResponseEntity.ok(status);

        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ webhook", e);

            WebhookStatus errorStatus = WebhookStatus.builder()
                    .webhookSet(false)
                    .botStatus("ERROR")
                    .errorMessage("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: " + e.getMessage())
                    .lastUpdate(null)
                    .botUsername("UNKNOWN")
                    .webhookPath("/webhook/telegram")
                    .timestamp(LocalDateTime.now())
                    .build();

            return ResponseEntity.ok(errorStatus);
        }
    }

    @PostMapping("/telegram/reset")
    public ResponseEntity<Map<String, String>> resetWebhook() {
        try {
            logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å webhook");

            telegramWebhookBotService.resetError();

            Map<String, String> response = new HashMap<>();
            response.put("status", "RESET_REQUESTED");
            response.put("message", "Webhook —Å–±—Ä–æ—à–µ–Ω, –ø–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∏");
            response.put("timestamp", LocalDateTime.now().toString());

            return ResponseEntity.ok(response);

        } catch (Exception e) {
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ webhook", e);

            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("status", "ERROR");
            errorResponse.put("message", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ: " + e.getMessage());
            errorResponse.put("timestamp", LocalDateTime.now().toString());

            return ResponseEntity.internalServerError().body(errorResponse);
        }
    }

    // Health check endpoint –¥–ª—è Koyeb
    @GetMapping("/health")
    public ResponseEntity<Map<String, Object>> health() {
        Map<String, Object> health = new HashMap<>();
        health.put("status", "UP");
        health.put("timestamp", LocalDateTime.now());
        health.put("webhook", Map.of(
                "configured", telegramWebhookBotService.isWebhookSet(),
                "botStatus", telegramWebhookBotService.getBotStatus()));

        return ResponseEntity.ok(health);
    }

    // Test endpoint –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ /start –∫–æ–º–∞–Ω–¥—ã
    @PostMapping("/telegram/test-start")
    public ResponseEntity<Map<String, Object>> testStartCommand() {
        try {
            logger.info("üß™ TEST: –°–∏–º—É–ª—è—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏");

            Map<String, Object> result = new HashMap<>();
            result.put("status", "TEST_INITIATED");
            result.put("timestamp", LocalDateTime.now());
            result.put("message", "–¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram");
            result.put("instructions", Map.of(
                    "step1", "–ù–∞–ø–∏—à–∏—Ç–µ /start –±–æ—Ç—É –≤ Telegram",
                    "step2", "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º üì®",
                    "step3", "–ï—Å–ª–∏ –ª–æ–≥–∏ –Ω–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è - –ø—Ä–æ–±–ª–µ–º–∞ —Å webhook URL –∏–ª–∏ —Ç–æ–∫–µ–Ω–æ–º"));
            result.put("diagnostics", Map.of(
                    "webhookSet", telegramWebhookBotService.isWebhookSet(),
                    "botStatus", telegramWebhookBotService.getBotStatus(),
                    "errorMessage", telegramWebhookBotService.getErrorMessage(),
                    "lastUpdate", telegramWebhookBotService.getLastUpdate(),
                    "botUsername", telegramWebhookBotService.getBotUsername(),
                    "webhookPath", telegramWebhookBotService.getBotPath()));

            logger.info("üìã TEST: –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ - {}", telegramWebhookBotService.getBotStatus());
            return ResponseEntity.ok(result);

        } catch (Exception e) {
            logger.error("‚ùå TEST: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", e);

            Map<String, Object> errorResult = new HashMap<>();
            errorResult.put("status", "ERROR");
            errorResult.put("timestamp", LocalDateTime.now());
            errorResult.put("error", e.getMessage());

            return ResponseEntity.internalServerError().body(errorResult);
        }
    }

    // Data class –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ webhook
    public static class WebhookStatus {
        private boolean webhookSet;
        private String botStatus;
        private String errorMessage;
        private LocalDateTime lastUpdate;
        private String botUsername;
        private String webhookPath;
        private LocalDateTime timestamp;

        // Builder pattern
        public static WebhookStatusBuilder builder() {
            return new WebhookStatusBuilder();
        }

        public static class WebhookStatusBuilder {
            private boolean webhookSet;
            private String botStatus;
            private String errorMessage;
            private LocalDateTime lastUpdate;
            private String botUsername;
            private String webhookPath;
            private LocalDateTime timestamp;

            public WebhookStatusBuilder webhookSet(boolean webhookSet) {
                this.webhookSet = webhookSet;
                return this;
            }

            public WebhookStatusBuilder botStatus(String botStatus) {
                this.botStatus = botStatus;
                return this;
            }

            public WebhookStatusBuilder errorMessage(String errorMessage) {
                this.errorMessage = errorMessage;
                return this;
            }

            public WebhookStatusBuilder lastUpdate(LocalDateTime lastUpdate) {
                this.lastUpdate = lastUpdate;
                return this;
            }

            public WebhookStatusBuilder botUsername(String botUsername) {
                this.botUsername = botUsername;
                return this;
            }

            public WebhookStatusBuilder webhookPath(String webhookPath) {
                this.webhookPath = webhookPath;
                return this;
            }

            public WebhookStatusBuilder timestamp(LocalDateTime timestamp) {
                this.timestamp = timestamp;
                return this;
            }

            public WebhookStatus build() {
                WebhookStatus status = new WebhookStatus();
                status.webhookSet = this.webhookSet;
                status.botStatus = this.botStatus;
                status.errorMessage = this.errorMessage;
                status.lastUpdate = this.lastUpdate;
                status.botUsername = this.botUsername;
                status.webhookPath = this.webhookPath;
                status.timestamp = this.timestamp;
                return status;
            }
        }

        // Getters
        public boolean isWebhookSet() {
            return webhookSet;
        }

        public String getBotStatus() {
            return botStatus;
        }

        public String getErrorMessage() {
            return errorMessage;
        }

        public LocalDateTime getLastUpdate() {
            return lastUpdate;
        }

        public String getBotUsername() {
            return botUsername;
        }

        public String getWebhookPath() {
            return webhookPath;
        }

        public LocalDateTime getTimestamp() {
            return timestamp;
        }

        // Setters
        public void setWebhookSet(boolean webhookSet) {
            this.webhookSet = webhookSet;
        }

        public void setBotStatus(String botStatus) {
            this.botStatus = botStatus;
        }

        public void setErrorMessage(String errorMessage) {
            this.errorMessage = errorMessage;
        }

        public void setLastUpdate(LocalDateTime lastUpdate) {
            this.lastUpdate = lastUpdate;
        }

        public void setBotUsername(String botUsername) {
            this.botUsername = botUsername;
        }

        public void setWebhookPath(String webhookPath) {
            this.webhookPath = webhookPath;
        }

        public void setTimestamp(LocalDateTime timestamp) {
            this.timestamp = timestamp;
        }
    }
}
