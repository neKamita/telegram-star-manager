package shit.back.domain.dualBalance.valueobjects;

/**
 * –¢–∏–ø—ã –±–∞–ª–∞–Ω—Å–æ–≤ –≤ –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ
 * 
 * BANK - –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ–ª—É—á–∞–µ–º—ã–π –æ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π)
 * MAIN - –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å (–¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —á–µ—Ä–µ–∑ Fragment API)
 */
public enum BalanceType {

    /**
     * –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     * –ü–æ–ø–æ–ª–Ω—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
     */
    BANK("–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –±–∞–ª–∞–Ω—Å", "bank", "üí≥"),

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —á–µ—Ä–µ–∑ Fragment API
     */
    MAIN("–û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å", "main", "üè¶");

    private final String displayName;
    private final String code;
    private final String emoji;

    BalanceType(String displayName, String code, String emoji) {
        this.displayName = displayName;
        this.code = code;
        this.emoji = emoji;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
     */
    public String getDisplayName() {
        return displayName;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞ —Ç–∏–ø–∞ –±–∞–ª–∞–Ω—Å–∞
     */
    public String getCode() {
        return code;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è —Ç–∏–ø–∞ –±–∞–ª–∞–Ω—Å–∞
     */
    public String getEmoji() {
        return emoji;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —Å —ç–º–æ–¥–∑–∏
     */
    public String getFullName() {
        return emoji + " " + displayName;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∏–ø –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –±–∞–ª–∞–Ω—Å–æ–º
     */
    public boolean isBank() {
        return this == BANK;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–∏–ø –æ—Å–Ω–æ–≤–Ω—ã–º –±–∞–ª–∞–Ω—Å–æ–º
     */
    public boolean isMain() {
        return this == MAIN;
    }

    /**
     * Factory method –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–ø–∞ –∏–∑ –∫–æ–¥–∞
     */
    public static BalanceType fromCode(String code) {
        if (code == null || code.trim().isEmpty()) {
            throw new IllegalArgumentException("–ö–æ–¥ —Ç–∏–ø–∞ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }

        String normalizedCode = code.trim().toLowerCase();
        for (BalanceType type : values()) {
            if (type.code.equals(normalizedCode)) {
                return type;
            }
        }

        throw new IllegalArgumentException("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–¥ —Ç–∏–ø–∞ –±–∞–ª–∞–Ω—Å–∞: " + code);
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ–¥–∞
     */
    public static boolean isValidCode(String code) {
        if (code == null || code.trim().isEmpty()) {
            return false;
        }

        String normalizedCode = code.trim().toLowerCase();
        for (BalanceType type : values()) {
            if (type.code.equals(normalizedCode)) {
                return true;
            }
        }

        return false;
    }

    @Override
    public String toString() {
        return getFullName();
    }
}