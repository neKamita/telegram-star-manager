package shit.back.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Entity
@Table(name = "orders", indexes = {
        @Index(name = "idx_orders_user_id", columnList = "user_id"),
        @Index(name = "idx_orders_status", columnList = "status"),
        @Index(name = "idx_orders_created_at", columnList = "created_at")
})
@Data
@NoArgsConstructor
public class OrderEntity {

    @Id
    @Column(name = "order_id", length = 8)
    private String orderId;

    @Column(name = "user_id", nullable = false)
    private Long userId;

    @Column(name = "username", length = 100)
    private String username;

    @Column(name = "star_package_name", length = 50, nullable = false)
    private String starPackageName;

    @Column(name = "star_count", nullable = false)
    private Integer starCount;

    @Column(name = "original_price", precision = 10, scale = 2, nullable = false)
    private BigDecimal originalPrice;

    @Column(name = "discount_percentage")
    private Integer discountPercentage;

    @Column(name = "final_amount", precision = 10, scale = 2, nullable = false)
    private BigDecimal finalAmount;

    @Enumerated(EnumType.STRING)
    @Column(name = "status", nullable = false, length = 20)
    private OrderStatus status;

    @Column(name = "payment_method", length = 50)
    private String paymentMethod;

    @Column(name = "payment_address", length = 500)
    private String paymentAddress;

    @Column(name = "telegram_payment_charge_id", length = 100)
    private String telegramPaymentChargeId;

    @Column(name = "provider_payment_charge_id", length = 100)
    private String providerPaymentChargeId;

    // === –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ë–ê–õ–ê–ù–°–û–ú ===

    @Enumerated(EnumType.STRING)
    @Column(name = "payment_source", length = 20)
    private PaymentSource paymentSource;

    @Column(name = "balance_transaction_id", length = 36)
    private String balanceTransactionId;

    @Column(name = "balance_used", precision = 10, scale = 2)
    private BigDecimal balanceUsed;

    @Column(name = "external_payment", precision = 10, scale = 2)
    private BigDecimal externalPayment;

    @Lob
    @Column(name = "notes")
    private String notes;

    @CreationTimestamp
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;

    @Column(name = "completed_at")
    private LocalDateTime completedAt;

    @Column(name = "created_by", length = 50)
    private String createdBy = "TELEGRAM_BOT";

    public enum OrderStatus {
        CREATED,
        AWAITING_PAYMENT,
        PAYMENT_RECEIVED,
        PROCESSING,
        COMPLETED,
        FAILED,
        CANCELLED,
        REFUNDED,
        // === –ù–û–í–´–ï –°–¢–ê–¢–£–°–´ –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ë–ê–õ–ê–ù–°–û–ú ===
        BALANCE_INSUFFICIENT, // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
        PARTIAL_BALANCE_PAYMENT // –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –±–∞–ª–∞–Ω—Å–æ–º
    }

    /**
     * –ò—Å—Ç–æ—á–Ω–∏–∫ –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞
     */
    public enum PaymentSource {
        BALANCE, // –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –±–∞–ª–∞–Ω—Å–æ–º
        EXTERNAL, // –í–Ω–µ—à–Ω—è—è –æ–ø–ª–∞—Ç–∞ (Telegram Stars, –∫—Ä–∏–ø—Ç–æ)
        MIXED // –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞ (–±–∞–ª–∞–Ω—Å + –≤–Ω–µ—à–Ω—è—è)
    }

    public OrderEntity(String orderId, Long userId, String username,
            String starPackageName, Integer starCount,
            BigDecimal originalPrice, Integer discountPercentage,
            BigDecimal finalAmount) {
        this.orderId = orderId;
        this.userId = userId;
        this.username = username;
        this.starPackageName = starPackageName;
        this.starCount = starCount;
        this.originalPrice = originalPrice;
        this.discountPercentage = discountPercentage;
        this.finalAmount = finalAmount;
        this.status = OrderStatus.CREATED;
    }

    public void updateStatus(OrderStatus newStatus) {
        this.status = newStatus;
        if (newStatus == OrderStatus.COMPLETED) {
            this.completedAt = LocalDateTime.now();
        }
    }

    public String getFormattedOrderId() {
        return "#" + orderId;
    }

    public String getStatusEmoji() {
        return switch (status) {
            case CREATED -> "üÜï";
            case AWAITING_PAYMENT -> "‚è≥";
            case PAYMENT_RECEIVED -> "üí∞";
            case PROCESSING -> "‚öôÔ∏è";
            case COMPLETED -> "‚úÖ";
            case FAILED -> "‚ùå";
            case CANCELLED -> "üö´";
            case REFUNDED -> "‚Ü©Ô∏è";
            case BALANCE_INSUFFICIENT -> "üí≥";
            case PARTIAL_BALANCE_PAYMENT -> "üîÑ";
        };
    }

    public BigDecimal getDiscountAmount() {
        if (discountPercentage == null || discountPercentage == 0) {
            return BigDecimal.ZERO;
        }
        return originalPrice.multiply(BigDecimal.valueOf(discountPercentage))
                .divide(BigDecimal.valueOf(100));
    }

    public boolean isPaymentPending() {
        return status == OrderStatus.CREATED || status == OrderStatus.AWAITING_PAYMENT;
    }

    public boolean isCompleted() {
        return status == OrderStatus.COMPLETED;
    }

    public boolean isCancellable() {
        return status == OrderStatus.CREATED ||
                status == OrderStatus.AWAITING_PAYMENT ||
                status == OrderStatus.PAYMENT_RECEIVED ||
                status == OrderStatus.BALANCE_INSUFFICIENT ||
                status == OrderStatus.PARTIAL_BALANCE_PAYMENT;
    }

    // === –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–ê–õ–ê–ù–°–û–ú ===

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –ª–∏ –±–∞–ª–∞–Ω—Å –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞
     */
    public boolean isBalanceUsed() {
        return paymentSource == PaymentSource.BALANCE ||
                paymentSource == PaymentSource.MIXED;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–ø–ª–∞—Ç–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–∞–ª–∞–Ω—Å–æ–≤–æ–π
     */
    public boolean isFullyBalancePaid() {
        return paymentSource == PaymentSource.BALANCE;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–ø–ª–∞—Ç–∞ —Å–º–µ—à–∞–Ω–Ω–æ–π
     */
    public boolean isMixedPayment() {
        return paymentSource == PaymentSource.MIXED;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—É–º–º—É –æ–ø–ª–∞—á–µ–Ω–Ω—É—é –±–∞–ª–∞–Ω—Å–æ–º
     */
    public BigDecimal getBalanceUsedAmount() {
        return balanceUsed != null ? balanceUsed : BigDecimal.ZERO;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å—É–º–º—É –≤–Ω–µ—à–Ω–µ–π –æ–ø–ª–∞—Ç—ã
     */
    public BigDecimal getExternalPaymentAmount() {
        return externalPayment != null ? externalPayment : BigDecimal.ZERO;
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–æ–≤–æ–π –æ–ø–ª–∞—Ç–µ
     */
    public void setBalancePaymentInfo(String transactionId, BigDecimal balanceAmount) {
        this.balanceTransactionId = transactionId;
        this.balanceUsed = balanceAmount;

        if (balanceAmount.compareTo(finalAmount) == 0) {
            // –ü–æ–ª–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –±–∞–ª–∞–Ω—Å–æ–º
            this.paymentSource = PaymentSource.BALANCE;
            this.externalPayment = BigDecimal.ZERO;
        } else if (balanceAmount.compareTo(BigDecimal.ZERO) > 0) {
            // –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –±–∞–ª–∞–Ω—Å–æ–º
            this.paymentSource = PaymentSource.MIXED;
            this.externalPayment = finalAmount.subtract(balanceAmount);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–Ω–µ—à–Ω–µ–π –æ–ø–ª–∞—Ç–µ
     */
    public void setExternalPaymentInfo(BigDecimal externalAmount) {
        if (paymentSource == PaymentSource.MIXED) {
            // –£–∂–µ –µ—Å—Ç—å –±–∞–ª–∞–Ω—Å–æ–≤–∞—è —á–∞—Å—Ç—å, –¥–æ–ø–æ–ª–Ω—è–µ–º –≤–Ω–µ—à–Ω–µ–π
            this.externalPayment = externalAmount;
        } else {
            // –ü–æ–ª–Ω–∞—è –≤–Ω–µ—à–Ω—è—è –æ–ø–ª–∞—Ç–∞
            this.paymentSource = PaymentSource.EXTERNAL;
            this.externalPayment = externalAmount;
            this.balanceUsed = BigDecimal.ZERO;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Ç—Ä–µ–±—É–µ—Ç –ª–∏ –∑–∞–∫–∞–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ–ø–ª–∞—Ç—ã
     */
    public boolean requiresAdditionalPayment() {
        BigDecimal totalPaid = getBalanceUsedAmount().add(getExternalPaymentAmount());
        return totalPaid.compareTo(finalAmount) < 0;
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –æ—Å—Ç–∞—Ç–æ–∫ –∫ –¥–æ–ø–ª–∞—Ç–µ
     */
    public BigDecimal getRemainingAmount() {
        BigDecimal totalPaid = getBalanceUsedAmount().add(getExternalPaymentAmount());
        BigDecimal remaining = finalAmount.subtract(totalPaid);
        return remaining.compareTo(BigDecimal.ZERO) > 0 ? remaining : BigDecimal.ZERO;
    }
}
