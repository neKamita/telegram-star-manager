package shit.back.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.CreationTimestamp;

import java.math.BigDecimal;
import java.time.LocalDateTime;

@Entity
@Table(name = "user_activity_logs", indexes = {
        @Index(name = "idx_activity_user_id", columnList = "user_id"),
        @Index(name = "idx_activity_timestamp", columnList = "timestamp"),
        @Index(name = "idx_activity_action_type", columnList = "action_type"),
        @Index(name = "idx_activity_is_key", columnList = "is_key_action"),
        @Index(name = "idx_activity_order_id", columnList = "order_id"),
        @Index(name = "idx_activity_log_category", columnList = "log_category"),
        @Index(name = "idx_activity_category_timestamp", columnList = "log_category, timestamp")
})
@Data
@NoArgsConstructor
public class UserActivityLogEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "user_id", nullable = false)
    private Long userId;

    @Column(name = "username", length = 100)
    private String username;

    @Column(name = "first_name", length = 100)
    private String firstName;

    @Column(name = "last_name", length = 100)
    private String lastName;

    @Enumerated(EnumType.STRING)
    @Column(name = "action_type", nullable = false, length = 30)
    private ActionType actionType;

    @Enumerated(EnumType.STRING)
    @Column(name = "log_category", nullable = false, length = 20, columnDefinition = "VARCHAR(20) DEFAULT 'APPLICATION'")
    private LogCategory logCategory = LogCategory.APPLICATION;

    @Column(name = "action_description", length = 500)
    private String actionDescription;

    @Lob
    @Column(name = "action_details")
    private String actionDetails; // JSON —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏

    @Column(name = "order_id", length = 8)
    private String orderId;

    @Column(name = "order_amount", precision = 10, scale = 2)
    private BigDecimal orderAmount;

    @Column(name = "star_count")
    private Integer starCount;

    @Column(name = "payment_method", length = 50)
    private String paymentMethod;

    @Column(name = "session_state_before", length = 30)
    private String sessionStateBefore;

    @Column(name = "session_state_after", length = 30)
    private String sessionStateAfter;

    @Column(name = "is_key_action", nullable = false)
    private Boolean isKeyAction = false;

    @CreationTimestamp
    @Column(name = "timestamp", nullable = false, updatable = false)
    private LocalDateTime timestamp;

    @Column(name = "ip_address", length = 45)
    private String ipAddress;

    @Column(name = "user_agent", length = 500)
    private String userAgent;

    public enum LogCategory {
        TELEGRAM_BOT("–¢–µ–ª–µ–≥—Ä–∞–º –ë–æ—Ç", "ü§ñ"),
        APPLICATION("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", "üíº"),
        SYSTEM("–°–∏—Å—Ç–µ–º–∞", "‚öôÔ∏è");

        private final String displayName;
        private final String icon;

        LogCategory(String displayName, String icon) {
            this.displayName = displayName;
            this.icon = icon;
        }

        public String getDisplayName() {
            return displayName;
        }

        public String getIcon() {
            return icon;
        }

        public String getIconAndName() {
            return icon + " " + displayName;
        }
    }

    public enum ActionType {
        // –ö–ª—é—á–µ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        SESSION_START("üÜï", "–ù–∞—á–∞–ª —Å–µ—Å—Å–∏—é", true, LogCategory.APPLICATION),
        PACKAGE_SELECTED("üì¶", "–í—ã–±—Ä–∞–ª –ø–∞–∫–µ—Ç", true, LogCategory.APPLICATION),
        ORDER_CREATED("üõí", "–°–æ–∑–¥–∞–ª –∑–∞–∫–∞–∑", true, LogCategory.APPLICATION),
        PAYMENT_INITIATED("üí≥", "–ù–∞—á–∞–ª –æ–ø–ª–∞—Ç—É", true, LogCategory.APPLICATION),
        PAYMENT_COMPLETED("üí∞", "–ó–∞–≤–µ—Ä—à–∏–ª –æ–ø–ª–∞—Ç—É", true, LogCategory.APPLICATION),
        ORDER_COMPLETED("‚úÖ", "–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω", true, LogCategory.APPLICATION),
        ORDER_CANCELLED("‚ùå", "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω", true, LogCategory.APPLICATION),
        PAYMENT_FAILED("üö´", "–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã", true, LogCategory.APPLICATION),

        // Telegram Bot –¥–µ–π—Å—Ç–≤–∏—è
        BOT_MESSAGE_SENT("üí¨", "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞", false, LogCategory.TELEGRAM_BOT),
        CALLBACK_RECEIVED("üîò", "–ù–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É", false, LogCategory.TELEGRAM_BOT),
        USER_INPUT_RECEIVED("‚å®Ô∏è", "–í–≤–µ–ª –¥–∞–Ω–Ω—ã–µ", false, LogCategory.TELEGRAM_BOT),

        // –û–±—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        STATE_CHANGED("üîÑ", "–ò–∑–º–µ–Ω–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ", false, LogCategory.APPLICATION),
        SESSION_EXPIRED("‚è∞", "–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞", false, LogCategory.APPLICATION),
        PACKAGE_VIEWED("üëÄ", "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –ø–∞–∫–µ—Ç", false, LogCategory.APPLICATION),
        HELP_REQUESTED("‚ùì", "–ó–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å", false, LogCategory.APPLICATION),

        // –ù–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ ActionType –¥–ª—è backend –ª–æ–≥–æ–≤
        SYSTEM_INFO("‚ÑπÔ∏è", "–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", false, LogCategory.APPLICATION),
        SYSTEM_WARNING("‚ö†Ô∏è", "–°–∏—Å—Ç–µ–º–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", true, LogCategory.APPLICATION),
        SYSTEM_ERROR("üö®", "–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞", true, LogCategory.APPLICATION),
        DATABASE_QUERY("üóÑÔ∏è", "–ó–∞–ø—Ä–æ—Å –∫ –ë–î", false, LogCategory.APPLICATION),
        API_REQUEST("üåê", "API –∑–∞–ø—Ä–æ—Å", false, LogCategory.APPLICATION),
        BACKGROUND_TASK("‚öôÔ∏è", "–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞", false, LogCategory.APPLICATION);

        private final String emoji;
        private final String description;
        private final boolean isKeyAction;
        private final LogCategory logCategory;

        ActionType(String emoji, String description, boolean isKeyAction, LogCategory logCategory) {
            this.emoji = emoji;
            this.description = description;
            this.isKeyAction = isKeyAction;
            this.logCategory = logCategory;
        }

        public String getEmoji() {
            return emoji;
        }

        public String getDescription() {
            return description;
        }

        public boolean isKeyAction() {
            return isKeyAction;
        }

        public LogCategory getLogCategory() {
            return logCategory;
        }

        public String getDisplayName() {
            return emoji + " " + description;
        }

        public String getDisplayNameWithCategory() {
            return logCategory.getIcon() + " " + emoji + " " + description;
        }
    }

    public UserActivityLogEntity(Long userId, String username, ActionType actionType, String actionDescription) {
        this.userId = userId;
        this.username = username;
        this.actionType = actionType;
        this.actionDescription = actionDescription;
        this.isKeyAction = actionType.isKeyAction();
        this.logCategory = actionType.getLogCategory(); // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    }

    public UserActivityLogEntity(Long userId, String username, String firstName, String lastName,
            ActionType actionType, String actionDescription) {
        this(userId, username, actionType, actionDescription);
        this.firstName = firstName;
        this.lastName = lastName;
    }

    public UserActivityLogEntity(Long userId, String username, ActionType actionType, String actionDescription,
            LogCategory logCategory) {
        this.userId = userId;
        this.username = username;
        this.actionType = actionType;
        this.actionDescription = actionDescription;
        this.isKeyAction = actionType.isKeyAction();
        this.logCategory = logCategory != null ? logCategory : actionType.getLogCategory();
    }

    public UserActivityLogEntity(Long userId, String username, String firstName, String lastName,
            ActionType actionType, String actionDescription, LogCategory logCategory) {
        this.userId = userId;
        this.username = username;
        this.firstName = firstName;
        this.lastName = lastName;
        this.actionType = actionType;
        this.actionDescription = actionDescription;
        this.isKeyAction = actionType.isKeyAction();
        this.logCategory = logCategory != null ? logCategory : actionType.getLogCategory();
    }

    public String getDisplayName() {
        if (firstName != null && !firstName.trim().isEmpty()) {
            String fullName = firstName.trim();
            if (lastName != null && !lastName.trim().isEmpty()) {
                fullName += " " + lastName.trim();
            }
            return fullName;
        }
        return username != null ? "@" + username : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #" + userId;
    }

    public String getFormattedTimestamp() {
        return timestamp.toLocalTime().toString().substring(0, 8); // HH:mm:ss
    }

    public String getActionIcon() {
        return actionType.getEmoji();
    }

    public String getActionDisplayName() {
        return actionType.getDisplayName();
    }

    public String getStateChangeDisplay() {
        if (sessionStateBefore != null && sessionStateAfter != null &&
                !sessionStateBefore.equals(sessionStateAfter)) {
            return sessionStateBefore + " ‚Üí " + sessionStateAfter;
        }
        return sessionStateAfter != null ? "üìç " + sessionStateAfter : "";
    }

    public String getOrderDisplayInfo() {
        if (orderId == null)
            return "";

        StringBuilder info = new StringBuilder();
        info.append("#").append(orderId);

        if (starCount != null && starCount > 0) {
            info.append(" ‚Ä¢ ").append(starCount).append("‚≠ê");
        }

        if (orderAmount != null) {
            info.append(" ‚Ä¢ $").append(orderAmount);
        }

        if (paymentMethod != null) {
            info.append(" ‚Ä¢ ").append(paymentMethod);
        }

        return info.toString();
    }

    public boolean isRecentActivity() {
        return timestamp.isAfter(LocalDateTime.now().minusMinutes(5));
    }

    public String getPriorityClass() {
        return switch (actionType) {
            case PAYMENT_COMPLETED, ORDER_COMPLETED -> "success";
            case PAYMENT_FAILED, ORDER_CANCELLED -> "danger";
            case PAYMENT_INITIATED, ORDER_CREATED -> "warning";
            case SESSION_START, PACKAGE_SELECTED -> "info";
            default -> "secondary";
        };
    }

    public boolean shouldShowInLiveFeed() {
        return isKeyAction || isRecentActivity();
    }

    // Builder pattern methods
    public UserActivityLogEntity withOrderInfo(String orderId, BigDecimal orderAmount, Integer starCount) {
        this.orderId = orderId;
        this.orderAmount = orderAmount;
        this.starCount = starCount;
        return this;
    }

    public UserActivityLogEntity withPaymentMethod(String paymentMethod) {
        this.paymentMethod = paymentMethod;
        return this;
    }

    public UserActivityLogEntity withStateChange(String before, String after) {
        this.sessionStateBefore = before;
        this.sessionStateAfter = after;
        return this;
    }

    public UserActivityLogEntity withDetails(String details) {
        this.actionDetails = details;
        return this;
    }

    public UserActivityLogEntity withNetworkInfo(String ipAddress, String userAgent) {
        this.ipAddress = ipAddress;
        this.userAgent = userAgent;
        return this;
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ª–æ–≥–æ–≤
    public UserActivityLogEntity withLogCategory(LogCategory logCategory) {
        this.logCategory = logCategory;
        return this;
    }

    public String getLogCategoryDisplay() {
        return logCategory != null ? logCategory.getIconAndName() : LogCategory.APPLICATION.getIconAndName();
    }

    public String getActionDisplayNameWithCategory() {
        return actionType.getDisplayNameWithCategory();
    }

    public boolean isTelegramBotActivity() {
        return LogCategory.TELEGRAM_BOT.equals(logCategory);
    }

    public boolean isApplicationActivity() {
        return LogCategory.APPLICATION.equals(logCategory);
    }

    public boolean isSystemActivity() {
        return LogCategory.SYSTEM.equals(logCategory);
    }
}
