package shit.back.entity;

import jakarta.persistence.*;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;

@Entity
@Table(name = "user_sessions", indexes = {
        @Index(name = "idx_user_sessions_user_id", columnList = "user_id"),
        @Index(name = "idx_user_sessions_state", columnList = "state"),
        @Index(name = "idx_user_sessions_last_activity", columnList = "last_activity"),
        @Index(name = "idx_user_sessions_active", columnList = "is_active")
})
@Data
@NoArgsConstructor
public class UserSessionEntity {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "user_id", nullable = false, unique = true)
    private Long userId;

    @Column(name = "username", length = 100)
    private String username;

    @Column(name = "first_name", length = 100)
    private String firstName;

    @Column(name = "last_name", length = 100)
    private String lastName;

    @Column(name = "language_code", length = 10)
    private String languageCode;

    @Enumerated(EnumType.STRING)
    @Column(name = "state", nullable = false, length = 30)
    private SessionState state;

    @Column(name = "selected_package_name", length = 50)
    private String selectedPackageName;

    @Column(name = "current_order_id", length = 8)
    private String currentOrderId;

    @Column(name = "last_activity", nullable = false)
    private LocalDateTime lastActivity;

    @Column(name = "is_active", nullable = false)
    private Boolean isActive = true;

    @Column(name = "total_orders", nullable = false)
    private Integer totalOrders = 0;

    @Column(name = "total_stars_purchased", nullable = false)
    private Long totalStarsPurchased = 0L;

    @Column(name = "last_order_date")
    private LocalDateTime lastOrderDate;

    @CreationTimestamp
    @Column(name = "created_at", nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @UpdateTimestamp
    @Column(name = "updated_at", nullable = false)
    private LocalDateTime updatedAt;

    @Column(name = "session_data", length = 1000)
    private String sessionData; // JSON –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

    @Column(name = "payment_type", length = 50)
    private String paymentType; // –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞

    @Column(name = "user_agent", length = 500)
    private String userAgent;

    @Column(name = "ip_address", length = 45) // IPv6 support
    private String ipAddress;

    public enum SessionState {
        IDLE,
        SELECTING_PACKAGE,
        CONFIRMING_ORDER,
        AWAITING_PAYMENT,
        PAYMENT_PROCESSING,
        COMPLETED,
        CANCELLED,
        EXPIRED,
        // === –ù–û–í–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° –ë–ê–õ–ê–ù–°–û–ú ===
        TOPPING_UP_BALANCE, // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        SELECTING_PAYMENT_TYPE, // –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–ø–ª–∞—Ç—ã (–±–∞–ª–∞–Ω—Å/–≤–Ω–µ—à–Ω—è—è)
        BALANCE_PAYMENT_PROCESSING, // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –±–∞–ª–∞–Ω—Å–æ–º
        MIXED_PAYMENT_PROCESSING, // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ—à–∞–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        ENTERING_CUSTOM_AMOUNT // –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    }

    public UserSessionEntity(Long userId, String username, String firstName, String lastName) {
        this.userId = userId;
        this.username = username;
        this.firstName = firstName;
        this.lastName = lastName;
        this.state = SessionState.IDLE;
        this.lastActivity = LocalDateTime.now();
        this.isActive = true;
    }

    public void updateActivity() {
        this.lastActivity = LocalDateTime.now();
        this.isActive = true;
    }

    public void updateState(SessionState newState) {
        this.state = newState;
        updateActivity();
    }

    public String getDisplayName() {
        if (firstName != null && !firstName.trim().isEmpty()) {
            String fullName = firstName.trim();
            if (lastName != null && !lastName.trim().isEmpty()) {
                fullName += " " + lastName.trim();
            }
            return fullName;
        }
        return username != null ? username : "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å #" + userId;
    }

    public boolean isSessionExpired(int timeoutMinutes) {
        return lastActivity.isBefore(LocalDateTime.now().minusMinutes(timeoutMinutes));
    }

    public void incrementOrderCount() {
        this.totalOrders++;
        this.lastOrderDate = LocalDateTime.now();
    }

    public void addStarsPurchased(long stars) {
        this.totalStarsPurchased += stars;
    }

    public String getActivityStatus() {
        if (!isActive)
            return "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω";

        LocalDateTime now = LocalDateTime.now();
        if (lastActivity.isAfter(now.minusMinutes(5))) {
            return "–û–Ω–ª–∞–π–Ω";
        } else if (lastActivity.isAfter(now.minusMinutes(30))) {
            return "–ù–µ–¥–∞–≤–Ω–æ –±—ã–ª";
        } else if (lastActivity.isAfter(now.minusHours(24))) {
            return "–ë—ã–ª —Å–µ–≥–æ–¥–Ω—è";
        } else {
            return "–î–∞–≤–Ω–æ –Ω–µ –±—ã–ª";
        }
    }

    public String getStateDescription() {
        return switch (state) {
            case IDLE -> "üè† –í –º–µ–Ω—é";
            case SELECTING_PACKAGE -> "üì¶ –í—ã–±–∏—Ä–∞–µ—Ç –ø–∞–∫–µ—Ç";
            case CONFIRMING_ORDER -> "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∑–∞–∫–∞–∑";
            case AWAITING_PAYMENT -> "üí≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—É";
            case PAYMENT_PROCESSING -> "‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞";
            case COMPLETED -> "‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ";
            case CANCELLED -> "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ";
            case EXPIRED -> "‚è∞ –ò—Å—Ç–µ–∫–ª–æ";
            case TOPPING_UP_BALANCE -> "üí∞ –ü–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å";
            case SELECTING_PAYMENT_TYPE -> "üí≥ –í—ã–±–∏—Ä–∞–µ—Ç —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã";
            case BALANCE_PAYMENT_PROCESSING -> "üí∏ –ü–ª–∞—Ç–µ–∂ –±–∞–ª–∞–Ω—Å–æ–º";
            case MIXED_PAYMENT_PROCESSING -> "üîÑ –°–º–µ—à–∞–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞";
            case ENTERING_CUSTOM_AMOUNT -> "‚úèÔ∏è –í–≤–æ–¥–∏—Ç —Å—É–º–º—É";
        };
    }

    public boolean canStartNewOrder() {
        return state == SessionState.IDLE ||
                state == SessionState.COMPLETED ||
                state == SessionState.CANCELLED ||
                state == SessionState.EXPIRED;
    }

    public void deactivate() {
        this.isActive = false;
        this.state = SessionState.EXPIRED;
    }
}
