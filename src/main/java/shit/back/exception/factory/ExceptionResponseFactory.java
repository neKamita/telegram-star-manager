package shit.back.exception.factory;

import shit.back.exception.unified.ErrorResponse;
import shit.back.exception.unified.ExceptionContext;
import shit.back.exception.registry.ErrorCodeRegistry;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.WebRequest;

import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

/**
 * –§–∞–±—Ä–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –æ–± –æ—à–∏–±–∫–∞—Ö
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
 * 
 * @author TelegramStarManager - Stage 3 Refactoring
 * @since Exception Unification Architecture
 */
@Component
public class ExceptionResponseFactory {

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ ErrorResponse –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–¥–∞ –æ—à–∏–±–∫–∏
     */
    public ErrorResponse createFromErrorCode(String errorCode, WebRequest request) {
        return createFromErrorCode(errorCode, null, request);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ ErrorResponse –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–¥–∞ –æ—à–∏–±–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
     */
    public ErrorResponse createFromErrorCode(String errorCode, String additionalDetails, WebRequest request) {
        ErrorCodeRegistry.ErrorCodeDefinition definition = ErrorCodeRegistry.getErrorDefinition(errorCode)
                .orElse(createUnknownErrorDefinition(errorCode));

        String traceId = generateTraceId();

        ErrorResponse.ErrorDetails errorDetails = new ErrorResponse.ErrorDetails();
        errorDetails.setCode(errorCode);
        errorDetails.setMessage(definition.getUserMessage());
        errorDetails.setDetails(additionalDetails);
        errorDetails.setTimestamp(LocalDateTime.now());
        errorDetails.setTraceId(traceId);
        errorDetails.setSeverity(definition.getSeverity().name());
        errorDetails.setActionRequired(definition.getActionRequired());
        errorDetails.setSupportInfo(generateSupportInfo(traceId, definition.getSeverity()));

        ErrorResponse response = new ErrorResponse();
        response.setError(errorDetails);
        response.setPath(extractRequestPath(request));
        response.setMethod(extractRequestMethod(request));

        return response;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ ErrorResponse –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
     */
    public ErrorResponse createFromContext(ExceptionContext context, String errorCode, String message) {
        ErrorCodeRegistry.ErrorCodeDefinition definition = ErrorCodeRegistry.getErrorDefinition(errorCode)
                .orElse(createUnknownErrorDefinition(errorCode));

        ErrorResponse.ErrorDetails errorDetails = new ErrorResponse.ErrorDetails();
        errorDetails.setCode(errorCode);
        errorDetails.setMessage(message != null ? message : definition.getUserMessage());
        errorDetails.setTimestamp(context.getTimestamp());
        errorDetails.setTraceId(context.getTraceId());
        errorDetails.setSeverity(context.getSeverity().name());
        errorDetails.setActionRequired(definition.getActionRequired());
        errorDetails.setSupportInfo(generateSupportInfo(context.getTraceId(), context.getSeverity()));

        // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if (!context.getAdditionalData().isEmpty()) {
            errorDetails.setMetadata(new HashMap<>(context.getAdditionalData()));
        }

        ErrorResponse response = new ErrorResponse();
        response.setError(errorDetails);
        response.setPath(context.getRequestPath());
        response.setMethod(context.getHttpMethod());

        return response;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ ErrorResponse –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    public ErrorResponse createValidationErrorResponse(Map<String, String> validationErrors, WebRequest request) {
        String traceId = generateTraceId();
        String errorCode = "VAL_001";

        ErrorResponse.ErrorDetails errorDetails = new ErrorResponse.ErrorDetails();
        errorDetails.setCode(errorCode);
        errorDetails.setMessage("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö");
        errorDetails.setTimestamp(LocalDateTime.now());
        errorDetails.setTraceId(traceId);
        errorDetails.setSeverity("LOW");
        errorDetails.setActionRequired("–ò—Å–ø—Ä–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É");
        errorDetails.setSupportInfo(generateSupportInfo(traceId, ExceptionContext.SeverityLevel.LOW));

        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        Map<String, Object> metadata = new HashMap<>();
        metadata.put("validationErrors", validationErrors);
        metadata.put("invalidFieldsCount", validationErrors.size());
        metadata.put("invalidFields", validationErrors.keySet());
        errorDetails.setMetadata(metadata);

        ErrorResponse response = new ErrorResponse();
        response.setError(errorDetails);
        response.setPath(extractRequestPath(request));
        response.setMethod(extractRequestMethod(request));

        return response;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ ErrorResponse –¥–ª—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
     */
    public ErrorResponse createGenericErrorResponse(Throwable throwable, WebRequest request) {
        String traceId = generateTraceId();
        String errorCode = "SYS_001";

        ErrorResponse.ErrorDetails errorDetails = new ErrorResponse.ErrorDetails();
        errorDetails.setCode(errorCode);
        errorDetails.setMessage("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        errorDetails.setTimestamp(LocalDateTime.now());
        errorDetails.setTraceId(traceId);
        errorDetails.setSeverity("CRITICAL");
        errorDetails.setActionRequired("–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏");
        errorDetails.setSupportInfo(generateCriticalSupportInfo(traceId));

        // –î–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –æ—à–∏–±–æ–∫ –¥–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        Map<String, Object> metadata = new HashMap<>();
        metadata.put("exceptionType", throwable.getClass().getSimpleName());
        metadata.put("hasMessage", throwable.getMessage() != null);
        errorDetails.setMetadata(metadata);

        ErrorResponse response = new ErrorResponse();
        response.setError(errorDetails);
        response.setPath(extractRequestPath(request));
        response.setMethod(extractRequestMethod(request));

        return response;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ ErrorResponse –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ HTTP —Å—Ç–∞—Ç—É—Å–∞
     */
    public ErrorResponse createForHttpStatus(HttpStatus status, String message, WebRequest request) {
        String traceId = generateTraceId();
        String errorCode = determineErrorCodeByStatus(status);

        ErrorResponse.ErrorDetails errorDetails = new ErrorResponse.ErrorDetails();
        errorDetails.setCode(errorCode);
        errorDetails.setMessage(message != null ? message : getDefaultMessageForStatus(status));
        errorDetails.setTimestamp(LocalDateTime.now());
        errorDetails.setTraceId(traceId);
        errorDetails.setSeverity(determineSeverityByStatus(status));
        errorDetails.setActionRequired(getActionRequiredForStatus(status));
        errorDetails.setSupportInfo(generateSupportInfo(traceId,
                ExceptionContext.SeverityLevel.valueOf(determineSeverityByStatus(status))));

        ErrorResponse response = new ErrorResponse();
        response.setError(errorDetails);
        response.setPath(extractRequestPath(request));
        response.setMethod(extractRequestMethod(request));

        return response;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ ErrorResponse —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
     */
    public ErrorResponse createSimple(String code, String message, String traceId) {
        ErrorResponse.ErrorDetails errorDetails = new ErrorResponse.ErrorDetails();
        errorDetails.setCode(code);
        errorDetails.setMessage(message);
        errorDetails.setTraceId(traceId != null ? traceId : generateTraceId());
        errorDetails.setTimestamp(LocalDateTime.now());

        ErrorResponse response = new ErrorResponse();
        response.setError(errorDetails);

        return response;
    }

    // === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ===

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ trace ID
     */
    private String generateTraceId() {
        return "TRC-" + UUID.randomUUID().toString().substring(0, 12).toUpperCase();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –æ—à–∏–±–∫–∏
     */
    private ErrorCodeRegistry.ErrorCodeDefinition createUnknownErrorDefinition(String code) {
        return new ErrorCodeRegistry.ErrorCodeDefinition(
                code != null ? code : "SYS_003",
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞",
                "Unknown error",
                HttpStatus.INTERNAL_SERVER_ERROR,
                ExceptionContext.ExceptionCategory.UNKNOWN,
                ExceptionContext.SeverityLevel.MEDIUM,
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏");
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
     */
    private String generateSupportInfo(String traceId, ExceptionContext.SeverityLevel severity) {
        return switch (severity) {
            case CRITICAL ->
                String.format("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê! –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å ID: %s", traceId);
            case HIGH -> String.format("‚ö†Ô∏è –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å ID: %s", traceId);
            case MEDIUM -> String.format("‚ÑπÔ∏è –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–∞–µ—Ç—Å—è, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å ID: %s", traceId);
            case LOW -> String.format("üìù –°–ø—Ä–∞–≤–æ—á–Ω—ã–π ID –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: %s", traceId);
        };
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
     */
    private String generateCriticalSupportInfo(String traceId) {
        return String.format("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –°–ò–°–¢–ï–ú–ù–ê–Ø –û–®–ò–ë–ö–ê! " +
                "–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–æ–æ–±—â–∏—Ç–µ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É ID: %s", traceId);
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
     */
    private String extractRequestPath(WebRequest request) {
        try {
            return request.getDescription(false).replace("uri=", "");
        } catch (Exception e) {
            return "unknown";
        }
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
     */
    private String extractRequestMethod(WebRequest request) {
        try {
            // –ü–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–ª–∏ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            String method = request.getHeader("X-HTTP-Method-Override");
            if (method != null) {
                return method;
            }

            // –î–ª—è HTTP servlet requests –º–æ–∂–µ–º –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ Cast
            return "HTTP"; // Fallback
        } catch (Exception e) {
            return "UNKNOWN";
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–∞ –æ—à–∏–±–∫–∏ –ø–æ HTTP —Å—Ç–∞—Ç—É—Å—É
     */
    private String determineErrorCodeByStatus(HttpStatus status) {
        return switch (status) {
            case BAD_REQUEST -> "VAL_001";
            case UNAUTHORIZED -> "SEC_002";
            case FORBIDDEN -> "SEC_001";
            case NOT_FOUND -> "SYS_002";
            case CONFLICT -> "BAL_005";
            case TOO_MANY_REQUESTS -> "SEC_004";
            case INTERNAL_SERVER_ERROR -> "SYS_001";
            case BAD_GATEWAY -> "EXT_001";
            case SERVICE_UNAVAILABLE -> "SYS_002";
            case GATEWAY_TIMEOUT -> "EXT_002";
            default -> "SYS_003";
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è HTTP —Å—Ç–∞—Ç—É—Å–∞
     */
    private String getDefaultMessageForStatus(HttpStatus status) {
        return switch (status) {
            case BAD_REQUEST -> "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å";
            case UNAUTHORIZED -> "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è";
            case FORBIDDEN -> "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω";
            case NOT_FOUND -> "–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω";
            case CONFLICT -> "–ö–æ–Ω—Ñ–ª–∏–∫—Ç –¥–∞–Ω–Ω—ã—Ö";
            case TOO_MANY_REQUESTS -> "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤";
            case INTERNAL_SERVER_ERROR -> "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞";
            case BAD_GATEWAY -> "–û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞";
            case SERVICE_UNAVAILABLE -> "–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω";
            case GATEWAY_TIMEOUT -> "–¢–∞–π–º–∞—É—Ç —Å–µ—Ä–≤–∏—Å–∞";
            default -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";
        };
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –ø–æ HTTP —Å—Ç–∞—Ç—É—Å—É
     */
    private String determineSeverityByStatus(HttpStatus status) {
        return switch (status) {
            case BAD_REQUEST, NOT_FOUND -> "LOW";
            case UNAUTHORIZED, FORBIDDEN, CONFLICT, TOO_MANY_REQUESTS -> "MEDIUM";
            case BAD_GATEWAY, SERVICE_UNAVAILABLE, GATEWAY_TIMEOUT -> "HIGH";
            case INTERNAL_SERVER_ERROR -> "CRITICAL";
            default -> "MEDIUM";
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è HTTP —Å—Ç–∞—Ç—É—Å–∞
     */
    private String getActionRequiredForStatus(HttpStatus status) {
        return switch (status) {
            case BAD_REQUEST -> "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞";
            case UNAUTHORIZED -> "–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É";
            case FORBIDDEN -> "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞";
            case NOT_FOUND -> "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å URL";
            case CONFLICT -> "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é";
            case TOO_MANY_REQUESTS -> "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É";
            case INTERNAL_SERVER_ERROR -> "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É";
            case BAD_GATEWAY, SERVICE_UNAVAILABLE, GATEWAY_TIMEOUT -> "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
            default -> "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏";
        };
    }
}