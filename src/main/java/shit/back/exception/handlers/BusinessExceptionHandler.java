package shit.back.exception.handlers;

import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import shit.back.exception.core.BaseBusinessException;
import shit.back.exception.core.ValidationException;
import shit.back.exception.unified.ErrorResponse;

import java.time.LocalDateTime;
import java.util.Map;
import java.util.HashMap;

/**
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–∏–∑–Ω–µ—Å-–∏—Å–∫–ª—é—á–µ–Ω–∏–π
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * 
 * @author TelegramStarManager
 * @since Week 3-4 Refactoring
 */
@Slf4j
@ControllerAdvice
public class BusinessExceptionHandler {

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–∑–æ–≤—ã—Ö –±–∏–∑–Ω–µ—Å-–∏—Å–∫–ª—é—á–µ–Ω–∏–π
     */
    @ExceptionHandler(BaseBusinessException.class)
    public ResponseEntity<ErrorResponse> handleBaseBusinessException(
            BaseBusinessException e, WebRequest request) {

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
        logBusinessException(e, request);

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ HTTP —Å—Ç–∞—Ç—É—Å–∞
        HttpStatus httpStatus = determineHttpStatusForBusiness(e);

        // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        ErrorResponse errorResponse = ErrorResponse.builder()
                .errorId(e.getCorrelationId())
                .timestamp(e.getTimestamp())
                .status(httpStatus.value())
                .error(ErrorResponse.ErrorDetails.fromMessage("Business Logic Error"))
                .message(e.getUserFriendlyMessage())
                .path(extractRequestPath(request))
                .details(createBusinessDetails(e))
                .build();

        return ResponseEntity.status(httpStatus).body(errorResponse);
    }

    /**
     * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    @ExceptionHandler(ValidationException.class)
    public ResponseEntity<ErrorResponse> handleValidationException(
            ValidationException e, WebRequest request) {

        log.warn("üîç –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ [{}]: {} –æ—à–∏–±–æ–∫ –¥–ª—è –æ–±—ä–µ–∫—Ç–∞ '{}' | Path: {}",
                e.getCorrelationId(),
                e.getErrorCount(),
                e.getValidatedObject(),
                extractRequestPath(request));

        // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        e.getValidationErrors().forEach(error -> log.debug("   ‚ùå –ü–æ–ª–µ '{}': '{}' - {}",
                error.getField(),
                error.getInvalidValue(),
                error.getConstraint()));

        ErrorResponse errorResponse = ErrorResponse.builder()
                .errorId(e.getCorrelationId())
                .timestamp(e.getTimestamp())
                .status(HttpStatus.BAD_REQUEST.value())
                .error(ErrorResponse.ErrorDetails.fromMessage("Validation Error"))
                .message(e.getUserFriendlyMessage())
                .path(extractRequestPath(request))
                .details(createValidationDetails(e))
                .build();

        return ResponseEntity.badRequest().body(errorResponse);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∏–∑–Ω–µ—Å-–∏—Å–∫–ª—é—á–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
     */
    private void logBusinessException(BaseBusinessException e, WebRequest request) {
        String requestPath = extractRequestPath(request);

        if (e.isCritical()) {
            log.error("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ë–ò–ó–ù–ï–°-–û–®–ò–ë–ö–ê [{}]: {} | Severity: {} | Path: {} | Context: {}",
                    e.getCorrelationId(),
                    e.getMessage(),
                    e.getSeverity().getDisplayName(),
                    requestPath,
                    e.getContext());
        } else if (e.requiresImmediateAttention()) {
            log.warn("‚ö†Ô∏è –°–µ—Ä—å–µ–∑–Ω–∞—è –±–∏–∑–Ω–µ—Å-–æ—à–∏–±–∫–∞ [{}]: {} | Severity: {} | Path: {}",
                    e.getCorrelationId(),
                    e.getMessage(),
                    e.getSeverity().getDisplayName(),
                    requestPath);
        } else {
            log.info("‚ÑπÔ∏è –ë–∏–∑–Ω–µ—Å-–æ—à–∏–±–∫–∞ [{}]: {} | Severity: {} | Path: {}",
                    e.getCorrelationId(),
                    e.getMessage(),
                    e.getSeverity().getDisplayName(),
                    requestPath);
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ HTTP —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è –±–∏–∑–Ω–µ—Å-–∏—Å–∫–ª—é—á–µ–Ω–∏–π
     */
    private HttpStatus determineHttpStatusForBusiness(BaseBusinessException e) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏ –∏ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
        if (e.isCritical()) {
            return HttpStatus.INTERNAL_SERVER_ERROR;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –∫–æ–¥—É –æ—à–∏–±–∫–∏
        String errorCode = e.getErrorCode();
        if (errorCode.startsWith("VAL_")) {
            return HttpStatus.BAD_REQUEST;
        } else if (errorCode.startsWith("SEC_")) {
            return HttpStatus.FORBIDDEN;
        } else if (errorCode.startsWith("BAL_")) {
            return HttpStatus.PAYMENT_REQUIRED;
        }

        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
        return HttpStatus.BAD_REQUEST;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å-–∏—Å–∫–ª—é—á–µ–Ω–∏–π
     */
    private Map<String, Object> createBusinessDetails(BaseBusinessException e) {
        Map<String, Object> details = new HashMap<>();

        details.put("errorType", "BUSINESS_LOGIC_ERROR");
        details.put("errorCode", e.getErrorCode());
        details.put("severity", e.getSeverity().name());
        details.put("severityDisplay", e.getSeverity().getDisplayName());
        details.put("correlationId", e.getCorrelationId());
        details.put("isCritical", e.isCritical());
        details.put("requiresImmediateAttention", e.requiresImmediateAttention());
        details.put("timestamp", e.getTimestamp().toString());
        details.put("userFriendlyMessage", e.getUserFriendlyMessage());

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if (!e.getContext().isEmpty()) {
            details.put("context", e.getContext());
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        details.put("supportInfo", generateSupportInfo(e));

        return details;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
     */
    private Map<String, Object> createValidationDetails(ValidationException e) {
        Map<String, Object> details = new HashMap<>();

        details.put("errorType", "VALIDATION_ERROR");
        details.put("validationType", e.getValidationType().name());
        details.put("validationTypeDisplay", e.getValidationType().getDescription());
        details.put("validatedObject", e.getValidatedObject());
        details.put("errorCount", e.getErrorCount());
        details.put("correlationId", e.getCorrelationId());

        // –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        Map<String, Object> validationErrors = new HashMap<>();
        e.getValidationErrors().forEach(error -> {
            validationErrors.put(error.getField(), Map.of(
                    "invalidValue", error.getInvalidValue(),
                    "constraint", error.getConstraint()));
        });
        details.put("validationErrors", validationErrors);

        // –°–ø–∏—Å–æ–∫ –ø–æ–ª–µ–π —Å –æ—à–∏–±–∫–∞–º–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        details.put("invalidFields", e.getValidationErrors().stream()
                .map(ValidationException.ValidationError::getField)
                .distinct()
                .toList());

        details.put("userFriendlyMessage", e.getUserFriendlyMessage());
        details.put("actionRequired", "–ò—Å–ø—Ä–∞–≤—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É");

        return details;
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
     */
    private String generateSupportInfo(BaseBusinessException e) {
        if (e.isCritical()) {
            return String.format("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞! –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π. ID: %s",
                    e.getCorrelationId());
        } else if (e.requiresImmediateAttention()) {
            return String.format("–ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–∏ –æ—à–∏–±–∫–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É. ID: %s",
                    e.getCorrelationId());
        } else {
            return String.format("ID –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: %s", e.getCorrelationId());
        }
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
     */
    private String extractRequestPath(WebRequest request) {
        try {
            return request.getDescription(false).replace("uri=", "");
        } catch (Exception e) {
            log.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞: {}", e.getMessage());
            return "unknown";
        }
    }
}