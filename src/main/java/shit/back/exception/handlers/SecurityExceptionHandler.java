package shit.back.exception.handlers;

import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import shit.back.exception.core.SecurityException;
import shit.back.exception.unified.ErrorResponse;

import java.time.LocalDateTime;
import java.util.Map;
import java.util.UUID;

/**
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—Å–µ—Ö security-related –æ—à–∏–±–æ–∫
 * 
 * @author TelegramStarManager
 * @since Week 3-4 Refactoring
 */
@Slf4j
@ControllerAdvice
public class SecurityExceptionHandler {

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    @ExceptionHandler(SecurityException.class)
    public ResponseEntity<ErrorResponse> handleSecurityException(
            SecurityException e, WebRequest request) {

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å correlation ID
        logSecurityEvent(e, request);

        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ HTTP —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
        HttpStatus httpStatus = determineHttpStatus(e.getViolationType());

        // –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        ErrorResponse errorResponse = ErrorResponse.builder()
                .errorId(e.getCorrelationId())
                .timestamp(e.getTimestamp())
                .status(httpStatus.value())
                .error(ErrorResponse.ErrorDetails.fromMessage("Security Violation"))
                .message(e.getUserFriendlyMessage())
                .path(extractRequestPath(request))
                .details(createSecurityDetails(e))
                .build();

        return ResponseEntity.status(httpStatus).body(errorResponse);
    }

    /**
     * –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    private void logSecurityEvent(SecurityException e, WebRequest request) {
        String logLevel = e.isCritical() ? "ERROR" : "WARN";
        String requestPath = extractRequestPath(request);

        if (e.isCritical()) {
            log.error(
                    "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ù–ê–†–£–®–ï–ù–ò–ï –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò [{}]: {} | User: {} | Resource: {} | Action: {} | Path: {} | Details: {}",
                    e.getCorrelationId(),
                    e.getViolationType().getDescription(),
                    e.getUserId(),
                    e.getResourceId(),
                    e.getAction(),
                    requestPath,
                    e.getMessage());
        } else {
            log.warn("üîí –ù–∞—Ä—É—à–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ [{}]: {} | User: {} | Resource: {} | Action: {} | Path: {}",
                    e.getCorrelationId(),
                    e.getViolationType().getDescription(),
                    e.getUserId(),
                    e.getResourceId(),
                    e.getAction(),
                    requestPath);
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞—É–¥–∏—Ç–∞
        if (!e.getContext().isEmpty()) {
            log.info("üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ [{}]: {}", e.getCorrelationId(), e.getContext());
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ HTTP —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    private HttpStatus determineHttpStatus(SecurityException.SecurityViolationType violationType) {
        return switch (violationType) {
            case UNAUTHORIZED_ACCESS -> HttpStatus.UNAUTHORIZED;
            case INSUFFICIENT_PERMISSIONS, ADMIN_ACCESS_DENIED -> HttpStatus.FORBIDDEN;
            case INVALID_TOKEN -> HttpStatus.UNAUTHORIZED;
            case RATE_LIMIT_EXCEEDED -> HttpStatus.TOO_MANY_REQUESTS;
            case SUSPICIOUS_ACTIVITY -> HttpStatus.FORBIDDEN;
            case SECURITY_LIMIT_EXCEEDED -> HttpStatus.TOO_MANY_REQUESTS;
        };
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –æ—à–∏–±–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    private Map<String, Object> createSecurityDetails(SecurityException e) {
        return Map.of(
                "errorType", "SECURITY_VIOLATION",
                "violationType", e.getViolationType().name(),
                "violationCode", e.getViolationType().getCode(),
                "severity", e.getSeverity().name(),
                "correlationId", e.getCorrelationId(),
                "requiresImmediateAttention", e.requiresImmediateAttention(),
                "userFriendlyMessage", e.getUserFriendlyMessage(),
                "actionRequired", generateActionRequired(e.getViolationType()),
                "supportInfo", "–ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å ID: " + e.getCorrelationId());
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –¥–µ–π—Å—Ç–≤–∏—è–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private String generateActionRequired(SecurityException.SecurityViolationType violationType) {
        return switch (violationType) {
            case UNAUTHORIZED_ACCESS -> "–í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏";
            case INSUFFICIENT_PERMISSIONS -> "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø—Ä–∞–≤";
            case INVALID_TOKEN -> "–ü–µ—Ä–µ–ª–æ–≥–∏–Ω—å—Ç–µ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ";
            case RATE_LIMIT_EXCEEDED -> "–ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π";
            case SUSPICIOUS_ACTIVITY -> "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞";
            case SECURITY_LIMIT_EXCEEDED -> "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É";
            case ADMIN_ACCESS_DENIED -> "–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º";
        };
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
     */
    private String extractRequestPath(WebRequest request) {
        try {
            return request.getDescription(false).replace("uri=", "");
        } catch (Exception e) {
            log.debug("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –ø—É—Ç—å –∑–∞–ø—Ä–æ—Å–∞: {}", e.getMessage());
            return "unknown";
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è —Ç—Ä–µ–∫–∏–Ω–≥–∞ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π)
     */
    private String generateSecurityEventId() {
        return "SEC_" + UUID.randomUUID().toString().substring(0, 8).toUpperCase();
    }
}