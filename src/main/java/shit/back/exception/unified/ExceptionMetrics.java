package shit.back.exception.unified;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import org.springframework.web.context.request.WebRequest;

import java.time.LocalDateTime;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
 * 
 * @author TelegramStarManager - Stage 3 Refactoring
 * @since Exception Unification Architecture
 */
@Component
public class ExceptionMetrics {

    private static final Logger log = LoggerFactory.getLogger(ExceptionMetrics.class);

    // –°—á–µ—Ç—á–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø–æ —Ç–∏–ø–∞–º
    private final Map<String, AtomicLong> exceptionCounts = new ConcurrentHashMap<>();

    // –°—á–µ—Ç—á–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –ø–æ –ø—É—Ç—è–º
    private final Map<String, AtomicLong> pathExceptionCounts = new ConcurrentHashMap<>();

    // –û–±—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏
    private final AtomicLong totalExceptions = new AtomicLong(0);
    private final AtomicLong criticalExceptions = new AtomicLong(0);
    private final AtomicLong validationExceptions = new AtomicLong(0);
    private final AtomicLong securityExceptions = new AtomicLong(0);
    private final AtomicLong businessExceptions = new AtomicLong(0);

    // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
    private volatile LocalDateTime lastExceptionTime = LocalDateTime.now();
    private volatile LocalDateTime lastCriticalExceptionTime;

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
     */
    public void recordException(String errorCode, WebRequest request) {
        try {
            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ–±—â–∏–π —Å—á–µ—Ç—á–∏–∫
            totalExceptions.incrementAndGet();

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ —Ç–∏–ø—É –æ—à–∏–±–∫–∏
            exceptionCounts.computeIfAbsent(errorCode, k -> new AtomicLong(0))
                    .incrementAndGet();

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ –ø—É—Ç–∏
            String path = extractPath(request);
            pathExceptionCounts.computeIfAbsent(path, k -> new AtomicLong(0))
                    .incrementAndGet();

            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            lastExceptionTime = LocalDateTime.now();

            // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            categorizeException(errorCode);

            // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ 100-–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            if (totalExceptions.get() % 100 == 0) {
                log.info("üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {} –∏—Å–∫–ª—é—á–µ–Ω–∏–π. –ü–æ—Å–ª–µ–¥–Ω–µ–µ: {} –Ω–∞ –ø—É—Ç–∏ {}",
                        totalExceptions.get(), errorCode, path);
            }

        } catch (Exception e) {
            // –ù–µ –¥–æ–ª–∂–Ω—ã –ø–∞–¥–∞—Ç—å –ø—Ä–∏ —Å–±–æ—Ä–µ –º–µ—Ç—Ä–∏–∫
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –º–µ—Ç—Ä–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {}", e.getMessage());
        }
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
     */
    public void recordCriticalError() {
        try {
            criticalExceptions.incrementAndGet();
            lastCriticalExceptionTime = LocalDateTime.now();

            log.warn("üö® –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ. –í—Å–µ–≥–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: {}",
                    criticalExceptions.get());
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏: {}", e.getMessage());
        }
    }

    /**
     * –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è –ø–æ –∫–æ–¥—É
     */
    private void categorizeException(String errorCode) {
        if (errorCode == null)
            return;

        if (errorCode.startsWith("VAL_")) {
            validationExceptions.incrementAndGet();
        } else if (errorCode.startsWith("SEC_")) {
            securityExceptions.incrementAndGet();
        } else if (errorCode.startsWith("BAL_") || errorCode.startsWith("TXN_")) {
            businessExceptions.incrementAndGet();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    public Map<String, Object> getOverallStatistics() {
        return Map.of(
                "totalExceptions", totalExceptions.get(),
                "criticalExceptions", criticalExceptions.get(),
                "validationExceptions", validationExceptions.get(),
                "securityExceptions", securityExceptions.get(),
                "businessExceptions", businessExceptions.get(),
                "lastExceptionTime", lastExceptionTime.toString(),
                "lastCriticalExceptionTime",
                lastCriticalExceptionTime != null ? lastCriticalExceptionTime.toString() : "none",
                "uniqueErrorCodes", exceptionCounts.size(),
                "uniquePaths", pathExceptionCounts.size());
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –æ—à–∏–±–æ–∫ –ø–æ —á–∞—Å—Ç–æ—Ç–µ
     */
    public Map<String, Long> getTopErrorCodes(int limit) {
        return exceptionCounts.entrySet().stream()
                .sorted((e1, e2) -> Long.compare(e2.getValue().get(), e1.getValue().get()))
                .limit(limit)
                .collect(java.util.stream.Collectors.toMap(
                        Map.Entry::getKey,
                        e -> e.getValue().get(),
                        (e1, e2) -> e1,
                        java.util.LinkedHashMap::new));
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø –ø—É—Ç–µ–π —Å –æ—à–∏–±–∫–∞–º–∏
     */
    public Map<String, Long> getTopErrorPaths(int limit) {
        return pathExceptionCounts.entrySet().stream()
                .sorted((e1, e2) -> Long.compare(e2.getValue().get(), e1.getValue().get()))
                .limit(limit)
                .collect(java.util.stream.Collectors.toMap(
                        Map.Entry::getKey,
                        e -> e.getValue().get(),
                        (e1, e2) -> e1,
                        java.util.LinkedHashMap::new));
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø—É –æ—à–∏–±–∫–∏
     */
    public Map<String, Object> getDetailedStatistics(String errorCode) {
        AtomicLong count = exceptionCounts.get(errorCode);
        if (count == null) {
            return Map.of("found", false);
        }

        double percentage = totalExceptions.get() > 0 ? (count.get() * 100.0) / totalExceptions.get() : 0.0;

        return Map.of(
                "found", true,
                "count", count.get(),
                "percentage", String.format("%.2f%%", percentage),
                "totalExceptions", totalExceptions.get());
    }

    /**
     * –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    public void resetStatistics() {
        log.info("üìä –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–∏–π. –ë—ã–ª–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {} –∏—Å–∫–ª—é—á–µ–Ω–∏–π",
                totalExceptions.get());

        exceptionCounts.clear();
        pathExceptionCounts.clear();
        totalExceptions.set(0);
        criticalExceptions.set(0);
        validationExceptions.set(0);
        securityExceptions.set(0);
        businessExceptions.set(0);
        lastExceptionTime = LocalDateTime.now();
        lastCriticalExceptionTime = null;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ—Ç—Ä–∏–∫
     */
    public Map<String, Object> getHealthStatus() {
        long total = totalExceptions.get();
        long critical = criticalExceptions.get();

        String status;
        if (critical > 10) {
            status = "CRITICAL";
        } else if (critical > 5) {
            status = "WARNING";
        } else if (total > 1000) {
            status = "HIGH_LOAD";
        } else {
            status = "HEALTHY";
        }

        return Map.of(
                "status", status,
                "totalExceptions", total,
                "criticalExceptions", critical,
                "criticalPercentage", total > 0 ? (critical * 100.0) / total : 0.0,
                "lastActivity", lastExceptionTime.toString());
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
     */
    public Map<String, Object> getFullReport() {
        return Map.of(
                "overview", getOverallStatistics(),
                "health", getHealthStatus(),
                "topErrors", getTopErrorCodes(10),
                "topPaths", getTopErrorPaths(10),
                "reportTime", LocalDateTime.now().toString());
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
     */
    private String extractPath(WebRequest request) {
        try {
            String description = request.getDescription(false);
            return description.replace("uri=", "");
        } catch (Exception e) {
            return "unknown";
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    public void logPeriodicStatistics() {
        try {
            if (totalExceptions.get() > 0) {
                log.info("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: –≤—Å–µ–≥–æ={}, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö={}, –≤–∞–ª–∏–¥–∞—Ü–∏–∏={}, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏={}, –±–∏–∑–Ω–µ—Å={}",
                        totalExceptions.get(),
                        criticalExceptions.get(),
                        validationExceptions.get(),
                        securityExceptions.get(),
                        businessExceptions.get());

                // –¢–æ–ø-3 —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö –æ—à–∏–±–æ–∫
                Map<String, Long> topErrors = getTopErrorCodes(3);
                if (!topErrors.isEmpty()) {
                    log.info("üîù –¢–æ–ø –æ—à–∏–±–æ–∫: {}", topErrors);
                }
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {}", e.getMessage());
        }
    }
}