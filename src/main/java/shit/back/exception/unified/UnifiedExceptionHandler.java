package shit.back.exception.unified;

import shit.back.exception.factory.ExceptionResponseFactory;
import shit.back.exception.mapping.ExceptionMappingStrategy;
import shit.back.exception.registry.ErrorCodeRegistry;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.annotation.Order;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
 * –ó–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
 * –æ—à–∏–±–æ–∫
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–∞–ø–ø–∏–Ω–≥–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
 * –∏ —Ñ–∞–±—Ä–∏–∫—É –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö ErrorResponse
 * 
 * @author TelegramStarManager - Stage 3 Refactoring
 * @since Exception Unification Architecture
 */
@ControllerAdvice
@Order(1) // –í—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–æ –¥—Ä—É–≥–∏—Ö handlers
public class UnifiedExceptionHandler {

    private static final Logger log = LoggerFactory.getLogger(UnifiedExceptionHandler.class);

    private final ExceptionResponseFactory responseFactory;
    private final List<ExceptionMappingStrategy> mappingStrategies;
    private final ExceptionMetrics metrics;

    @Autowired
    public UnifiedExceptionHandler(
            ExceptionResponseFactory responseFactory,
            List<ExceptionMappingStrategy> mappingStrategies,
            ExceptionMetrics metrics) {
        this.responseFactory = responseFactory;

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (–º–µ–Ω—å—à–µ —á–∏—Å–ª–æ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        this.mappingStrategies = mappingStrategies.stream()
                .sorted((s1, s2) -> Integer.compare(s1.getPriority(), s2.getPriority()))
                .toList();

        this.metrics = metrics;

        log.info("üîß –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å {} —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º–∏",
                mappingStrategies.size());
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Spring Boot
     */
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<ErrorResponse> handleValidationException(
            MethodArgumentNotValidException ex, WebRequest request) {

        log.warn("üîç –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {} –æ—à–∏–±–æ–∫ –≤ –∑–∞–ø—Ä–æ—Å–µ {}",
                ex.getBindingResult().getErrorCount(),
                extractRequestPath(request));

        // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        Map<String, String> validationErrors = new HashMap<>();
        ex.getBindingResult().getAllErrors().forEach(error -> {
            String fieldName = ((FieldError) error).getField();
            String errorMessage = error.getDefaultMessage();
            validationErrors.put(fieldName, errorMessage);
        });

        // –°–æ–∑–¥–∞–µ–º response —á–µ—Ä–µ–∑ —Ñ–∞–±—Ä–∏–∫—É
        ErrorResponse response = responseFactory.createValidationErrorResponse(validationErrors, request);

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
        metrics.recordException("VALIDATION_ERROR", request);

        // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        validationErrors.forEach((field, message) -> log.debug("   ‚ùå –ü–æ–ª–µ '{}': {}", field, message));

        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ IllegalArgumentException
     */
    @ExceptionHandler(IllegalArgumentException.class)
    public ResponseEntity<ErrorResponse> handleIllegalArgumentException(
            IllegalArgumentException ex, WebRequest request) {

        log.warn("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: {} | Path: {}",
                ex.getMessage(), extractRequestPath(request));

        ErrorResponse response = responseFactory.createFromErrorCode("VAL_003",
                ex.getMessage(), request);

        metrics.recordException("ILLEGAL_ARGUMENT", request);

        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
    }

    /**
     * –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ - –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º
     */
    @ExceptionHandler(Exception.class)
    public ResponseEntity<ErrorResponse> handleGenericException(
            Exception ex, WebRequest request) {

        String requestPath = extractRequestPath(request);

        try {
            // –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            Optional<ExceptionMappingStrategy> strategy = findStrategy(ex);

            if (strategy.isPresent()) {
                log.debug("üéØ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è {} –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è {}",
                        strategy.get().getClass().getSimpleName(),
                        ex.getClass().getSimpleName());

                ErrorResponse response = strategy.get().mapException(ex, request);
                HttpStatus status = ErrorCodeRegistry.getHttpStatus(
                        strategy.get().determineErrorCode(ex));

                // –õ–æ–≥–∏—Ä—É–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç–∏
                logException(ex, strategy.get().createContext(ex, request), requestPath);

                metrics.recordException(strategy.get().determineErrorCode(ex), request);

                return ResponseEntity.status(status).body(response);
            } else {
                // Fallback –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
                return handleUnknownException(ex, request);
            }

        } catch (Exception handlingException) {
            // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Å–∞–º–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
            log.error("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π! " +
                    "–ò—Å—Ö–æ–¥–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {} | –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {}",
                    ex.getClass().getSimpleName(),
                    handlingException.getMessage(), handlingException);

            return handleCriticalHandlerError(ex, handlingException, request);
        }
    }

    /**
     * –ü–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è
     */
    private Optional<ExceptionMappingStrategy> findStrategy(Throwable exception) {
        return mappingStrategies.stream()
                .filter(strategy -> strategy.canHandle(exception))
                .findFirst();
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
     */
    private ResponseEntity<ErrorResponse> handleUnknownException(Exception ex, WebRequest request) {
        String requestPath = extractRequestPath(request);

        log.error("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ: {} | Message: {} | Path: {}",
                ex.getClass().getSimpleName(), ex.getMessage(), requestPath, ex);

        ErrorResponse response = responseFactory.createGenericErrorResponse(ex, request);
        metrics.recordException("UNKNOWN_ERROR", request);

        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –≤ —Å–∞–º–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
     */
    private ResponseEntity<ErrorResponse> handleCriticalHandlerError(
            Exception originalException, Exception handlerException, WebRequest request) {

        // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π response –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        ErrorResponse.ErrorDetails errorDetails = new ErrorResponse.ErrorDetails();
        errorDetails.setCode("SYS_001");
        errorDetails.setMessage("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞");
        errorDetails.setTimestamp(java.time.LocalDateTime.now());
        errorDetails.setTraceId("CRIT-" + java.util.UUID.randomUUID().toString().substring(0, 8));
        errorDetails.setSeverity("CRITICAL");
        errorDetails.setSupportInfo("–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å ID: " +
                errorDetails.getTraceId());

        ErrorResponse response = new ErrorResponse();
        response.setError(errorDetails);
        response.setPath(extractRequestPath(request));
        response.setMethod("UNKNOWN");

        try {
            metrics.recordCriticalError();
        } catch (Exception metricsException) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –º–µ—Ç—Ä–∏–∫ –≤ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏
        }

        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
     */
    private void logException(Exception ex, ExceptionContext context, String requestPath) {
        String contextInfo = context != null ? context.toShortString() : "NO_CONTEXT";

        switch (context != null ? context.getSeverity() : ExceptionContext.SeverityLevel.MEDIUM) {
            case CRITICAL -> log.error("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï {} | {} | Path: {} | Message: {}",
                    contextInfo, ex.getClass().getSimpleName(), requestPath, ex.getMessage(), ex);

            case HIGH -> log.error("üî¥ –°–µ—Ä—å–µ–∑–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ {} | {} | Path: {} | Message: {}",
                    contextInfo, ex.getClass().getSimpleName(), requestPath, ex.getMessage());

            case MEDIUM -> log.warn("üü° –ò—Å–∫–ª—é—á–µ–Ω–∏–µ {} | {} | Path: {} | Message: {}",
                    contextInfo, ex.getClass().getSimpleName(), requestPath, ex.getMessage());

            case LOW -> log.info("üü¢ –õ–µ–≥–∫–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ {} | {} | Path: {}",
                    contextInfo, ex.getClass().getSimpleName(), requestPath);
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è debugging
        if (context != null && log.isDebugEnabled()) {
            log.debug("üìã –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è: {}", context.toLogMap());
        }
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
     */
    private String extractRequestPath(WebRequest request) {
        try {
            return request.getDescription(false).replace("uri=", "");
        } catch (Exception e) {
            return "unknown";
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    public Map<String, Object> getHandlerStatistics() {
        return Map.of(
                "strategiesCount", mappingStrategies.size(),
                "strategies", mappingStrategies.stream()
                        .map(s -> s.getClass().getSimpleName())
                        .toList(),
                "metricsEnabled", metrics != null,
                "handlerOrder", 1);
    }
}