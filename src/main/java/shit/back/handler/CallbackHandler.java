package shit.back.handler;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.User;
import shit.back.model.UserSession;
import shit.back.model.Order;
import shit.back.model.StarPackage;
import shit.back.security.RateLimitService;
import shit.back.security.SecurityValidator;
import shit.back.service.PriceService;
import shit.back.service.UserSessionService;
import shit.back.utils.MessageUtils;

import java.util.Optional;

@Slf4j
@Component
public class CallbackHandler {
    
    @Autowired
    private UserSessionService userSessionService;
    
    @Autowired
    private PriceService priceService;
    
    @Autowired
    private SecurityValidator securityValidator;
    
    @Autowired
    private RateLimitService rateLimitService;
    
    public EditMessageText handleCallback(CallbackQuery callbackQuery) {
        String data = callbackQuery.getData();
        User user = callbackQuery.getFrom();
        Long chatId = callbackQuery.getMessage().getChatId();
        Integer messageId = callbackQuery.getMessage().getMessageId();
        
        log.info("üîò CallbackHandler: –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç {} (ID: {}): {}", 
            user.getFirstName(), user.getId(), data);
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è callback –¥–∞–Ω–Ω—ã—Ö
        SecurityValidator.ValidationResult validationResult = securityValidator.validateCallbackData(data);
        if (!validationResult.isValid()) {
            log.warn("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ callback –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", user.getId(), validationResult.getErrorMessage());
            return MessageUtils.createEditMessage(chatId, messageId, 
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start");
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        RateLimitService.RateLimitResult rateLimitResult = rateLimitService.checkUserLimit(user.getId());
        if (!rateLimitResult.isAllowed()) {
            log.warn("‚è∞ Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", user.getId(), rateLimitResult.getErrorMessage());
            return MessageUtils.createEditMessage(chatId, messageId, 
                "‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        SecurityValidator.ValidationResult usernameValidation = securityValidator.validateUsername(user.getUserName());
        if (!usernameValidation.isValid()) {
            log.warn("‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç user {}: {}", user.getId(), usernameValidation.getErrorMessage());
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        UserSession session = userSessionService.getOrCreateSession(
            user.getId(),
            securityValidator.sanitizeText(user.getUserName()),
            securityValidator.sanitizeText(user.getFirstName()),
            securityValidator.sanitizeText(user.getLastName())
        );
        
        log.info("üë§ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", session.getState());
        
        EditMessageText response = handleCallbackData(data, chatId, messageId, session);
        log.info("üìù CallbackHandler: –æ—Ç–≤–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è chatId {}", chatId);
        
        return response;
    }
    
    private EditMessageText handleCallbackData(String data, Long chatId, Integer messageId, UserSession session) {
        if (data.equals("buy_stars")) {
            return handleBuyStars(chatId, messageId, session);
        }
        
        if (data.equals("show_prices")) {
            return handleShowPrices(chatId, messageId, session);
        }
        
        if (data.equals("help")) {
            return handleHelp(chatId, messageId);
        }
        
        if (data.equals("my_orders")) {
            return handleMyOrders(chatId, messageId, session);
        }
        
        if (data.equals("back_to_main")) {
            return handleBackToMain(chatId, messageId, session);
        }
        
        if (data.startsWith("select_package_")) {
            String packageId = data.replace("select_package_", "");
            return handlePackageSelection(chatId, messageId, session, packageId);
        }
        
        if (data.startsWith("confirm_order_")) {
            String orderId = data.replace("confirm_order_", "");
            return handleOrderConfirmation(chatId, messageId, session, orderId);
        }
        
        if (data.equals("cancel_order")) {
            return handleCancelOrder(chatId, messageId, session);
        }
        
        if (data.startsWith("cancel_order_")) {
            String orderId = data.replace("cancel_order_", "");
            return handleCancelSpecificOrder(chatId, messageId, session, orderId);
        }
        
        if (data.startsWith("pay_ton_")) {
            String orderId = data.replace("pay_ton_", "");
            return handleTonPayment(chatId, messageId, session, orderId);
        }
        
        if (data.startsWith("pay_crypto_")) {
            String orderId = data.replace("pay_crypto_", "");
            return handleCryptoPayment(chatId, messageId, session, orderId);
        }
        
        if (data.startsWith("check_payment_")) {
            String orderId = data.replace("check_payment_", "");
            return handleCheckPayment(chatId, messageId, session, orderId);
        }
        
        // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
        return MessageUtils.createEditMessage(chatId, messageId, 
            "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start");
    }
    
    private EditMessageText handleBuyStars(Long chatId, Integer messageId, UserSession session) {
        userSessionService.updateSessionState(session.getUserId(), UserSession.SessionState.SELECTING_PACKAGE);
        
        String text = "üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç Telegram Stars:</b>\n\n" + 
                     MessageUtils.formatPricesMessage(priceService.getAllPackages());
        
        return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
            MessageUtils.createPackageSelectionKeyboard(priceService.getAllPackages()));
    }
    
    private EditMessageText handleShowPrices(Long chatId, Integer messageId, UserSession session) {
        String text = MessageUtils.formatPricesMessage(priceService.getAllPackages());
        return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
            MessageUtils.createPackageSelectionKeyboard(priceService.getAllPackages()));
    }
    
    private EditMessageText handleHelp(Long chatId, Integer messageId) {
        return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, 
            MessageUtils.formatHelpMessage(), MessageUtils.createHelpKeyboard());
    }
    
    private EditMessageText handleMyOrders(Long chatId, Integer messageId, UserSession session) {
        Optional<Order> activeOrder = userSessionService.getUserActiveOrder(session.getUserId());
        
        if (activeOrder.isPresent()) {
            Order order = activeOrder.get();
            String text = String.format("""
                üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>
                
                %s <b>–ó–∞–∫–∞–∑ %s</b>
                üéØ –°—Ç–∞—Ç—É—Å: %s
                ‚≠ê –ó–≤–µ–∑–¥—ã: %d
                üí∞ –°—É–º–º–∞: $%.2f
                üìÖ –°–æ–∑–¥–∞–Ω: %s
                """,
                order.getStatusEmoji(),
                order.getFormattedOrderId(),
                order.getStatus().name(),
                order.getStarPackage().getStars(),
                order.getAmount(),
                order.getCreatedAt().toLocalDate()
            );
            
            return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text, 
                MessageUtils.createMyOrdersKeyboard());
        } else {
            String text = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\nüí∞ –°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!";
            return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
                MessageUtils.createMyOrdersKeyboard());
        }
    }
    
    private EditMessageText handleBackToMain(Long chatId, Integer messageId, UserSession session) {
        userSessionService.updateSessionState(session.getUserId(), UserSession.SessionState.IDLE);
        
        String welcomeText = MessageUtils.formatWelcomeMessage(session.getDisplayName());
        return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, welcomeText,
            MessageUtils.createMainMenuKeyboard());
    }
    
    private EditMessageText handlePackageSelection(Long chatId, Integer messageId, UserSession session, String packageId) {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è package ID
        SecurityValidator.ValidationResult packageValidation = securityValidator.validatePackageId(packageId);
        if (!packageValidation.isValid()) {
            log.warn("Invalid package ID from user {}: {}", session.getUserId(), packageValidation.getErrorMessage());
            return MessageUtils.createEditMessage(chatId, messageId, 
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞.");
        }
        
        Optional<StarPackage> packageOpt = priceService.getPackageById(packageId);
        
        if (packageOpt.isPresent()) {
            StarPackage starPackage = packageOpt.get();
            userSessionService.setSelectedPackage(session.getUserId(), starPackage);
            
            // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            Order order = userSessionService.createOrder(session.getUserId());
            
            if (order != null) {
                log.info("Order created for user {}: {} stars for ${}", 
                    session.getUserId(), starPackage.getStars(), starPackage.getDiscountedPrice());
                String text = MessageUtils.formatOrderConfirmation(order);
                return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
                    MessageUtils.createOrderConfirmationKeyboard(order.getOrderId()));
            }
        }
        
        return MessageUtils.createEditMessage(chatId, messageId, 
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }
    
    private EditMessageText handleOrderConfirmation(Long chatId, Integer messageId, UserSession session, String orderId) {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è order ID
        SecurityValidator.ValidationResult orderValidation = securityValidator.validateOrderId(orderId);
        if (!orderValidation.isValid()) {
            log.warn("Invalid order ID from user {}: {}", session.getUserId(), orderValidation.getErrorMessage());
            return MessageUtils.createEditMessage(chatId, messageId, 
                "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.");
        }
        
        Optional<Order> orderOpt = userSessionService.getOrder(orderId);
        
        if (orderOpt.isPresent()) {
            Order order = orderOpt.get();
            userSessionService.updateOrderStatus(orderId, Order.OrderStatus.AWAITING_PAYMENT);
            userSessionService.updateSessionState(session.getUserId(), UserSession.SessionState.AWAITING_PAYMENT);
            
            log.info("Order confirmed for user {}: {}", session.getUserId(), orderId);
            String text = MessageUtils.formatPaymentMessage(order);
            return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
                MessageUtils.createPaymentKeyboard(orderId));
        }
        
        return MessageUtils.createEditMessage(chatId, messageId, 
            "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.");
    }
    
    private EditMessageText handleCancelOrder(Long chatId, Integer messageId, UserSession session) {
        userSessionService.clearUserSession(session.getUserId());
        
        String welcomeText = MessageUtils.formatWelcomeMessage(session.getDisplayName());
        return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, welcomeText,
            MessageUtils.createMainMenuKeyboard());
    }
    
    private EditMessageText handleCancelSpecificOrder(Long chatId, Integer messageId, UserSession session, String orderId) {
        userSessionService.updateOrderStatus(orderId, Order.OrderStatus.CANCELLED);
        userSessionService.clearUserSession(session.getUserId());
        
        String text = "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.\n\nüè† –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.";
        return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
            MessageUtils.createBackToMainKeyboard());
    }
    
    private EditMessageText handleTonPayment(Long chatId, Integer messageId, UserSession session, String orderId) {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è TON –ø–ª–∞—Ç–µ–∂–∞
        String text = """
            üíé <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ TON Wallet</b>
            
            üöß <i>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TON Wallet –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>
            
            üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @support_bot
            """;
        return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
            MessageUtils.createBackToMainKeyboard());
    }
    
    private EditMessageText handleCryptoPayment(Long chatId, Integer messageId, UserSession session, String orderId) {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂–∞
        String text = """
            ‚Çø <b>–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂</b>
            
            üöß <i>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞–º–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>
            
            üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @support_bot
            """;
        return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
            MessageUtils.createBackToMainKeyboard());
    }
    
    private EditMessageText handleCheckPayment(Long chatId, Integer messageId, UserSession session, String orderId) {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        String text = """
            üîÑ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...</b>
            
            üöß <i>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>
            
            ‚è≥ –ü–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤—Ä—É—á–Ω—É—é –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç
            üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @support_bot
            """;
        return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
            MessageUtils.createBackToMainKeyboard());
    }
}
