package shit.back.handler;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import shit.back.model.UserSession;
import shit.back.model.Order;
import shit.back.model.StarPackage;
import shit.back.security.RateLimitService;
import shit.back.security.SecurityValidator;
import shit.back.entity.BalanceTransactionEntity;
import shit.back.entity.UserBalanceEntity;
import shit.back.exception.BalanceException;
import shit.back.exception.InsufficientBalanceException;
import shit.back.service.BalanceService;
import shit.back.service.BalanceTransactionService;
import shit.back.service.OrderService;
import shit.back.service.PaymentService;
import shit.back.service.PriceService;
import shit.back.service.UserSessionService;
import shit.back.utils.MessageUtils;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Slf4j
@Component
public class CallbackHandler {

    @Autowired
    private UserSessionService userSessionService;

    @Autowired
    private PriceService priceService;

    @Autowired
    private SecurityValidator securityValidator;

    @Autowired
    private RateLimitService rateLimitService;

    // === –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –ë–ê–õ–ê–ù–°–û–ú ===
    @Autowired
    private BalanceService balanceService;

    @Autowired
    private BalanceTransactionService balanceTransactionService;

    @Autowired
    private OrderService orderService;

    @Autowired
    private PaymentService paymentService;

    public EditMessageText handleCallback(CallbackQuery callbackQuery) {
        String data = callbackQuery.getData();
        User user = callbackQuery.getFrom();
        Long chatId = callbackQuery.getMessage().getChatId();
        Integer messageId = callbackQuery.getMessage().getMessageId();

        log.info("üîò CallbackHandler: –æ–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç {} (ID: {}): {}",
                user.getFirstName(), user.getId(), data);

        // –í–∞–ª–∏–¥–∞—Ü–∏—è callback –¥–∞–Ω–Ω—ã—Ö
        SecurityValidator.ValidationResult validationResult = securityValidator.validateCallbackData(data);
        if (!validationResult.isValid()) {
            log.warn("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ callback –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", user.getId(),
                    validationResult.getErrorMessage());
            return MessageUtils.createEditMessage(chatId, messageId,
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start");
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        RateLimitService.RateLimitResult rateLimitResult = rateLimitService.checkUserLimit(user.getId());
        if (!rateLimitResult.isAllowed()) {
            log.warn("‚è∞ Rate limit –ø—Ä–µ–≤—ã—à–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", user.getId(), rateLimitResult.getErrorMessage());
            return MessageUtils.createEditMessage(chatId, messageId,
                    "‚è∞ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        SecurityValidator.ValidationResult usernameValidation = securityValidator.validateUsername(user.getUserName());
        if (!usernameValidation.isValid()) {
            log.warn("‚ö†Ô∏è –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç user {}: {}", user.getId(),
                    usernameValidation.getErrorMessage());
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        UserSession session = userSessionService.getOrCreateSession(
                user.getId(),
                securityValidator.sanitizeText(user.getUserName()),
                securityValidator.sanitizeText(user.getFirstName()),
                securityValidator.sanitizeText(user.getLastName()));

        log.info("üë§ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", session.getState());

        EditMessageText response = handleCallbackData(data, chatId, messageId, session);
        log.info("üìù CallbackHandler: –æ—Ç–≤–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è chatId {}", chatId);

        return response;
    }

    private EditMessageText handleCallbackData(String data, Long chatId, Integer messageId, UserSession session) {
        if (data.equals("buy_stars")) {
            return handleBuyStars(chatId, messageId, session);
        }

        if (data.equals("show_prices")) {
            return handleShowPrices(chatId, messageId, session);
        }

        if (data.equals("help")) {
            return handleHelp(chatId, messageId);
        }

        if (data.equals("my_orders")) {
            return handleMyOrders(chatId, messageId, session);
        }

        if (data.equals("back_to_main")) {
            return handleBackToMain(chatId, messageId, session);
        }

        if (data.startsWith("select_package_")) {
            String packageId = data.replace("select_package_", "");
            return handlePackageSelection(chatId, messageId, session, packageId);
        }

        if (data.startsWith("confirm_order_")) {
            String orderId = data.replace("confirm_order_", "");
            return handleOrderConfirmation(chatId, messageId, session, orderId);
        }

        if (data.equals("cancel_order")) {
            return handleCancelOrder(chatId, messageId, session);
        }

        if (data.startsWith("cancel_order_")) {
            String orderId = data.replace("cancel_order_", "");
            return handleCancelSpecificOrder(chatId, messageId, session, orderId);
        }

        if (data.startsWith("pay_ton_")) {
            String orderId = data.replace("pay_ton_", "");
            return handleTonPayment(chatId, messageId, session, orderId);
        }

        if (data.startsWith("pay_crypto_")) {
            String orderId = data.replace("pay_crypto_", "");
            return handleCryptoPayment(chatId, messageId, session, orderId);
        }

        if (data.startsWith("check_payment_")) {
            String orderId = data.replace("check_payment_", "");
            return handleCheckPayment(chatId, messageId, session, orderId);
        }

        // === –ù–û–í–´–ï CALLBACK'–´ –ë–ê–õ–ê–ù–°–ê ===

        if (data.equals("show_balance")) {
            return handleShowBalance(chatId, messageId, session);
        }

        if (data.equals("topup_balance_menu")) {
            return handleTopupBalanceMenu(chatId, messageId, session);
        }

        if (data.startsWith("topup_balance_")) {
            String amount = data.replace("topup_balance_", "");
            return handleTopupBalanceAmount(chatId, messageId, session, amount);
        }

        if (data.equals("show_balance_history")) {
            return handleShowBalanceHistory(chatId, messageId, session);
        }

        if (data.equals("refresh_balance_history")) {
            return handleRefreshBalanceHistory(chatId, messageId, session);
        }

        if (data.equals("back_to_balance")) {
            return handleBackToBalance(chatId, messageId, session);
        }

        if (data.startsWith("balance_payment_")) {
            String orderId = data.replace("balance_payment_", "");
            return handleBalancePayment(chatId, messageId, session, orderId);
        }

        if (data.startsWith("mixed_payment_")) {
            String orderId = data.replace("mixed_payment_", "");
            return handleMixedPayment(chatId, messageId, session, orderId);
        }

        if (data.equals("export_balance_history")) {
            return handleExportBalanceHistory(chatId, messageId, session);
        }

        if (data.equals("topup_balance_custom")) {
            return handleCustomTopupAmount(chatId, messageId, session);
        }

        // === –ù–û–í–´–ï CALLBACK'–´ –î–õ–Ø –ü–õ–ê–¢–ï–ñ–ù–´–• –°–ò–°–¢–ï–ú ===

        if (data.startsWith("topup_ton_")) {
            String amount = data.replace("topup_ton_", "");
            return handleTopupTon(chatId, messageId, session, amount);
        }

        if (data.startsWith("topup_yookassa_")) {
            String amount = data.replace("topup_yookassa_", "");
            return handleTopupYooKassa(chatId, messageId, session, amount);
        }

        if (data.startsWith("topup_qiwi_")) {
            String amount = data.replace("topup_qiwi_", "");
            return handleTopupQiwi(chatId, messageId, session, amount);
        }

        if (data.startsWith("topup_sberpay_")) {
            String amount = data.replace("topup_sberpay_", "");
            return handleTopupSberPay(chatId, messageId, session, amount);
        }

        // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
        return MessageUtils.createEditMessage(chatId, messageId,
                "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start");
    }

    private EditMessageText handleBuyStars(Long chatId, Integer messageId, UserSession session) {
        userSessionService.updateSessionState(session.getUserId(), UserSession.SessionState.SELECTING_PACKAGE);

        String text = "üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç Telegram Stars:</b>\n\n" +
                MessageUtils.formatPricesMessage(priceService.getAllPackages());

        return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
                MessageUtils.createPackageSelectionKeyboard(priceService.getAllPackages()));
    }

    private EditMessageText handleShowPrices(Long chatId, Integer messageId, UserSession session) {
        String text = MessageUtils.formatPricesMessage(priceService.getAllPackages());
        return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
                MessageUtils.createPackageSelectionKeyboard(priceService.getAllPackages()));
    }

    private EditMessageText handleHelp(Long chatId, Integer messageId) {
        return MessageUtils.createEditMessageWithKeyboard(chatId, messageId,
                MessageUtils.formatHelpMessage(), MessageUtils.createHelpKeyboard());
    }

    private EditMessageText handleMyOrders(Long chatId, Integer messageId, UserSession session) {
        Optional<Order> activeOrder = userSessionService.getUserActiveOrder(session.getUserId());

        if (activeOrder.isPresent()) {
            Order order = activeOrder.get();
            String text = String.format("""
                    üìã <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>

                    %s <b>–ó–∞–∫–∞–∑ %s</b>
                    üéØ –°—Ç–∞—Ç—É—Å: %s
                    ‚≠ê –ó–≤–µ–∑–¥—ã: %d
                    üí∞ –°—É–º–º–∞: $%.2f
                    üìÖ –°–æ–∑–¥–∞–Ω: %s
                    """,
                    order.getStatusEmoji(),
                    order.getFormattedOrderId(),
                    order.getStatus().name(),
                    order.getStarPackage().getStars(),
                    order.getAmount(),
                    order.getCreatedAt().toLocalDate());

            return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
                    MessageUtils.createMyOrdersKeyboard());
        } else {
            String text = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.\n\nüí∞ –°–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!";
            return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
                    MessageUtils.createMyOrdersKeyboard());
        }
    }

    private EditMessageText handleBackToMain(Long chatId, Integer messageId, UserSession session) {
        userSessionService.updateSessionState(session.getUserId(), UserSession.SessionState.IDLE);

        String welcomeText = MessageUtils.formatWelcomeMessage(session.getDisplayName());
        return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, welcomeText,
                MessageUtils.createMainMenuKeyboard());
    }

    private EditMessageText handlePackageSelection(Long chatId, Integer messageId, UserSession session,
            String packageId) {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è package ID
        SecurityValidator.ValidationResult packageValidation = securityValidator.validatePackageId(packageId);
        if (!packageValidation.isValid()) {
            log.warn("Invalid package ID from user {}: {}", session.getUserId(), packageValidation.getErrorMessage());
            return MessageUtils.createEditMessage(chatId, messageId,
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞.");
        }

        Optional<StarPackage> packageOpt = priceService.getPackageById(packageId);

        if (packageOpt.isPresent()) {
            StarPackage starPackage = packageOpt.get();
            userSessionService.setSelectedPackage(session.getUserId(), starPackage);

            // –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
            Order order = userSessionService.createOrder(session.getUserId());

            if (order != null) {
                log.info("Order created for user {}: {} stars for ${}",
                        session.getUserId(), starPackage.getStars(), starPackage.getDiscountedPrice());
                String text = MessageUtils.formatOrderConfirmation(order);
                return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
                        MessageUtils.createOrderConfirmationKeyboard(order.getOrderId()));
            }
        }

        return MessageUtils.createEditMessage(chatId, messageId,
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
    }

    private EditMessageText handleOrderConfirmation(Long chatId, Integer messageId, UserSession session,
            String orderId) {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è order ID
        SecurityValidator.ValidationResult orderValidation = securityValidator.validateOrderId(orderId);
        if (!orderValidation.isValid()) {
            log.warn("Invalid order ID from user {}: {}", session.getUserId(), orderValidation.getErrorMessage());
            return MessageUtils.createEditMessage(chatId, messageId,
                    "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–∫–∞–∑. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.");
        }

        Optional<Order> orderOpt = userSessionService.getOrder(orderId);

        if (orderOpt.isPresent()) {
            Order order = orderOpt.get();
            userSessionService.updateOrderStatus(orderId, Order.OrderStatus.AWAITING_PAYMENT);
            userSessionService.updateSessionState(session.getUserId(), UserSession.SessionState.AWAITING_PAYMENT);

            log.info("Order confirmed for user {}: {}", session.getUserId(), orderId);
            String text = MessageUtils.formatPaymentMessage(order);
            return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
                    MessageUtils.createPaymentKeyboard(orderId));
        }

        return MessageUtils.createEditMessage(chatId, messageId,
                "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.");
    }

    private EditMessageText handleCancelOrder(Long chatId, Integer messageId, UserSession session) {
        userSessionService.clearUserSession(session.getUserId());

        String welcomeText = MessageUtils.formatWelcomeMessage(session.getDisplayName());
        return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, welcomeText,
                MessageUtils.createMainMenuKeyboard());
    }

    private EditMessageText handleCancelSpecificOrder(Long chatId, Integer messageId, UserSession session,
            String orderId) {
        userSessionService.updateOrderStatus(orderId, Order.OrderStatus.CANCELLED);
        userSessionService.clearUserSession(session.getUserId());

        String text = "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.\n\nüè† –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.";
        return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
                MessageUtils.createBackToMainKeyboard());
    }

    private EditMessageText handleTonPayment(Long chatId, Integer messageId, UserSession session, String orderId) {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è TON –ø–ª–∞—Ç–µ–∂–∞
        String text = """
                üíé <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ TON Wallet</b>

                üöß <i>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TON Wallet –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>

                üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @support_bot
                """;
        return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
                MessageUtils.createBackToMainKeyboard());
    }

    private EditMessageText handleCryptoPayment(Long chatId, Integer messageId, UserSession session, String orderId) {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ-–ø–ª–∞—Ç–µ–∂–∞
        String text = """
                ‚Çø <b>–ö—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂</b>

                üöß <i>–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∞–º–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>

                üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: @support_bot
                """;
        return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
                MessageUtils.createBackToMainKeyboard());
    }

    private EditMessageText handleCheckPayment(Long chatId, Integer messageId, UserSession session, String orderId) {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞
        String text = """
                üîÑ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞...</b>

                üöß <i>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>

                ‚è≥ –ü–ª–∞—Ç–µ–∂ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤—Ä—É—á–Ω—É—é –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç
                üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @support_bot
                """;
        return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
                MessageUtils.createBackToMainKeyboard());
    }

    // ============================================
    // === –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ë–ê–õ–ê–ù–°–ê ===
    // ============================================

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
     */
    private EditMessageText handleTopupBalanceMenu(Long chatId, Integer messageId, UserSession session) {
        log.info("üí≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", session.getUserId());

        try {
            userSessionService.updateSessionState(session.getUserId(), UserSession.SessionState.TOPPING_UP_BALANCE);
            UserBalanceEntity balance = balanceService.getOrCreateBalance(session.getUserId());
            String topupMessage = MessageUtils.createTopupMessage(balance);

            return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, topupMessage,
                    MessageUtils.createTopupKeyboard());

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    session.getUserId(), e.getMessage(), e);
            return MessageUtils.createEditMessage(chatId, messageId,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    private EditMessageText handleTopupBalanceAmount(Long chatId, Integer messageId, UserSession session,
            String amountStr) {
        log.info("üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: —Å—É–º–º–∞={}",
                session.getUserId(), amountStr);

        try {
            BigDecimal amount;
            String amountText;

            // –ü–∞—Ä—Å–∏–º —Å—É–º–º—É
            switch (amountStr) {
                case "100" -> {
                    amount = new BigDecimal("100.00");
                    amountText = "100 ‚ÇΩ";
                }
                case "500" -> {
                    amount = new BigDecimal("500.00");
                    amountText = "500 ‚ÇΩ";
                }
                case "1000" -> {
                    amount = new BigDecimal("1000.00");
                    amountText = "1000 ‚ÇΩ";
                }
                case "2000" -> {
                    amount = new BigDecimal("2000.00");
                    amountText = "2000 ‚ÇΩ";
                }
                default -> {
                    return MessageUtils.createEditMessage(chatId, messageId,
                            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.");
                }
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            userSessionService.updateSessionState(session.getUserId(), UserSession.SessionState.SELECTING_PAYMENT_TYPE);

            UserBalanceEntity balance = balanceService.getOrCreateBalance(session.getUserId());

            String text = String.format("""
                    üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>

                    üí∞ <b>–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> %s
                    üíµ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> %.2f ‚ÇΩ

                    üîí <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>

                    <i>‚ö†Ô∏è –ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å—Ä–∞–∑—É —Å—Ç–∞–Ω—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–æ–∫</i>
                    """,
                    amountText,
                    balance.getCurrentBalance());

            return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
                    createTopupPaymentKeyboard(amountStr));

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    session.getUserId(), e.getMessage(), e);
            return MessageUtils.createEditMessage(chatId, messageId,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    /**
     * –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–∞–ª–∞–Ω—Å–∞
     */
    private EditMessageText handleShowBalanceHistory(Long chatId, Integer messageId, UserSession session) {
        log.info("üìä –ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", session.getUserId());

        try {
            List<BalanceTransactionEntity> history = balanceService.getBalanceHistory(session.getUserId(), 10);
            String historyMessage = MessageUtils.createBalanceHistoryMessage(history, session.getDisplayName());

            return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, historyMessage,
                    MessageUtils.createBalanceHistoryKeyboard());

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    session.getUserId(), e.getMessage(), e);
            return MessageUtils.createEditMessage(chatId, messageId,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
     */
    private EditMessageText handleRefreshBalanceHistory(Long chatId, Integer messageId, UserSession session) {
        log.info("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", session.getUserId());
        return handleShowBalanceHistory(chatId, messageId, session);
    }

    /**
     * –í–æ–∑–≤—Ä–∞—Ç –∫ –±–∞–ª–∞–Ω—Å—É
     */
    private EditMessageText handleBackToBalance(Long chatId, Integer messageId, UserSession session) {
        log.info("üîô –í–æ–∑–≤—Ä–∞—Ç –∫ –±–∞–ª–∞–Ω—Å—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", session.getUserId());

        try {
            userSessionService.updateSessionState(session.getUserId(), UserSession.SessionState.IDLE);
            UserBalanceEntity balance = balanceService.getOrCreateBalance(session.getUserId());
            String balanceMessage = MessageUtils.createBalanceInfoMessage(balance, session.getDisplayName());

            return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, balanceMessage,
                    MessageUtils.createBalanceMenuKeyboard());

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –±–∞–ª–∞–Ω—Å—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    session.getUserId(), e.getMessage(), e);
            return MessageUtils.createEditMessage(chatId, messageId,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å–æ–º
     */
    private EditMessageText handleBalancePayment(Long chatId, Integer messageId, UserSession session, String orderId) {
        log.info("üí∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: –∑–∞–∫–∞–∑={}",
                session.getUserId(), orderId);

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞
            Optional<Order> orderOpt = userSessionService.getOrder(orderId);
            if (orderOpt.isEmpty()) {
                return MessageUtils.createEditMessage(chatId, messageId,
                        "‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.");
            }

            Order order = orderOpt.get();
            BigDecimal orderAmount = order.getAmount();

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
            boolean sufficientFunds = balanceService.checkSufficientBalance(session.getUserId(), orderAmount);
            if (!sufficientFunds) {
                UserBalanceEntity balance = balanceService.getOrCreateBalance(session.getUserId());
                BigDecimal shortage = orderAmount.subtract(balance.getCurrentBalance());

                String text = String.format("""
                        ‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</b>

                        üí∞ <b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> %.2f ‚ÇΩ
                        üíµ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> %.2f ‚ÇΩ
                        üí∏ <b>–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç:</b> %.2f ‚ÇΩ

                        üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã
                        """,
                        orderAmount, balance.getCurrentBalance(), shortage);

                return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
                        MessageUtils.createPaymentKeyboard(orderId));
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            userSessionService.updateSessionState(session.getUserId(),
                    UserSession.SessionState.BALANCE_PAYMENT_PROCESSING);

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂
            BalanceTransactionEntity transaction = balanceService.processBalancePayment(
                    session.getUserId(), orderId, orderAmount);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
            userSessionService.updateOrderStatus(orderId, Order.OrderStatus.COMPLETED);
            userSessionService.updateSessionState(session.getUserId(), UserSession.SessionState.COMPLETED);

            String text = String.format("""
                    ‚úÖ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>

                    üéâ <b>–ó–∞–∫–∞–∑ %s –æ–ø–ª–∞—á–µ–Ω</b>
                    ‚≠ê <b>–ó–≤–µ–∑–¥—ã:</b> %d
                    üí∞ <b>–°—É–º–º–∞:</b> %.2f ‚ÇΩ
                    üí≥ <b>–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b> –ë–∞–ª–∞–Ω—Å
                    üÜî <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:</b> <code>%s</code>

                    üöÄ <i>–ó–≤–µ–∑–¥—ã –±—É–¥—É—Ç –∑–∞—á–∏—Å–ª–µ–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç</i>
                    """,
                    order.getFormattedOrderId(),
                    order.getStarPackage().getStars(),
                    orderAmount,
                    transaction.getTransactionId());

            return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
                    MessageUtils.createBackToMainKeyboard());

        } catch (InsufficientBalanceException e) {
            log.warn("üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", session.getUserId(), e.getMessage());
            return MessageUtils.createEditMessage(chatId, messageId,
                    "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.");
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–ª–∞—Ç–µ –±–∞–ª–∞–Ω—Å–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    session.getUserId(), e.getMessage(), e);
            return MessageUtils.createEditMessage(chatId, messageId,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.");
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ—à–∞–Ω–Ω–æ–π –æ–ø–ª–∞—Ç—ã (—á–∞—Å—Ç–∏—á–Ω–æ –±–∞–ª–∞–Ω—Å + –≤–Ω–µ—à–Ω–∏–π –ø–ª–∞—Ç–µ–∂)
     */
    private EditMessageText handleMixedPayment(Long chatId, Integer messageId, UserSession session, String orderId) {
        log.info("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ—à–∞–Ω–Ω–æ–π –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: –∑–∞–∫–∞–∑={}",
                session.getUserId(), orderId);

        // –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–º–µ—à–∞–Ω–Ω–æ–π –æ–ø–ª–∞—Ç—ã
        String text = """
                üîÑ <b>–°–º–µ—à–∞–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞</b>

                üöß <i>–§—É–Ω–∫—Ü–∏—è —Å–º–µ—à–∞–Ω–Ω–æ–π –æ–ø–ª–∞—Ç—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>

                üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–Ω—É—é –æ–ø–ª–∞—Ç—É –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
                üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @support_bot
                """;

        return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
                MessageUtils.createPaymentKeyboard(orderId));
    }

    /**
     * –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ –±–∞–ª–∞–Ω—Å–∞ (–∑–∞–≥–ª—É—à–∫–∞)
     */
    private EditMessageText handleExportBalanceHistory(Long chatId, Integer messageId, UserSession session) {
        log.info("üìÑ –ó–∞–ø—Ä–æ—Å —ç–∫—Å–ø–æ—Ä—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", session.getUserId());

        String text = """
                üìÑ <b>–≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π</b>

                üöß <i>–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>

                üí° –°–∫–æ—Ä–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –≤ PDF –∏–ª–∏ Excel
                üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @support_bot
                """;

        return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
                MessageUtils.createBalanceHistoryKeyboard());
    }

    /**
     * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
     */
    private EditMessageText handleCustomTopupAmount(Long chatId, Integer messageId, UserSession session) {
        log.info("‚úèÔ∏è –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", session.getUserId());

        String text = """
                ‚úèÔ∏è <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—É–º–º–∞</b>

                üöß <i>–§—É–Ω–∫—Ü–∏—è –≤–≤–æ–¥–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–π —Å—É–º–º—ã –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</i>

                üí° –ü–æ–∫–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å—É–º–º
                üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @support_bot
                """;

        return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
                MessageUtils.createTopupKeyboard());
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    private InlineKeyboardMarkup createTopupPaymentKeyboard(String amount) {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createButton("üíé TON Wallet", "topup_ton_" + amount));
        rows.add(row1);

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createButton("üí≥ YooKassa", "topup_yookassa_" + amount));
        rows.add(row2);

        List<InlineKeyboardButton> row3 = new ArrayList<>();
        row3.add(createButton("ü•ù Qiwi", "topup_qiwi_" + amount));
        rows.add(row3);

        List<InlineKeyboardButton> row4 = new ArrayList<>();
        row4.add(createButton("üè¶ SberPay", "topup_sberpay_" + amount));
        rows.add(row4);

        // –ù–∞–∑–∞–¥
        List<InlineKeyboardButton> row5 = new ArrayList<>();
        row5.add(createButton("üîô –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Å—É–º–º—É", "topup_balance_menu"));
        rows.add(row5);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –±–∞–ª–∞–Ω—Å–∞
     */
    private String formatPaymentMessageWithBalance(Order order, UserBalanceEntity balance) {
        BigDecimal orderAmount = order.getAmount();
        BigDecimal userBalance = balance.getCurrentBalance();

        StringBuilder sb = new StringBuilder();
        sb.append(String.format("""
                üí≥ <b>–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ %s</b>

                ‚≠ê <b>–ó–≤–µ–∑–¥—ã:</b> %d
                üí∞ <b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> %.2f ‚ÇΩ
                üíµ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> %.2f ‚ÇΩ
                """,
                order.getFormattedOrderId(),
                order.getStarPackage().getStars(),
                orderAmount,
                userBalance));

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø–ª–∞—Ç—ã
        if (userBalance.compareTo(orderAmount) >= 0) {
            sb.append("\n‚úÖ <b>–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã –±–∞–ª–∞–Ω—Å–æ–º!</b>");
            sb.append("\nüí° <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å–æ–º - —ç—Ç–æ –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ</i>");
        } else if (userBalance.compareTo(BigDecimal.ZERO) > 0) {
            BigDecimal remaining = orderAmount.subtract(userBalance);
            sb.append(String.format("\n‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ</b>"));
            sb.append(String.format("\nüí∏ <b>–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç:</b> %.2f ‚ÇΩ", remaining));
            sb.append("\nüí° <i>–ú–æ–∂–µ—Ç–µ –¥–æ–ø–ª–∞—Ç–∏—Ç—å –≤–Ω–µ—à–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å</i>");
        } else {
            sb.append("\nüí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:</b>");
            sb.append("\nüí° <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–∫—É–ø–æ–∫</i>");
        }

        sb.append("\n\nüîí <i>–í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞—â–∏—â–µ–Ω—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –±–µ–∑–æ–ø–∞—Å–Ω–æ</i>");
        return sb.toString();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
     */
    private InlineKeyboardButton createButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return button;
    }

    // ============================================
    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–õ–ê–¢–ï–ñ–ù–´–• –°–ò–°–¢–ï–ú ===
    // ============================================

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ TON Wallet
     */
    private EditMessageText handleTopupTon(Long chatId, Integer messageId, UserSession session, String amountStr) {
        log.info("üíé –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ TON –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: —Å—É–º–º–∞={}",
                session.getUserId(), amountStr);

        try {
            BigDecimal amount = parseAmount(amountStr);
            if (amount == null) {
                return MessageUtils.createEditMessage(chatId, messageId,
                        "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.");
            }

            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ PaymentService
            String paymentUrl = paymentService.processPayment(session.getUserId(), amount, "TON");

            String text = String.format("""
                    üíé <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ TON Wallet</b>

                    üí∞ <b>–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> %.2f ‚ÇΩ
                    üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> <a href="%s">–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ</a>

                    ‚è±Ô∏è <b>–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏:</b> 30 –º–∏–Ω—É—Ç
                    üîÑ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ</b> –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

                    <i>üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ TON Wallet</i>
                    """,
                    amount, paymentUrl);

            return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
                    MessageUtils.createBackToMainKeyboard());

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ TON –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    session.getUserId(), e.getMessage(), e);
            return MessageUtils.createEditMessage(chatId, messageId,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.");
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ YooKassa
     */
    private EditMessageText handleTopupYooKassa(Long chatId, Integer messageId, UserSession session, String amountStr) {
        log.info("üí≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ YooKassa –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: —Å—É–º–º–∞={}",
                session.getUserId(), amountStr);

        try {
            BigDecimal amount = parseAmount(amountStr);
            if (amount == null) {
                return MessageUtils.createEditMessage(chatId, messageId,
                        "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.");
            }

            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ PaymentService
            String paymentUrl = paymentService.processPayment(session.getUserId(), amount, "YooKassa");

            String text = String.format("""
                    üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ YooKassa</b>

                    üí∞ <b>–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> %.2f ‚ÇΩ
                    üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> <a href="%s">–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ</a>

                    üí≥ <b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b> –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã, –ÆMoney, SberPay
                    ‚è±Ô∏è <b>–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏:</b> 30 –º–∏–Ω—É—Ç
                    üîÑ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ</b> –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

                    <i>üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã</i>
                    """,
                    amount, paymentUrl);

            return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
                    MessageUtils.createBackToMainKeyboard());

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ YooKassa –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    session.getUserId(), e.getMessage(), e);
            return MessageUtils.createEditMessage(chatId, messageId,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.");
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Qiwi
     */
    private EditMessageText handleTopupQiwi(Long chatId, Integer messageId, UserSession session, String amountStr) {
        log.info("ü•ù –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ Qiwi –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: —Å—É–º–º–∞={}",
                session.getUserId(), amountStr);

        try {
            BigDecimal amount = parseAmount(amountStr);
            if (amount == null) {
                return MessageUtils.createEditMessage(chatId, messageId,
                        "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.");
            }

            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ PaymentService
            String paymentUrl = paymentService.processPayment(session.getUserId(), amount, "Qiwi");

            String text = String.format("""
                    ü•ù <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Qiwi</b>

                    üí∞ <b>–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> %.2f ‚ÇΩ
                    üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> <a href="%s">–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ</a>

                    üí≥ <b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b> Qiwi –ö–æ—à–µ–ª–µ–∫, –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã
                    ‚è±Ô∏è <b>–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏:</b> 60 –º–∏–Ω—É—Ç
                    üîÑ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ</b> –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

                    <i>üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É</i>
                    """,
                    amount, paymentUrl);

            return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
                    MessageUtils.createBackToMainKeyboard());

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Qiwi –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    session.getUserId(), e.getMessage(), e);
            return MessageUtils.createEditMessage(chatId, messageId,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.");
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ SberPay
     */
    private EditMessageText handleTopupSberPay(Long chatId, Integer messageId, UserSession session, String amountStr) {
        log.info("üè¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ SberPay –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: —Å—É–º–º–∞={}",
                session.getUserId(), amountStr);

        try {
            BigDecimal amount = parseAmount(amountStr);
            if (amount == null) {
                return MessageUtils.createEditMessage(chatId, messageId,
                        "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.");
            }

            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ PaymentService
            String paymentUrl = paymentService.processPayment(session.getUserId(), amount, "SberPay");

            String text = String.format("""
                    üè¶ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ SberPay</b>

                    üí∞ <b>–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b> %.2f ‚ÇΩ
                    üîó <b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> <a href="%s">–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ</a>

                    üí≥ <b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã:</b> SberPay, –±–∞–Ω–∫–æ–≤—Å–∫–∏–µ –∫–∞—Ä—Ç—ã –°–±–µ—Ä–±–∞–Ω–∫–∞
                    ‚è±Ô∏è <b>–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏:</b> 30 –º–∏–Ω—É—Ç
                    üîÑ <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ</b> –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è

                    <i>üí° –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –≤ SberPay</i>
                    """,
                    amount, paymentUrl);

            return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, text,
                    MessageUtils.createBackToMainKeyboard());

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ SberPay –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    session.getUserId(), e.getMessage(), e);
            return MessageUtils.createEditMessage(chatId, messageId,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.");
        }
    }

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ —Å—É–º–º—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
     */
    private BigDecimal parseAmount(String amountStr) {
        try {
            return switch (amountStr) {
                case "100" -> new BigDecimal("100.00");
                case "500" -> new BigDecimal("500.00");
                case "1000" -> new BigDecimal("1000.00");
                case "2000" -> new BigDecimal("2000.00");
                default -> null;
            };
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—É–º–º—ã: {}", amountStr);
            return null;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫–∞–∑–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private EditMessageText handleShowBalance(Long chatId, Integer messageId, UserSession session) {
        log.info("üí∞ –ü–æ–∫–∞–∑ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", session.getUserId());

        try {
            UserBalanceEntity balance = balanceService.getOrCreateBalance(session.getUserId());
            String balanceMessage = MessageUtils.createBalanceInfoMessage(balance, session.getDisplayName());

            return MessageUtils.createEditMessageWithKeyboard(chatId, messageId, balanceMessage,
                    MessageUtils.createBalanceMenuKeyboard());

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    session.getUserId(), e.getMessage(), e);
            return MessageUtils.createEditMessage(chatId, messageId,
                    "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
        }
    }
}
