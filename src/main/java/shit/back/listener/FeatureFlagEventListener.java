package shit.back.listener;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;
import shit.back.service.ConfigurationRefreshService;
import shit.back.service.FeatureFlagService.FeatureFlagEvent;

@Slf4j
@Component
public class FeatureFlagEventListener {
    
    @Autowired
    @Lazy
    private ConfigurationRefreshService configurationRefreshService;
    
    @EventListener
    @Async
    public void handleFeatureFlagEvent(FeatureFlagEvent event) {
        log.debug("üéØ Handling feature flag event: {} for flag '{}'", 
            event.getEventType(), event.getFlagName());
        
        try {
            switch (event.getEventType()) {
                case "CREATED":
                    handleFeatureFlagCreated(event);
                    break;
                case "UPDATED":
                    handleFeatureFlagUpdated(event);
                    break;
                case "ENABLED":
                    handleFeatureFlagEnabled(event);
                    break;
                case "DISABLED":
                    handleFeatureFlagDisabled(event);
                    break;
                case "TOGGLED":
                    handleFeatureFlagToggled(event);
                    break;
                case "DELETED":
                    handleFeatureFlagDeleted(event);
                    break;
                case "CACHE_REFRESHED":
                    handleCacheRefreshed(event);
                    break;
                default:
                    log.debug("‚ö†Ô∏è Unknown feature flag event type: {}", event.getEventType());
            }
            
        } catch (Exception e) {
            log.error("‚ùå Error handling feature flag event '{}' for flag '{}': {}", 
                event.getEventType(), event.getFlagName(), e.getMessage(), e);
        }
    }
    
    private void handleFeatureFlagCreated(FeatureFlagEvent event) {
        log.info("‚ú® Feature flag '{}' created, applying changes", event.getFlagName());
        configurationRefreshService.applyFeatureFlagChange(event.getFlagName());
    }
    
    private void handleFeatureFlagUpdated(FeatureFlagEvent event) {
        log.info("üîÑ Feature flag '{}' updated, applying changes", event.getFlagName());
        configurationRefreshService.applyFeatureFlagChange(event.getFlagName());
    }
    
    private void handleFeatureFlagEnabled(FeatureFlagEvent event) {
        log.info("‚úÖ Feature flag '{}' enabled, applying changes", event.getFlagName());
        configurationRefreshService.applyFeatureFlagChange(event.getFlagName());
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞
        logFeatureFlagActivation(event);
    }
    
    private void handleFeatureFlagDisabled(FeatureFlagEvent event) {
        log.info("‚ùå Feature flag '{}' disabled, applying changes", event.getFlagName());
        configurationRefreshService.applyFeatureFlagChange(event.getFlagName());
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞
        logFeatureFlagDeactivation(event);
    }
    
    private void handleFeatureFlagToggled(FeatureFlagEvent event) {
        boolean isEnabled = event.getFlag() != null && event.getFlag().isEnabled();
        log.info("üîÑ Feature flag '{}' toggled to {}, applying changes", 
            event.getFlagName(), isEnabled ? "enabled" : "disabled");
        
        configurationRefreshService.applyFeatureFlagChange(event.getFlagName());
    }
    
    private void handleFeatureFlagDeleted(FeatureFlagEvent event) {
        log.info("üóëÔ∏è Feature flag '{}' deleted, cleaning up", event.getFlagName());
        
        // –ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–ª–∞–≥–∞ –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É
        // –ù–∞–ø—Ä–∏–º–µ—Ä, —É–≤–µ–¥–æ–º–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏
    }
    
    private void handleCacheRefreshed(FeatureFlagEvent event) {
        log.info("üîÑ Feature flags cache refreshed, configuration updated");
        
        // –ú–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞
        // –ù–∞–ø—Ä–∏–º–µ—Ä, —É–≤–µ–¥–æ–º–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    }
    
    private void logFeatureFlagActivation(FeatureFlagEvent event) {
        if (event.getFlag() != null) {
            log.info("üìä Feature '{}' activated: description='{}', rollout={}%", 
                event.getFlagName(),
                event.getFlag().getDescription(),
                event.getFlag().getRolloutPercentage() != null ? 
                    event.getFlag().getRolloutPercentage() : 100
            );
        }
    }
    
    private void logFeatureFlagDeactivation(FeatureFlagEvent event) {
        if (event.getFlag() != null) {
            log.info("üìä Feature '{}' deactivated: description='{}', usage_count={}", 
                event.getFlagName(),
                event.getFlag().getDescription(),
                event.getFlag().getUsageCount() != null ? 
                    event.getFlag().getUsageCount() : 0
            );
        }
    }
    
    @EventListener
    @Async
    public void handleConfigurationRefreshEvent(ConfigurationRefreshService.ConfigurationRefreshEvent event) {
        log.info("üîÑ Configuration refresh event received: {}", event.getEventType());
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        // –ù–∞–ø—Ä–∏–º–µ—Ä, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —Å–∏—Å—Ç–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–µ–π
    }
    
    @EventListener
    @Async
    public void handleFeatureFlagChangeEvent(ConfigurationRefreshService.FeatureFlagChangeEvent event) {
        log.debug("üéöÔ∏è Feature flag change event received for '{}'", event.getFlagName());
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–ª–∞–≥–æ–≤
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∞—É–¥–∏—Ç –∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    }
    
    @EventListener
    @Async
    public void handleUserConfigurationRefreshEvent(ConfigurationRefreshService.UserConfigurationRefreshEvent event) {
        log.debug("üë§ User configuration refresh event for user '{}', flags count: {}", 
            event.getUserId(), 
            event.getUserFlags() != null ? event.getUserFlags().size() : 0
        );
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        // –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–æ–≤—ã—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏—è—Ö
    }
}
