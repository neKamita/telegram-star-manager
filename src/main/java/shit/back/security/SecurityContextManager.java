package shit.back.security;

import lombok.extern.slf4j.Slf4j;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import shit.back.exception.core.SecurityException;

import java.time.LocalDateTime;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Å–µ—Å—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * 
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è Security Patterns (Week 3-4):
 * - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è —Å–µ—Å—Å–∏–π –∏ —Ç–æ–∫–µ–Ω–æ–≤
 * - Tracking –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * - Security event logging
 * 
 * @author TelegramStarManager
 * @since Week 3-4 Refactoring - Security Patterns Implementation
 */
@Slf4j
@Component
public class SecurityContextManager {

    private final Map<String, UserSecurityContext> userContexts = new ConcurrentHashMap<>();
    private final Map<String, LocalDateTime> lastActivityMap = new ConcurrentHashMap<>();

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
     */
    public Optional<String> getCurrentUserId() {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            if (authentication != null && authentication.isAuthenticated()) {
                String userId = extractUserIdFromAuthentication(authentication);
                log.debug("üîê –ü–æ–ª—É—á–µ–Ω ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", userId);
                return Optional.ofNullable(userId);
            }
            return Optional.empty();
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", e.getMessage());
            return Optional.empty();
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
     * 
     * @throws SecurityException –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
     */
    public String getCurrentUserIdRequired() {
        return getCurrentUserId()
                .orElseThrow(() -> SecurityException.unauthorized("unknown", "GET_CURRENT_USER", "security_context"));
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
     */
    public boolean isCurrentUserAdmin() {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            if (authentication == null || !authentication.isAuthenticated()) {
                return false;
            }

            boolean isAdmin = authentication.getAuthorities().stream()
                    .anyMatch(auth -> auth.getAuthority().equals("ROLE_ADMIN") ||
                            auth.getAuthority().equals("ADMIN"));

            if (isAdmin) {
                log.info("üîë –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}",
                        getCurrentUserId().orElse("unknown"));
            }

            return isAdmin;
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {}", e.getMessage());
            return false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å –≤—ã–±—Ä–æ—Å–æ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
     * 
     * @throws SecurityException –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
     */
    public void requireAdminAccess(String operation) {
        String userId = getCurrentUserIdRequired();

        if (!isCurrentUserAdmin()) {
            log.warn("üö´ –û—Ç–∫–∞–∑ –≤ –¥–æ—Å—Ç—É–ø–µ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ '{}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", operation, userId);
            throw SecurityException.insufficientPermissions(userId, operation, "admin_panel");
        }

        log.info("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ '{}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", operation, userId);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public UserSecurityContext createUserContext(String userId, String sessionId, Map<String, Object> attributes) {
        UserSecurityContext context = UserSecurityContext.builder()
                .userId(userId)
                .sessionId(sessionId)
                .createdAt(LocalDateTime.now())
                .lastActivity(LocalDateTime.now())
                .attributes(new ConcurrentHashMap<>(attributes))
                .isValid(true)
                .build();

        userContexts.put(userId, context);
        updateLastActivity(userId);

        log.info("üîê –°–æ–∑–¥–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {} (session: {})", userId, sessionId);
        return context;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public Optional<UserSecurityContext> getUserContext(String userId) {
        UserSecurityContext context = userContexts.get(userId);
        if (context != null && context.isValid()) {
            updateLastActivity(userId);
            return Optional.of(context);
        }
        return Optional.empty();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    public void updateLastActivity(String userId) {
        lastActivityMap.put(userId, LocalDateTime.now());

        UserSecurityContext context = userContexts.get(userId);
        if (context != null) {
            context.setLastActivity(LocalDateTime.now());
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public boolean isUserActiveWithinMinutes(String userId, int minutes) {
        LocalDateTime lastActivity = lastActivityMap.get(userId);
        if (lastActivity == null) {
            return false;
        }

        LocalDateTime threshold = LocalDateTime.now().minusMinutes(minutes);
        return lastActivity.isAfter(threshold);
    }

    /**
     * –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public void invalidateUserContext(String userId, String reason) {
        UserSecurityContext context = userContexts.get(userId);
        if (context != null) {
            context.setValid(false);
            context.setInvalidationReason(reason);
            context.setInvalidatedAt(LocalDateTime.now());

            log.info("üîí –ò–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {} –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {}", userId, reason);
        }

        lastActivityMap.remove(userId);
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
     */
    public int cleanupExpiredContexts(int maxInactiveMinutes) {
        LocalDateTime threshold = LocalDateTime.now().minusMinutes(maxInactiveMinutes);
        final int[] cleanedCount = { 0 }; // –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –∏–∑–º–µ–Ω—è–µ–º–æ–≥–æ —Å—á–µ—Ç—á–∏–∫–∞

        userContexts.entrySet().removeIf(entry -> {
            String userId = entry.getKey();
            UserSecurityContext context = entry.getValue();

            if (context.getLastActivity().isBefore(threshold)) {
                invalidateUserContext(userId, "EXPIRED_INACTIVITY");
                cleanedCount[0]++;
                return true;
            }
            return false;
        });

        if (cleanedCount[0] > 0) {
            log.info("üßπ –û—á–∏—â–µ–Ω–æ {} –∏—Å—Ç–µ–∫—à–∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", cleanedCount[0]);
        }

        return cleanedCount[0];
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
     */
    public SecurityContextStats getContextStats() {
        int totalContexts = userContexts.size();
        long validContexts = userContexts.values().stream()
                .mapToLong(ctx -> ctx.isValid() ? 1 : 0)
                .sum();

        long activeUsers = lastActivityMap.entrySet().stream()
                .mapToLong(entry -> {
                    LocalDateTime lastActivity = entry.getValue();
                    return lastActivity.isAfter(LocalDateTime.now().minusMinutes(30)) ? 1 : 0;
                })
                .sum();

        return SecurityContextStats.builder()
                .totalContexts(totalContexts)
                .validContexts((int) validContexts)
                .activeUsers((int) activeUsers)
                .lastCleanup(LocalDateTime.now())
                .build();
    }

    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã

    private String extractUserIdFromAuthentication(Authentication authentication) {
        Object principal = authentication.getPrincipal();

        if (principal instanceof String) {
            return (String) principal;
        } else if (principal instanceof org.springframework.security.core.userdetails.UserDetails) {
            return ((org.springframework.security.core.userdetails.UserDetails) principal).getUsername();
        }

        return authentication.getName();
    }

    // Data Transfer Objects

    @lombok.Data
    @lombok.Builder
    public static class UserSecurityContext {
        private String userId;
        private String sessionId;
        private LocalDateTime createdAt;
        private LocalDateTime lastActivity;
        private LocalDateTime invalidatedAt;
        private boolean isValid;
        private String invalidationReason;
        private Map<String, Object> attributes;
    }

    @lombok.Data
    @lombok.Builder
    public static class SecurityContextStats {
        private int totalContexts;
        private int validContexts;
        private int activeUsers;
        private LocalDateTime lastCleanup;
    }
}