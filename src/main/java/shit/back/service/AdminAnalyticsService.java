package shit.back.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import shit.back.entity.StarPackageEntity;
import shit.back.entity.UserSessionEntity;
import shit.back.model.UserCountsBatchResult;
import shit.back.dto.order.DailyStats;
import shit.back.dto.order.CustomerStats;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

/**
 * –°–µ—Ä–≤–∏—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
 * –í—ã–¥–µ–ª–µ–Ω –∏–∑ AdminDashboardService –≤ —Ä–∞–º–∫–∞—Ö —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è God Classes (Week 3-4)
 * 
 * –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞:
 * - –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (revenue, conversion rates)
 * - –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
 * - –¢–æ–ø-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ (customers, packages, users)
 * - –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—á–µ—Ç—ã
 * 
 * @author TelegramStarManager
 * @since Week 3-4 Refactoring - God Class Split
 */
@Slf4j
@Service
@Transactional(readOnly = true)
public class AdminAnalyticsService {

    @Autowired
    private OrderService orderService;

    @Autowired
    private StarPackageService starPackageService;

    @Autowired
    private UserSessionUnifiedService userSessionService;

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç batch query –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫
     */
    public shit.back.dto.monitoring.PerformanceMetrics getPerformanceMetrics() {
        long startTime = System.currentTimeMillis();
        log.info("üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê: –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –ù–ê–ß–ê–õ–û");

        // Revenue metrics
        long revenueStart = System.currentTimeMillis();
        BigDecimal todayRevenue = orderService.getTodayRevenue();
        BigDecimal monthRevenue = orderService.getMonthRevenue();
        BigDecimal totalRevenue = orderService.getTotalRevenue();
        long revenueTime = System.currentTimeMillis() - revenueStart;
        log.info("üí∞ –ê–ù–ê–õ–ò–¢–ò–ö–ê: Revenue metrics took {}ms", revenueTime);

        // Conversion metrics
        long conversionStart = System.currentTimeMillis();
        long totalOrders = orderService.getTotalOrdersCount();
        long completedOrders = orderService.getCompletedOrdersCount();
        double orderConversionRate = totalOrders > 0 ? (double) completedOrders / totalOrders * 100 : 0;
        long conversionTime = System.currentTimeMillis() - conversionStart;
        log.info("üìà –ê–ù–ê–õ–ò–¢–ò–ö–ê: Conversion metrics took {}ms", conversionTime);

        // User engagement metrics - OPTIMIZED WITH BATCH QUERY
        long engagementStart = System.currentTimeMillis();
        UserCountsBatchResult engagementCounts = userSessionService.getUserCountsBatch();
        long totalUsers = engagementCounts.totalUsers();
        long activeUsers = engagementCounts.activeUsers();
        long onlineUsers = engagementCounts.onlineUsers();
        double userEngagementRate = totalUsers > 0 ? (double) activeUsers / totalUsers * 100 : 0;
        long engagementTime = System.currentTimeMillis() - engagementStart;
        log.info("‚úÖ –ê–ù–ê–õ–ò–¢–ò–ö–ê –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ê: User engagement metrics took {}ms - SINGLE BATCH QUERY!",
                engagementTime);

        long avgOrderStart = System.currentTimeMillis();
        BigDecimal avgOrderValue = orderService.getAverageOrderValue();
        long avgOrderTime = System.currentTimeMillis() - avgOrderStart;
        log.info("üíµ –ê–ù–ê–õ–ò–¢–ò–ö–ê: Average order value took {}ms", avgOrderTime);

        long totalTime = System.currentTimeMillis() - startTime;
        log.warn(
                "üìä –ê–ù–ê–õ–ò–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê: Performance metrics TOTAL time {}ms (revenue:{}ms, conversion:{}ms, engagement:{}ms, avg:{}ms)",
                totalTime, revenueTime, conversionTime, engagementTime, avgOrderTime);

        // –ú–∞–ø–ø–∏–Ω–≥ –±–∏–∑–Ω–µ—Å–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ (–∑–∞–≥–ª—É—à–∫–∞, —Ç.–∫. —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–ª–∞—Å—Å–æ–≤ –Ω–µ
        // —Å–æ–≤–ø–∞–¥–∞–µ—Ç)
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏
        // –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
        return new shit.back.dto.monitoring.PerformanceMetrics(
                0.0, // cpuUsage
                0.0, // memoryUsage
                0.0, // responseTime
                totalOrders, // requestCount
                0, // errorCount
                0 // uptime
        );
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
     */
    public TopPerformers getTopPerformers() {
        long startTime = System.currentTimeMillis();
        log.info("üèÜ –ê–ù–ê–õ–ò–¢–ò–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π - –ù–ê–ß–ê–õ–û");

        List<CustomerStats> topCustomers = orderService.getTopCustomers(10);
        List<StarPackageEntity> topPackages = starPackageService.getTopSellingPackages(10);
        List<UserSessionEntity> topActiveUsers = userSessionService.getTopActiveUsers(10);
        List<StarPackageEntity> bestValuePackages = starPackageService.getBestValuePackages(5);

        long totalTime = System.currentTimeMillis() - startTime;
        log.info("üèÜ –ê–ù–ê–õ–ò–¢–ò–ö–ê: –¢–æ–ø-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –∑–∞ {}ms", totalTime);

        return TopPerformers.builder()
                .topCustomers(topCustomers)
                .topSellingPackages(topPackages)
                .mostActiveUsers(topActiveUsers)
                .bestValuePackages(bestValuePackages)
                .generatedAt(LocalDateTime.now())
                .build();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
     */
    public AnalyticsData getAnalyticsData(int days) {
        long startTime = System.currentTimeMillis();
        log.info("üìà –ê–ù–ê–õ–ò–¢–ò–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∑–∞ {} –¥–Ω–µ–π - –ù–ê–ß–ê–õ–û", days);

        List<DailyStats> dailyRevenue = orderService.getDailyStatistics(days);

        // –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
        List<DailyActiveUsersStats> dailyActiveUsers = List.of();

        // –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —è–∑—ã–∫–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
        List<LanguageStats> languageStats = List.of();

        List<StarPackageService.PackageTypeSales> packageTypeSales = starPackageService.getSalesByPackageType();

        long totalTime = System.currentTimeMillis() - startTime;
        log.info("üìà –ê–ù–ê–õ–ò–¢–ò–ö–ê: –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã –∑–∞ {}ms", totalTime);

        return AnalyticsData.builder()
                .dailyRevenue(dailyRevenue)
                .dailyActiveUsers(dailyActiveUsers)
                .languageDistribution(languageStats)
                .packageTypeSales(packageTypeSales)
                .periodDays(days)
                .generatedAt(LocalDateTime.now())
                .build();
    }

    /**
     * –†–∞—Å—á–µ—Ç KPI (Key Performance Indicators) —Å–∏—Å—Ç–µ–º—ã
     */
    public SystemKPI calculateSystemKPI() {
        log.info("üìã –ê–ù–ê–õ–ò–¢–ò–ö–ê: –†–∞—Å—á–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö KPI");

        shit.back.dto.monitoring.PerformanceMetrics metrics = getPerformanceMetrics();
        TopPerformers performers = getTopPerformers();

        // –†–∞—Å—á–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö KPI
        double revenueGrowthRate = calculateRevenueGrowthRate();
        double userRetentionRate = calculateUserRetentionRate();
        double averageSessionDuration = calculateAverageSessionDuration();

        return SystemKPI.builder()
                .revenueGrowthRate(revenueGrowthRate)
                .userRetentionRate(userRetentionRate)
                // .orderConversionRate(metrics.getOrderConversionRate())
                // .userEngagementRate(metrics.getUserEngagementRate())
                // .averageOrderValue(metrics.getAverageOrderValue())
                .averageSessionDuration(averageSessionDuration)
                .topCustomersCount(performers.getTopCustomers().size())
                .calculatedAt(LocalDateTime.now())
                .build();
    }

    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫

    private double calculateRevenueGrowthRate() {
        // –ó–∞–≥–ª—É—à–∫–∞ - —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
        return 15.5; // 15.5% —Ä–æ—Å—Ç
    }

    private double calculateUserRetentionRate() {
        // –ó–∞–≥–ª—É—à–∫–∞ - —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
        return 78.3; // 78.3% retention
    }

    private double calculateAverageSessionDuration() {
        // –ó–∞–≥–ª—É—à–∫–∞ - —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–∑–∂–µ
        return 24.7; // 24.7 –º–∏–Ω—É—Ç —Å—Ä–µ–¥–Ω—è—è —Å–µ—Å—Å–∏—è
    }

    // Data Transfer Objects

    // PerformanceMetrics DTO —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–Ω–µ—à–Ω–∏–π:
    // shit.back.dto.monitoring.PerformanceMetrics

    @lombok.Data
    @lombok.Builder
    public static class TopPerformers {
        private List<CustomerStats> topCustomers;
        private List<StarPackageEntity> topSellingPackages;
        private List<UserSessionEntity> mostActiveUsers;
        private List<StarPackageEntity> bestValuePackages;
        private LocalDateTime generatedAt;
    }

    @lombok.Data
    @lombok.Builder
    public static class AnalyticsData {
        private List<DailyStats> dailyRevenue;
        private List<DailyActiveUsersStats> dailyActiveUsers;
        private List<LanguageStats> languageDistribution;
        private List<StarPackageService.PackageTypeSales> packageTypeSales;
        private int periodDays;
        private LocalDateTime generatedAt;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ DTO –∫–ª–∞—Å—Å—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    @lombok.Data
    @lombok.Builder
    public static class DailyActiveUsersStats {
        private LocalDateTime date;
        private long activeUsers;
        private long newUsers;
        private long returningUsers;
    }

    @lombok.Data
    @lombok.Builder
    public static class LanguageStats {
        private String language;
        private long userCount;
        private double percentage;
    }

    @lombok.Data
    @lombok.Builder
    public static class SystemKPI {
        private double revenueGrowthRate;
        private double userRetentionRate;
        private double orderConversionRate;
        private double userEngagementRate;
        private BigDecimal averageOrderValue;
        private double averageSessionDuration;
        private int topCustomersCount;
        private LocalDateTime calculatedAt;
    }
}