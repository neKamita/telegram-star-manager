package shit.back.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import shit.back.annotation.Auditable;
import shit.back.entity.OrderEntity;
import shit.back.entity.StarPackageEntity;
import shit.back.entity.UserSessionEntity;
import shit.back.model.UserCountsBatchResult;
import shit.back.dto.order.OrderStatistics;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏
 * –†–ï–§–ê–ö–¢–û–†–ò–ù–ì Week 3-4: –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ God Classes
 * 
 * –¢–µ–ø–µ—Ä—å –¥–µ–ª–µ–≥–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:
 * - AdminAnalyticsService - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏
 * - AdminMaintenanceService - –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
 * 
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–ª—å–∫–æ:
 * - –ê–≥—Ä–µ–≥–∞—Ü–∏—é –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞
 * - –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏
 * - –ü—Ä–æ—Å—Ç—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏
 * 
 * @author TelegramStarManager
 * @since Week 3-4 Refactoring - God Class Split
 */
@Slf4j
@Service
@Transactional(readOnly = true)
public class AdminDashboardService {

    @Autowired
    private OrderService orderService;

    @Autowired
    private StarPackageService starPackageService;

    @Autowired
    private UserSessionUnifiedService userSessionService;

    // === –ù–û–í–´–ï –†–ê–ó–î–ï–õ–ï–ù–ù–´–ï –°–ï–†–í–ò–°–´ (Week 3-4) ===
    @Autowired
    private AdminAnalyticsService adminAnalyticsService;

    @Autowired
    private AdminMaintenanceService adminMaintenanceService;

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –æ–±–∑–æ—Ä–∞ –¥–∞—à–±–æ—Ä–¥–∞
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ—Ç batch query
     */
    @Auditable(description = "–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–∑–æ—Ä–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–Ω–µ–ª–∏", auditType = Auditable.AuditType.ADMIN)
    public DashboardOverview getDashboardOverview() {
        long startTime = System.currentTimeMillis();
        log.info("üìä –î–ê–®–ë–û–†–î: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–∑–æ—Ä–∞ –¥–∞—à–±–æ—Ä–¥–∞ - –ù–ê–ß–ê–õ–û");

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–∫–∞–∑–æ–≤
        long orderStatsStart = System.currentTimeMillis();
        OrderStatistics orderStats = orderService.getOrderStatistics();
        long orderStatsTime = System.currentTimeMillis() - orderStatsStart;
        log.info("üì¶ –î–ê–®–ë–û–†–î: Order statistics took {}ms", orderStatsTime);

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–∫–µ—Ç–æ–≤
        long packageStatsStart = System.currentTimeMillis();
        StarPackageService.PackageStatistics packageStats = starPackageService.getPackageStatistics();
        long packageStatsTime = System.currentTimeMillis() - packageStatsStart;
        log.info("‚≠ê –î–ê–®–ë–û–†–î: Package statistics took {}ms", packageStatsTime);

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        long userStatsStart = System.currentTimeMillis();
        UserSessionUnifiedService.UserSessionStatistics userStats = userSessionService.getUserSessionStatistics();
        long userStatsTime = System.currentTimeMillis() - userStatsStart;
        log.info("üë• –î–ê–®–ë–û–†–î: User session statistics took {}ms", userStatsTime);

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä—è–º—ã—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - OPTIMIZED BATCH QUERY
        long userCountsStart = System.currentTimeMillis();
        UserCountsBatchResult userCounts = userSessionService.getUserCountsBatch();
        long totalUsersCount = userCounts.totalUsers();
        long activeUsersCount = userCounts.activeUsers();
        long onlineUsersCount = userCounts.onlineUsers();
        long userCountsTime = System.currentTimeMillis() - userCountsStart;

        log.info(
                "‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø N+1 –†–ï–®–ï–ù–ê: SINGLE BATCH QUERY took {}ms instead of 3 separate queries! Total={}, Active={}, Online={}",
                userCountsTime, totalUsersCount, activeUsersCount, onlineUsersCount);

        long totalTime = System.currentTimeMillis() - startTime;
        log.warn("üìä –î–ê–®–ë–û–†–î: Dashboard overview TOTAL time {}ms (order:{}ms, package:{}ms, user:{}ms, counts:{}ms)",
                totalTime, orderStatsTime, packageStatsTime, userStatsTime, userCountsTime);

        return DashboardOverview.builder()
                .orderStatistics(orderStats)
                .packageStatistics(packageStats)
                .userStatistics(userStats)
                .totalUsersCount(totalUsersCount)
                .activeUsersCount(activeUsersCount)
                .onlineUsersCount(onlineUsersCount)
                .lastUpdated(LocalDateTime.now())
                .build();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    @Auditable(description = "–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", auditType = Auditable.AuditType.ADMIN)
    public RecentActivity getRecentActivity() {
        long startTime = System.currentTimeMillis();
        log.info("üìà –î–ê–®–ë–û–†–î: –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ - –ù–ê–ß–ê–õ–û");

        long recentOrdersStart = System.currentTimeMillis();
        List<OrderEntity> recentOrders = orderService.getRecentOrders(7); // Last 7 days
        long recentOrdersTime = System.currentTimeMillis() - recentOrdersStart;

        long recentUsersStart = System.currentTimeMillis();
        long recentUsersCount = userSessionService.getNewUsersCount(7); // Last 7 days
        long recentUsersTime = System.currentTimeMillis() - recentUsersStart;

        long onlineUsersStart = System.currentTimeMillis();
        List<UserSessionEntity> onlineUsers = userSessionService.getOnlineUsers();
        long onlineUsersTime = System.currentTimeMillis() - onlineUsersStart;

        long todaysOrdersStart = System.currentTimeMillis();
        List<OrderEntity> todaysOrders = orderService.getTodaysOrders();
        long todaysOrdersTime = System.currentTimeMillis() - todaysOrdersStart;

        long totalTime = System.currentTimeMillis() - startTime;
        log.info("üìà –î–ê–®–ë–û–†–î: Recent activity TOTAL time {}ms (recent:{}ms, users:{}ms, online:{}ms, today:{}ms)",
                totalTime, recentOrdersTime, recentUsersTime, onlineUsersTime, todaysOrdersTime);

        return RecentActivity.builder()
                .recentOrders(recentOrders.stream().limit(10).toList())
                .newUsers(java.util.Collections.emptyList())
                .onlineUsers(onlineUsers.stream().limit(10).toList())
                .todaysOrders(todaysOrders)
                .totalRecentOrders(recentOrders.size())
                .totalNewUsers((int) recentUsersCount)
                .totalOnlineUsers(onlineUsers.size())
                .totalTodaysOrders(todaysOrders.size())
                .build();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    public CombinedRecentActivity getCombinedRecentActivity() {
        log.info("üìä –î–ê–®–ë–û–†–î: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –Ω–µ–¥–∞–≤–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –∑–∞–∫–∞–∑—ã)");

        List<OrderEntity> recentOrders = orderService.getRecentOrders(30); // Last 30 days
        List<ActivityItem> allActivities = new ArrayList<>();

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        for (OrderEntity order : recentOrders) {
            ActivityItem item = ActivityItem.builder()
                    .type("ORDER")
                    .title("Purchase: " + order.getStarCount() + " Stars")
                    .description("User " + order.getUserId() + " bought " + order.getStarCount() + " stars for $"
                            + order.getFinalAmount())
                    .timestamp(order.getCreatedAt() != null ? order.getCreatedAt() : LocalDateTime.now())
                    .icon("fas fa-shopping-cart")
                    .badgeClass("badge bg-success")
                    .badgeText(order.getStatus() != null ? order.getStatus().toString() : "COMPLETED")
                    .actionUrl("/admin-legacy/orders/" + order.getOrderId())
                    .metadata(Map.of(
                            "userId", order.getUserId().toString(),
                            "amount", order.getStarCount().toString(),
                            "price", order.getFinalAmount().toString(),
                            "orderId", order.getOrderId().toString()))
                    .build();
            allActivities.add(item);
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
        List<ActivityItem> sortedActivities = allActivities.stream()
                .sorted((a, b) -> b.getTimestamp().compareTo(a.getTimestamp()))
                .limit(20)
                .collect(Collectors.toList());

        return CombinedRecentActivity.builder()
                .activities(sortedActivities)
                .totalActivities(sortedActivities.size())
                .orderCount(sortedActivities.size())
                .flagCount(0) // Feature Flags —É–¥–∞–ª–µ–Ω—ã
                .lastUpdated(LocalDateTime.now())
                .build();
    }

    // === –î–ï–õ–ï–ì–ê–¶–ò–Ø –ö –ù–û–í–´–ú –°–ï–†–í–ò–°–ê–ú (Week 3-4) ===

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     * –î–ï–õ–ï–ì–ò–†–£–ï–¢ –∫ AdminAnalyticsService
     */
    @Auditable(description = "–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", auditType = Auditable.AuditType.ADMIN)
    public shit.back.dto.monitoring.PerformanceMetrics getPerformanceMetrics() {
        log.info("üìä –î–ê–®–ë–û–†–î: –î–µ–ª–µ–≥–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫ AdminAnalyticsService");
        return adminAnalyticsService.getPerformanceMetrics();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ø-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
     * –î–ï–õ–ï–ì–ò–†–£–ï–¢ –∫ AdminAnalyticsService
     */
    public AdminAnalyticsService.TopPerformers getTopPerformers() {
        log.info("üèÜ –î–ê–®–ë–û–†–î: –î–µ–ª–µ–≥–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø-–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∫ AdminAnalyticsService");
        return adminAnalyticsService.getTopPerformers();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
     * –î–ï–õ–ï–ì–ò–†–£–ï–¢ –∫ AdminAnalyticsService
     */
    public AdminAnalyticsService.AnalyticsData getAnalyticsData(int days) {
        log.info("üìà –î–ê–®–ë–û–†–î: –î–µ–ª–µ–≥–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∫ AdminAnalyticsService");
        return adminAnalyticsService.getAnalyticsData(days);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
     * –î–ï–õ–ï–ì–ò–†–£–ï–¢ –∫ AdminMaintenanceService
     */
    @Auditable(description = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã", auditType = Auditable.AuditType.ADMIN)
    public shit.back.dto.monitoring.SystemHealth getSystemHealth() {
        log.info("üîß –î–ê–®–ë–û–†–î: –î–µ–ª–µ–≥–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –∫ AdminMaintenanceService");
        return adminMaintenanceService.getSystemHealth();
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
     * –î–ï–õ–ï–ì–ò–†–£–ï–¢ –∫ AdminMaintenanceService
     */
    @Auditable(description = "–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è", auditType = Auditable.AuditType.CRITICAL)
    @Transactional
    public AdminMaintenanceService.MaintenanceResult performMaintenance() {
        log.info("üîß –î–ê–®–ë–û–†–î: –î–µ–ª–µ–≥–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –∫ AdminMaintenanceService");
        return adminMaintenanceService.performMaintenance();
    }

    // === –ü–†–û–°–¢–´–ï –û–ü–ï–†–ê–¶–ò–ò –° –î–ê–ù–ù–´–ú–ò ===

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ —Å –ø–æ–∏—Å–∫–æ–º
     */
    public Page<OrderEntity> getOrdersWithSearch(String searchTerm, Pageable pageable) {
        if (searchTerm != null && !searchTerm.trim().isEmpty()) {
            return orderService.searchOrders(searchTerm.trim(), pageable);
        }
        return orderService.getOrders(pageable);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–∏—Å–∫–æ–º
     */
    public Page<UserSessionEntity> getUsersWithSearch(String searchTerm, Pageable pageable) {
        if (searchTerm != null && !searchTerm.trim().isEmpty()) {
            return userSessionService.searchSessions(searchTerm.trim(), pageable);
        }
        return userSessionService.getSessions(pageable);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
     */
    public Page<StarPackageEntity> getPackages(Pageable pageable) {
        return starPackageService.getPackages(pageable);
    }

    // Data Transfer Objects (—Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è backward compatibility)

    @lombok.Data
    @lombok.Builder
    public static class DashboardOverview {
        private OrderStatistics orderStatistics;
        private StarPackageService.PackageStatistics packageStatistics;
        private UserSessionUnifiedService.UserSessionStatistics userStatistics;
        private LocalDateTime lastUpdated;

        // –ü—Ä—è–º—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        private long totalUsersCount;
        private long activeUsersCount;
        private long onlineUsersCount;
    }

    @lombok.Data
    @lombok.Builder
    public static class RecentActivity {
        private List<OrderEntity> recentOrders;
        private List<UserSessionEntity> newUsers;
        private List<UserSessionEntity> onlineUsers;
        private List<OrderEntity> todaysOrders;
        private int totalRecentOrders;
        private int totalNewUsers;
        private int totalOnlineUsers;
        private int totalTodaysOrders;
    }

    @lombok.Data
    @lombok.Builder
    public static class CombinedRecentActivity {
        private List<ActivityItem> activities;
        private int totalActivities;
        private int orderCount;
        private int flagCount;
        private LocalDateTime lastUpdated;
    }

    @lombok.Data
    @lombok.Builder
    public static class ActivityItem {
        private String type; // "ORDER" –∏–ª–∏ "FEATURE_FLAG"
        private String title;
        private String description;
        private LocalDateTime timestamp;
        private String icon; // CSS –∫–ª–∞—Å—Å –∏–∫–æ–Ω–∫–∏
        private String badgeClass; // CSS –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        private String badgeText;
        private String actionUrl; // –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        private Map<String, String> metadata; // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    }

}
