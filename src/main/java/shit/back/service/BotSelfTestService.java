package shit.back.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.web.client.RestTemplate;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;

import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.TimeUnit;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
 * –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 */
@Slf4j
@Service
public class BotSelfTestService {

    @Autowired(required = false)
    private TelegramWebhookBotService telegramBotService;

    @Autowired(required = false)
    private TelegramBotService telegramPollingBotService;

    @Autowired(required = false)
    private TestPaymentService testPaymentService;

    @Value("${telegram.bot.webhook-url:}")
    private String webhookUrl;

    @Value("${telegram.bot.token:}")
    private String botToken;

    @Value("${telegram.bot.username:}")
    private String botUsername;

    @Value("${telegram.self-test.enabled:true}")
    private boolean selfTestEnabled;

    @Value("${telegram.self-test.delay-seconds:10}")
    private int selfTestDelay;

    @Value("${spring.profiles.active:default}")
    private String activeProfiles;

    @Autowired
    @Qualifier("selfTestRestTemplate")
    private RestTemplate restTemplate;

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ self-test –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    @EventListener(ApplicationReadyEvent.class)
    @Async
    public void onApplicationReady() {
        if (!selfTestEnabled) {
            log.info("üö´ –ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–æ");
            return;
        }

        log.info("‚è∞ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —á–µ—Ä–µ–∑ {} —Å–µ–∫—É–Ω–¥...", selfTestDelay);

        try {
            // –ñ–¥–µ–º, —á—Ç–æ–±—ã –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–ª–∏—Å—å
            TimeUnit.SECONDS.sleep(selfTestDelay);

            performSelfTest();

        } catch (InterruptedException e) {
            log.warn("‚ö†Ô∏è –ê–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ: {}", e.getMessage());
            Thread.currentThread().interrupt();
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {}", e.getMessage(), e);
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞
     */
    public CompletableFuture<SelfTestResult> performSelfTest() {
        log.info("üß™ –ù–ê–ß–ê–õ–û —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram –±–æ—Ç–∞");

        // üî¨ –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ï –õ–û–ì–ò –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–µ–¥–ø–æ–ª–æ–∂–µ–Ω–∏–π
        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏: {}", activeProfiles);
        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: TelegramWebhookBotService: {}", telegramBotService != null ? "–î–û–°–¢–£–ü–ï–ù" : "NULL");
        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: TelegramBotService (polling): {}",
                telegramPollingBotService != null ? "–î–û–°–¢–£–ü–ï–ù" : "NULL");
        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: TestPaymentService: {}", testPaymentService != null ? "–î–û–°–¢–£–ü–ï–ù" : "NULL");
        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Webhook URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {}",
                webhookUrl != null && !webhookUrl.trim().isEmpty() ? "–î–ê" : "–ù–ï–¢");

        boolean isProductionMode = activeProfiles != null && activeProfiles.contains("production");
        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: {}",
                isProductionMode ? "PRODUCTION (webhook)" : "DEVELOPMENT (polling)");

        SelfTestResult result = new SelfTestResult();
        result.setStartTime(System.currentTimeMillis());

        try {
            // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            boolean configCheck = checkConfiguration(result);

            // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ (—Å —É—á–µ—Ç–æ–º –ø—Ä–æ—Ñ–∏–ª—è)
            boolean serviceCheck = checkTelegramService(result, isProductionMode);

            // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook (—Ç–æ–ª—å–∫–æ –¥–ª—è production)
            boolean webhookCheck = isProductionMode ? checkWebhookConnectivity(result) : skipWebhookCheck(result);

            // 4. –°–∏–º—É–ª—è—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è production)
            boolean messageTestCheck = isProductionMode ? simulateTestMessages(result) : skipMessageTest(result);

            // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è dev —Ä–µ–∂–∏–º–∞)
            boolean testPaymentCheck = !isProductionMode ? checkTestPaymentSystem(result)
                    : skipTestPaymentCheck(result);

            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result.setOverallSuccess(
                    configCheck && serviceCheck && webhookCheck && messageTestCheck && testPaymentCheck);
            result.setEndTime(System.currentTimeMillis());

            logSelfTestResults(result);

            return CompletableFuture.completedFuture(result);

        } catch (Exception e) {
            result.setOverallSuccess(false);
            result.setErrorMessage("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: " + e.getMessage());
            result.setEndTime(System.currentTimeMillis());

            log.error("üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {}", e.getMessage(), e);
            return CompletableFuture.completedFuture(result);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞
     */
    private boolean checkConfiguration(SelfTestResult result) {
        log.info("üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞...");

        boolean isProductionMode = activeProfiles != null && activeProfiles.contains("production");

        boolean tokenValid = botToken != null && !botToken.trim().isEmpty() && botToken.length() > 20;
        boolean usernameValid = botUsername != null && !botUsername.trim().isEmpty();

        // Webhook URL –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ –≤ production —Ä–µ–∂–∏–º–µ
        boolean webhookValid;
        if (isProductionMode) {
            webhookValid = webhookUrl != null && !webhookUrl.trim().isEmpty() && webhookUrl.startsWith("https://");
        } else {
            // –í dev —Ä–µ–∂–∏–º–µ webhook URL –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è
            webhookValid = true;
            log.info("‚ÑπÔ∏è Webhook URL –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ development —Ä–µ–∂–∏–º–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling)");
        }

        result.setConfigurationCheck(tokenValid && usernameValid && webhookValid);

        if (tokenValid) {
            log.info("‚úÖ Bot Token: –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ({} —Å–∏–º–≤–æ–ª–æ–≤)", botToken.length());
        } else {
            log.error("‚ùå Bot Token: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
        }

        if (usernameValid) {
            log.info("‚úÖ Bot Username: {}", botUsername);
        } else {
            log.error("‚ùå Bot Username: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
        }

        if (isProductionMode) {
            if (webhookValid) {
                log.info("‚úÖ Webhook URL: {}", webhookUrl);
            } else {
                log.error("‚ùå Webhook URL: –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∏–ª–∏ –Ω–µ HTTPS (—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ production)");
            }
        } else {
            if (webhookUrl != null && !webhookUrl.trim().isEmpty()) {
                log.warn("‚ö†Ô∏è Webhook URL –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ dev —Ä–µ–∂–∏–º–µ: {} (–±—É–¥–µ—Ç –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω)", webhookUrl);
            }
        }

        return result.isConfigurationCheck();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram —Å–µ—Ä–≤–∏—Å–∞ —Å —É—á–µ—Ç–æ–º —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
     */
    private boolean checkTelegramService(SelfTestResult result, boolean isProductionMode) {
        log.info("ü§ñ –ü—Ä–æ–≤–µ—Ä–∫–∞ Telegram —Å–µ—Ä–≤–∏—Å–∞...");

        if (isProductionMode) {
            // –í production —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º TelegramWebhookBotService
            log.info("üîç Production —Ä–µ–∂–∏–º: –ø—Ä–æ–≤–µ—Ä—è–µ–º TelegramWebhookBotService");

            if (telegramBotService == null) {
                log.error("‚ùå TelegramWebhookBotService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ production —Ä–µ–∂–∏–º–µ");
                result.setServiceCheck(false);
                return false;
            }

            try {
                boolean isInitialized = telegramBotService.isWebhookSet();
                String botStatus = telegramBotService.getBotStatus();
                String errorMessage = telegramBotService.getErrorMessage();

                // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ RUNNING –∏ ACTIVE
                boolean isStatusValid = "ACTIVE".equals(botStatus) || "RUNNING".equals(botStatus);
                result.setServiceCheck(isInitialized && isStatusValid);

                if (result.isServiceCheck()) {
                    log.info("‚úÖ Telegram webhook —Å–µ—Ä–≤–∏—Å: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –∞–∫—Ç–∏–≤–µ–Ω");
                    log.info("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {} (webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {})", botStatus, isInitialized);
                } else {
                    log.error("‚ùå Telegram webhook —Å–µ—Ä–≤–∏—Å: –ø—Ä–æ–±–ª–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏");
                    log.error("üìä Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {}, –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {}", isInitialized, botStatus);
                    if (errorMessage != null) {
                        log.error("üìù –û—à–∏–±–∫–∞: {}", errorMessage);
                    }
                }

                return result.isServiceCheck();

            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Telegram webhook —Å–µ—Ä–≤–∏—Å–∞: {}", e.getMessage());
                result.setServiceCheck(false);
                return false;
            }
        } else {
            // –í dev —Ä–µ–∂–∏–º–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º TelegramBotService (polling)
            log.info("üîç Development —Ä–µ–∂–∏–º: –ø—Ä–æ–≤–µ—Ä—è–µ–º TelegramBotService (polling)");

            if (telegramPollingBotService == null) {
                log.error("‚ùå TelegramBotService (polling) –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –≤ dev —Ä–µ–∂–∏–º–µ");
                result.setServiceCheck(false);
                return false;
            }

            try {
                boolean isRegistered = telegramPollingBotService.isBotRegistered();
                String botStatus = telegramPollingBotService.getBotStatus();
                String errorMessage = telegramPollingBotService.getErrorMessage();

                boolean isStatusValid = "Active and registered".equals(botStatus)
                        || "Ready for registration".equals(botStatus);
                result.setServiceCheck(isRegistered || isStatusValid);

                if (result.isServiceCheck()) {
                    log.info("‚úÖ Telegram polling —Å–µ—Ä–≤–∏—Å: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤");
                    log.info("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {} (–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {})", botStatus, isRegistered);
                } else {
                    log.error("‚ùå Telegram polling —Å–µ—Ä–≤–∏—Å: –ø—Ä–æ–±–ª–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏");
                    log.error("üìä –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {}, –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: {}", isRegistered, botStatus);
                    if (errorMessage != null && !errorMessage.trim().isEmpty()) {
                        log.error("üìù –û—à–∏–±–∫–∞: {}", errorMessage);
                    }
                }

                return result.isServiceCheck();

            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Telegram polling —Å–µ—Ä–≤–∏—Å–∞: {}", e.getMessage());
                result.setServiceCheck(false);
                return false;
            }
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook endpoint
     */
    private boolean checkWebhookConnectivity(SelfTestResult result) {
        log.info("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ webhook endpoint...");

        if (webhookUrl == null || webhookUrl.trim().isEmpty()) {
            log.error("‚ùå Webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω");
            result.setWebhookCheck(false);
            return false;
        }

        try {
            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ health endpoint
            // –ï—Å–ª–∏ webhookUrl —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—É—Ç—å /webhook/telegram, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞
            // /webhook/health
            // –ï—Å–ª–∏ –Ω–µ—Ç - –¥–æ–±–∞–≤–ª—è–µ–º /webhook/health
            String healthEndpoint;
            if (webhookUrl.contains("/webhook/telegram")) {
                healthEndpoint = webhookUrl.replace("/webhook/telegram", "/webhook/health");
            } else {
                healthEndpoint = webhookUrl + "/webhook/health";
            }

            log.debug("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint: {}", healthEndpoint);

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<String> entity = new HttpEntity<>(headers);

            ResponseEntity<String> response = restTemplate.exchange(
                    healthEndpoint,
                    HttpMethod.GET,
                    entity,
                    String.class);

            boolean isHealthy = response.getStatusCode().is2xxSuccessful();
            result.setWebhookCheck(isHealthy);

            if (isHealthy) {
                log.info("‚úÖ Webhook endpoint –¥–æ—Å—Ç—É–ø–µ–Ω: {}", healthEndpoint);
                log.debug("üìÑ Health response: {}", response.getBody());
            } else {
                log.error("‚ùå Webhook endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {} (—Å—Ç–∞—Ç—É—Å: {})",
                        healthEndpoint, response.getStatusCode());
            }

            return isHealthy;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ webhook connectivity: {}", e.getMessage());
            result.setWebhookCheck(false);
            return false;
        }
    }

    /**
     * –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook –¥–ª—è dev —Ä–µ–∂–∏–º–∞
     */
    private boolean skipWebhookCheck(SelfTestResult result) {
        log.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook –≤ development —Ä–µ–∂–∏–º–µ");
        log.info("‚ÑπÔ∏è –í dev —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è polling, webhook –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è");
        result.setWebhookCheck(true); // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –¥–ª—è dev —Ä–µ–∂–∏–º–∞
        return true;
    }

    /**
     * –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è dev —Ä–µ–∂–∏–º–∞
     */
    private boolean skipMessageTest(SelfTestResult result) {
        log.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è webhook —Å–æ–æ–±—â–µ–Ω–∏–π –≤ development —Ä–µ–∂–∏–º–µ");
        log.info("‚ÑπÔ∏è –í dev —Ä–µ–∂–∏–º–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ polling");
        result.setMessageTestCheck(true); // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –¥–ª—è dev —Ä–µ–∂–∏–º–∞
        return true;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–¥–ª—è dev —Ä–µ–∂–∏–º–∞)
     */
    private boolean checkTestPaymentSystem(SelfTestResult result) {
        log.info("üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π...");

        if (testPaymentService == null) {
            log.warn("‚ö†Ô∏è TestPaymentService –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ test.payment.enabled=false)");
            result.setTestPaymentCheck(true); // –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –æ–±—â–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            return true;
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω
            boolean isTestModeEnabled = testPaymentService.isTestModeEnabled();
            if (!isTestModeEnabled) {
                log.warn("‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –ø–ª–∞—Ç–µ–∂–µ–π –æ—Ç–∫–ª—é—á–µ–Ω");
                result.setTestPaymentCheck(true);
                return true;
            }

            // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
            var testConfig = testPaymentService.getTestModeConfiguration();
            log.info("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –ø–ª–∞—Ç–µ–∂–µ–π –∞–∫—Ç–∏–≤–µ–Ω");
            log.info("üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ={}, –∑–∞–¥–µ—Ä–∂–∫–∞={}—Å, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ={}",
                    testConfig.get("auto_complete_enabled"),
                    testConfig.get("auto_complete_delay_seconds"),
                    testConfig.get("logging_enabled"));

            result.setTestPaymentCheck(true);
            return true;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {}", e.getMessage());
            result.setTestPaymentCheck(false);
            return false;
        }
    }

    /**
     * –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è production —Ä–µ–∂–∏–º–∞
     */
    private boolean skipTestPaymentCheck(SelfTestResult result) {
        log.info("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –≤ production —Ä–µ–∂–∏–º–µ");
        log.info("‚ÑπÔ∏è –í production –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã");
        result.setTestPaymentCheck(true); // –°—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º –¥–ª—è production —Ä–µ–∂–∏–º–∞
        return true;
    }

    /**
     * –°–∏–º—É–ª—è—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
     */
    private boolean simulateTestMessages(SelfTestResult result) {
        log.info("üì® –°–∏–º—É–ª—è—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...");

        try {
            // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ webhook –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            Map<String, Object> testUpdate = createTestUpdate();

            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<Map<String, Object>> entity = new HttpEntity<>(testUpdate, headers);

            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ webhook endpoint
            String webhookEndpoint;
            if (webhookUrl.contains("/webhook/telegram")) {
                webhookEndpoint = webhookUrl;
            } else {
                webhookEndpoint = webhookUrl + "/webhook/telegram";
            }

            log.debug("üì° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞: {}", webhookEndpoint);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            ResponseEntity<String> response = restTemplate.exchange(
                    webhookEndpoint,
                    HttpMethod.POST,
                    entity,
                    String.class);

            boolean messageProcessed = response.getStatusCode().is2xxSuccessful();
            result.setMessageTestCheck(messageProcessed);

            if (messageProcessed) {
                log.info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ");
            } else {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {}", response.getStatusCode());
            }

            return messageProcessed;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {}", e.getMessage());
            result.setMessageTestCheck(false);
            return false;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ Update –æ–±—ä–µ–∫—Ç–∞
     */
    private Map<String, Object> createTestUpdate() {
        Map<String, Object> update = new HashMap<>();
        update.put("update_id", 999999);

        Map<String, Object> message = new HashMap<>();
        message.put("message_id", 1);
        message.put("date", System.currentTimeMillis() / 1000);
        message.put("text", "/start");

        Map<String, Object> chat = new HashMap<>();
        chat.put("id", -999999L);
        chat.put("type", "private");
        message.put("chat", chat);

        Map<String, Object> from = new HashMap<>();
        from.put("id", 999999L);
        from.put("is_bot", false);
        from.put("first_name", "SelfTest");
        from.put("username", "self_test_bot");
        message.put("from", from);

        update.put("message", message);

        return update;
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private void logSelfTestResults(SelfTestResult result) {
        long duration = result.getEndTime() - result.getStartTime();

        log.info("üèÅ –ó–ê–í–ï–†–®–ï–ù–ò–ï —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞");
        log.info("‚è±Ô∏è –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {} –º—Å", duration);
        log.info("üìä –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {}", result.isOverallSuccess() ? "‚úÖ –£–°–ü–ï–•" : "‚ùå –û–®–ò–ë–ö–ê");

        log.info("üìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:");
        log.info("  üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {}", result.isConfigurationCheck() ? "‚úÖ" : "‚ùå");
        log.info("  ü§ñ –°–µ—Ä–≤–∏—Å: {}", result.isServiceCheck() ? "‚úÖ" : "‚ùå");
        log.info("  üåê Webhook: {}", result.isWebhookCheck() ? "‚úÖ" : "‚ùå");
        log.info("  üì® –°–æ–æ–±—â–µ–Ω–∏—è: {}", result.isMessageTestCheck() ? "‚úÖ" : "‚ùå");
        log.info("  üß™ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏: {}", result.isTestPaymentCheck() ? "‚úÖ" : "‚ùå");

        if (!result.isOverallSuccess() && result.getErrorMessage() != null) {
            log.error("üìù –û—à–∏–±–∫–∞: {}", result.getErrorMessage());
        }

        if (result.isOverallSuccess()) {
            log.info("üéâ Telegram –±–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");
        } else {
            log.warn("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.");
        }
    }

    /**
     * –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∞–º–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    public static class SelfTestResult {
        private long startTime;
        private long endTime;
        private boolean overallSuccess;
        private boolean configurationCheck;
        private boolean serviceCheck;
        private boolean webhookCheck;
        private boolean messageTestCheck;
        private boolean testPaymentCheck;
        private String errorMessage;

        // Getters and Setters
        public long getStartTime() {
            return startTime;
        }

        public void setStartTime(long startTime) {
            this.startTime = startTime;
        }

        public long getEndTime() {
            return endTime;
        }

        public void setEndTime(long endTime) {
            this.endTime = endTime;
        }

        public boolean isOverallSuccess() {
            return overallSuccess;
        }

        public void setOverallSuccess(boolean overallSuccess) {
            this.overallSuccess = overallSuccess;
        }

        public boolean isConfigurationCheck() {
            return configurationCheck;
        }

        public void setConfigurationCheck(boolean configurationCheck) {
            this.configurationCheck = configurationCheck;
        }

        public boolean isServiceCheck() {
            return serviceCheck;
        }

        public void setServiceCheck(boolean serviceCheck) {
            this.serviceCheck = serviceCheck;
        }

        public boolean isWebhookCheck() {
            return webhookCheck;
        }

        public void setWebhookCheck(boolean webhookCheck) {
            this.webhookCheck = webhookCheck;
        }

        public boolean isMessageTestCheck() {
            return messageTestCheck;
        }

        public void setMessageTestCheck(boolean messageTestCheck) {
            this.messageTestCheck = messageTestCheck;
        }

        public boolean isTestPaymentCheck() {
            return testPaymentCheck;
        }

        public void setTestPaymentCheck(boolean testPaymentCheck) {
            this.testPaymentCheck = testPaymentCheck;
        }

        public String getErrorMessage() {
            return errorMessage;
        }

        public void setErrorMessage(String errorMessage) {
            this.errorMessage = errorMessage;
        }
    }
}
