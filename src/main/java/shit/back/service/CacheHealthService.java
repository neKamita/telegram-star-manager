package shit.back.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.context.event.EventListener;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import shit.back.service.metrics.CacheMetricsService;

import java.time.LocalDateTime;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * –°–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫—ç—à–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—ç—à–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
 *
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω @Qualifier –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ CacheManager'–æ–≤
 *
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã SOLID:
 * - Single Responsibility: —Ç–æ–ª—å–∫–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—ç—à–∞
 * - Open/Closed: –ª–µ–≥–∫–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –Ω–æ–≤—ã–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
 * - Dependency Inversion: –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π
 */
@Slf4j
@Service
public class CacheHealthService {

    private final CacheManager cacheManager;
    private final CacheMetricsService cacheMetricsService;
    private final RedisConnectionFactory redisConnectionFactory;

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä —Å @Qualifier –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ CacheManager
     */
    public CacheHealthService(
            @Qualifier("cacheManager") CacheManager cacheManager,
            CacheMetricsService cacheMetricsService,
            RedisConnectionFactory redisConnectionFactory) {
        this.cacheManager = cacheManager;
        this.cacheMetricsService = cacheMetricsService;
        this.redisConnectionFactory = redisConnectionFactory;
        log.info("‚úÖ CACHE HEALTH SERVICE: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –æ—Å–Ω–æ–≤–Ω—ã–º CacheManager: {}",
                cacheManager.getClass().getSimpleName());
    }

    private final Map<String, LocalDateTime> lastCacheActivity = new ConcurrentHashMap<>();
    private volatile boolean cacheSystemHealthy = false;

    /**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    @EventListener(ApplicationReadyEvent.class)
    public void performStartupCacheDiagnostic() {
        log.info("üîç STARTUP CACHE DIAGNOSTIC: ===== –ù–ê–ß–ê–õ–û –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ö–≠–®–ê =====");

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ CacheManager
        diagnoseCacheManager();

        // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
        diagnoseRedisConnection();

        // 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        testCacheOperations();

        // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ –∫—ç—à–∞
        checkCacheMetrics();

        log.info("üîç STARTUP CACHE DIAGNOSTIC: ===== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê =====");
        log.info("üè• CACHE HEALTH: –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è {}",
                cacheSystemHealthy ? "–†–ê–ë–û–¢–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û" : "–ò–ú–ï–ï–¢ –ü–†–û–ë–õ–ï–ú–´");
    }

    /**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ CacheManager
     */
    private void diagnoseCacheManager() {
        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CACHE MANAGER:");

        if (cacheManager == null) {
            log.error("‚ùå CacheManager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
            return;
        }

        log.info("‚úÖ CacheManager —Ç–∏–ø: {}", cacheManager.getClass().getSimpleName());
        log.info("‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—ç—à–∏: {}", cacheManager.getCacheNames());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π –∫—ç—à
        for (String cacheName : cacheManager.getCacheNames()) {
            Cache cache = cacheManager.getCache(cacheName);
            if (cache != null) {
                log.info("‚úÖ –ö—ç—à '{}' –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Ç–∏–ø: {}",
                        cacheName, cache.getNativeCache().getClass().getSimpleName());
            } else {
                log.warn("‚ö†Ô∏è –ö—ç—à '{}' –Ω–µ –Ω–∞–π–¥–µ–Ω", cacheName);
            }
        }
    }

    /**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
     */
    private void diagnoseRedisConnection() {
        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê REDIS:");

        if (redisConnectionFactory == null) {
            log.warn("‚ö†Ô∏è Redis ConnectionFactory –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à");
            return;
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º ping
            redisConnectionFactory.getConnection().ping();
            log.info("‚úÖ Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ");

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            log.info("‚úÖ Redis ConnectionFactory —Ç–∏–ø: {}",
                    redisConnectionFactory.getClass().getSimpleName());

        } catch (Exception e) {
            log.error("‚ùå Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ—É–¥–∞—á–Ω–æ: {}", e.getMessage());
            log.warn("üîÑ –°–∏—Å—Ç–µ–º–∞ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∞—Å—å –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à");
        }
    }

    /**
     * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private void testCacheOperations() {
        log.info("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–≠–®–ê:");

        try {
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫—ç—à
            Cache testCache = cacheManager.getCache("admin_performance");
            if (testCache != null) {
                String testKey = "startup_test_" + System.currentTimeMillis();
                String testValue = "test_value_" + System.currentTimeMillis();

                // PUT –æ–ø–µ—Ä–∞—Ü–∏—è
                testCache.put(testKey, testValue);
                log.info("‚úÖ PUT –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");

                // GET –æ–ø–µ—Ä–∞—Ü–∏—è
                Cache.ValueWrapper wrapper = testCache.get(testKey);
                if (wrapper != null && testValue.equals(wrapper.get())) {
                    log.info("‚úÖ GET –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞ - –∫—ç—à —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
                    cacheSystemHealthy = true;

                    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                    testCache.evict(testKey);
                    log.info("‚úÖ EVICT –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞");
                } else {
                    log.error("‚ùå GET –æ–ø–µ—Ä–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–∞ - –∫—ç—à –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç");
                }
            } else {
                log.error("‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –∫—ç—à 'admin_performance' –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫—ç—à–∞: {}", e.getMessage());
            cacheSystemHealthy = false;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç—Ä–∏–∫ –∫—ç—à–∞
     */
    private void checkCacheMetrics() {
        log.info("üîç –ü–†–û–í–ï–†–ö–ê –ú–ï–¢–†–ò–ö –ö–≠–®–ê:");

        try {
            if (cacheMetricsService.isAvailable()) {
                log.info("‚úÖ CacheMetricsService –¥–æ—Å—Ç—É–ø–µ–Ω");

                // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                Map<String, Object> stats = cacheMetricsService.getDetailedCacheStatistics();
                log.info("‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –ø–æ–ª—É—á–µ–Ω–∞: {}", stats.size());

                // –õ–æ–≥–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                if (stats.containsKey("totalCacheHitRatio")) {
                    log.info("üìä Cache Hit Ratio: {}%", stats.get("totalCacheHitRatio"));
                }
                if (stats.containsKey("totalCacheMissRatio")) {
                    log.info("üìä Cache Miss Ratio: {}%", stats.get("totalCacheMissRatio"));
                }
                if (stats.containsKey("cacheProvider")) {
                    log.info("üìä Cache Provider: {}", stats.get("cacheProvider"));
                }

            } else {
                log.warn("‚ö†Ô∏è CacheMetricsService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ—Ç—Ä–∏–∫ –∫—ç—à–∞: {}", e.getMessage());
        }
    }

    /**
     * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫—ç—à–∞ (–∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)
     */
    @Scheduled(fixedRate = 300000)
    public void periodicCacheHealthCheck() {
        log.debug("üè• PERIODIC CACHE HEALTH CHECK: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –∫—ç—à–∞...");

        try {
            // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫—ç—à–µ–π
            boolean allCachesHealthy = true;

            for (String cacheName : cacheManager.getCacheNames()) {
                Cache cache = cacheManager.getCache(cacheName);
                if (cache == null) {
                    log.warn("‚ö†Ô∏è PERIODIC CHECK: –ö—ç—à '{}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", cacheName);
                    allCachesHealthy = false;
                } else {
                    lastCacheActivity.put(cacheName, LocalDateTime.now());
                }
            }

            if (allCachesHealthy) {
                log.debug("‚úÖ PERIODIC CHECK: –í—Å–µ –∫—ç—à–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ");
            } else {
                log.warn("‚ö†Ô∏è PERIODIC CHECK: –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∫—ç—à–∞–º–∏");
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
            if (redisConnectionFactory != null) {
                try {
                    redisConnectionFactory.getConnection().ping();
                    log.debug("‚úÖ PERIODIC CHECK: Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ");
                } catch (Exception e) {
                    log.warn("‚ö†Ô∏è PERIODIC CHECK: Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {}", e.getMessage());
                }
            }

        } catch (Exception e) {
            log.error("‚ùå PERIODIC CHECK: –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞: {}", e.getMessage());
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è –∫—ç—à–∞
     */
    public boolean isCacheSystemHealthy() {
        return cacheSystemHealthy;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫—ç—à–µ–π
     */
    public Map<String, LocalDateTime> getLastCacheActivity() {
        return new ConcurrentHashMap<>(lastCacheActivity);
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫—ç—à–∞
     */
    public void forceCacheDiagnostic() {
        log.info("üîß FORCE DIAGNOSTIC: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫—ç—à–∞");
        performStartupCacheDiagnostic();
    }
}