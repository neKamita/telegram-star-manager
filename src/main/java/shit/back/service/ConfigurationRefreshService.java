package shit.back.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.context.annotation.Lazy;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import shit.back.model.FeatureFlag;

import jakarta.annotation.PostConstruct;
import java.time.LocalDateTime;
import java.util.List;
import java.util.concurrent.CompletableFuture;

@Slf4j
@Service
public class ConfigurationRefreshService {
    
    @Autowired
    @Lazy
    private FeatureFlagService featureFlagService;
    
    @Autowired
    private UserSessionService userSessionService;
    
    @Autowired
    private ApplicationEventPublisher eventPublisher;
    
    @PostConstruct
    public void init() {
        log.info("üîÑ Configuration Refresh Service initialized");
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–≤
        subscribeToFeatureFlagEvents();
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –±–µ–∑ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    @Async
    public CompletableFuture<Void> refreshConfiguration() {
        log.info("üîÑ Starting configuration refresh...");
        
        try {
            // 1. –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Ñ–ª–∞–≥–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
            featureFlagService.refreshCache();
            
            // 2. –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            publishConfigurationRefreshEvent();
            
            // 3. –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            notifyActiveUsers();
            
            log.info("‚úÖ Configuration refresh completed successfully");
            
        } catch (Exception e) {
            log.error("‚ùå Error during configuration refresh: {}", e.getMessage(), e);
            throw new RuntimeException("Configuration refresh failed", e);
        }
        
        return CompletableFuture.completedFuture(null);
    }
    
    /**
     * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–ª–∞–≥–∞ —Ñ—É–Ω–∫—Ü–∏–∏
     */
    @Async
    public CompletableFuture<Void> applyFeatureFlagChange(String flagName) {
        log.info("üéöÔ∏è Applying feature flag change for '{}'", flagName);
        
        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–ª–∞–≥ –≤ –∫—ç—à–µ
            featureFlagService.refreshFlag(flagName);
            
            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–ª–∞–≥
            FeatureFlag flag = featureFlagService.getFeatureFlag(flagName).orElse(null);
            
            // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–ª–∞–≥–∞
            publishFeatureFlagChangeEvent(flagName, flag);
            
            log.info("‚úÖ Feature flag '{}' change applied successfully", flagName);
            
        } catch (Exception e) {
            log.error("‚ùå Error applying feature flag change for '{}': {}", flagName, e.getMessage(), e);
            throw new RuntimeException("Feature flag change application failed", e);
        }
        
        return CompletableFuture.completedFuture(null);
    }
    
    /**
     * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public void refreshUserConfiguration(String userId) {
        log.debug("üë§ Refreshing configuration for user '{}'", userId);
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ñ–ª–∞–≥–∏, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            List<FeatureFlag> userFlags = featureFlagService.getUserFeatureFlags(userId);
            
            // –ü—É–±–ª–∏–∫—É–µ–º —Å–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            publishUserConfigurationRefreshEvent(userId, userFlags);
            
            log.debug("‚úÖ User '{}' configuration refreshed", userId);
            
        } catch (Exception e) {
            log.error("‚ùå Error refreshing configuration for user '{}': {}", userId, e.getMessage());
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
     */
    public void safeConfigurationUpdate() {
        log.info("üõ°Ô∏è Performing safe configuration update...");
        
        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–π
            preserveUserSessions();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            refreshConfiguration().get();
            
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏–∏ —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
            restoreUserSessions();
            
            log.info("‚úÖ Safe configuration update completed");
            
        } catch (Exception e) {
            log.error("‚ùå Error during safe configuration update: {}", e.getMessage(), e);
        }
    }
    
    private void subscribeToFeatureFlagEvents() {
        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–ª–∞–≥–æ–≤ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ @EventListener
        log.debug("üì° Subscribed to feature flag events");
    }
    
    private void publishConfigurationRefreshEvent() {
        ConfigurationRefreshEvent event = ConfigurationRefreshEvent.builder()
                .eventType("CONFIGURATION_REFRESHED")
                .timestamp(LocalDateTime.now())
                .source("ConfigurationRefreshService")
                .build();
        
        eventPublisher.publishEvent(event);
        log.debug("üì¢ Published configuration refresh event");
    }
    
    private void publishFeatureFlagChangeEvent(String flagName, FeatureFlag flag) {
        FeatureFlagChangeEvent event = FeatureFlagChangeEvent.builder()
                .eventType("FEATURE_FLAG_CHANGED")
                .flagName(flagName)
                .flag(flag)
                .timestamp(LocalDateTime.now())
                .source("ConfigurationRefreshService")
                .build();
        
        eventPublisher.publishEvent(event);
        log.debug("üì¢ Published feature flag change event for '{}'", flagName);
    }
    
    private void publishUserConfigurationRefreshEvent(String userId, List<FeatureFlag> userFlags) {
        UserConfigurationRefreshEvent event = UserConfigurationRefreshEvent.builder()
                .eventType("USER_CONFIGURATION_REFRESHED")
                .userId(userId)
                .userFlags(userFlags)
                .timestamp(LocalDateTime.now())
                .source("ConfigurationRefreshService")
                .build();
        
        eventPublisher.publishEvent(event);
        log.debug("üì¢ Published user configuration refresh event for user '{}'", userId);
    }
    
    private void notifyActiveUsers() {
        log.debug("üì¢ Notifying active users about configuration changes...");
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        // –ù–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ WebSocket –∏–ª–∏ Server-Sent Events
        
        // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        log.debug("üì¢ Active users notification completed");
    }
    
    private void preserveUserSessions() {
        log.debug("üíæ Preserving user sessions...");
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–π
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
        
        log.debug("üíæ User sessions preserved");
    }
    
    private void restoreUserSessions() {
        log.debug("üîÑ Restoring user sessions with updated configuration...");
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Å—Å–∏–∏ —Å —É—á–µ—Ç–æ–º –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
        
        log.debug("üîÑ User sessions restored");
    }
    
    // –°–æ–±—ã—Ç–∏—è –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    @lombok.Data
    @lombok.Builder
    public static class ConfigurationRefreshEvent {
        private String eventType;
        private LocalDateTime timestamp;
        private String source;
    }
    
    @lombok.Data
    @lombok.Builder
    public static class FeatureFlagChangeEvent {
        private String eventType;
        private String flagName;
        private FeatureFlag flag;
        private LocalDateTime timestamp;
        private String source;
    }
    
    @lombok.Data
    @lombok.Builder
    public static class UserConfigurationRefreshEvent {
        private String eventType;
        private String userId;
        private List<FeatureFlag> userFlags;
        private LocalDateTime timestamp;
        private String source;
    }
}
