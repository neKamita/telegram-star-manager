package shit.back.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.actuate.health.Health;
import org.springframework.boot.actuate.health.HealthIndicator;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import shit.back.service.monitoring.ConnectionPoolDiagnosticsService;
import shit.back.service.monitoring.ConnectionPoolHealthService;
import shit.back.service.monitoring.ConnectionPoolLoggingService;

import java.util.Map;

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è connection pools
 * –†–ï–§–ê–ö–¢–û–†–ò–ù–ì: –†–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã —Å–ª–µ–¥—É—è SRP
 * 
 * –î–µ–ª–µ–≥–∏—Ä—É–µ—Ç –∫:
 * - ConnectionPoolHealthService - health checks –∏ –±–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
 * - ConnectionPoolDiagnosticsService - –¥–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏
 * - ConnectionPoolLoggingService - –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
 * 
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
 */
@Slf4j
@Service
public class ConnectionPoolMonitoringService implements HealthIndicator {

    @Autowired
    private ConnectionPoolHealthService healthService;

    @Autowired
    private ConnectionPoolDiagnosticsService diagnosticsService;

    @Autowired
    private ConnectionPoolLoggingService loggingService;

    // ==================== –î–ï–õ–ï–ì–ê–¶–ò–Ø –ö HEALTH SERVICE ====================

    /**
     * Health check –¥–ª—è connection pools
     */
    @Override
    public Health health() {
        return healthService.health();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ connection pools
     */
    public Map<String, Object> getConnectionPoolStats() {
        log.info("üîç –î–ï–õ–ï–ì–ê–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ connection pools —á–µ—Ä–µ–∑ HealthService");
        return healthService.getBasicConnectionPoolStats();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å connection pool
     */
    public boolean hasConnectionPoolIssues() {
        return healthService.hasConnectionPoolIssues();
    }

    // ==================== –î–ï–õ–ï–ì–ê–¶–ò–Ø –ö DIAGNOSTICS SERVICE ====================

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
     */
    public Map<String, Object> getDatabaseDetailedStats() {
        log.info("üîç –î–ï–õ–ï–ì–ê–¶–ò–Ø: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ DiagnosticsService");
        return diagnosticsService.getDatabaseDetailedStats();
    }

    // ==================== –î–ï–õ–ï–ì–ê–¶–ò–Ø –ö LOGGING SERVICE ====================

    /**
     * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ connection pools –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
     */
    @Scheduled(fixedRate = 300000) // 5 –º–∏–Ω—É—Ç
    public void monitorConnectionPools() {
        try {
            log.debug("üîç –î–ï–õ–ï–ì–ê–¶–ò–Ø: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —á–µ—Ä–µ–∑ LoggingService");
            loggingService.monitorConnectionPools();

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
            if (healthService.hasConnectionPoolIssues()) {
                loggingService.logCriticalIssues();
            }
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–ª–µ–≥–∞—Ü–∏–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {}", e.getMessage());
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    public void logCriticalIssues() {
        log.info("üîç –î–ï–õ–ï–ì–ê–¶–ò–Ø: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º —á–µ—Ä–µ–∑ LoggingService");
        loggingService.logCriticalIssues();
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
     */
    public void logDetailedDiagnostics() {
        log.info("üîç –î–ï–õ–ï–ì–ê–¶–ò–Ø: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —á–µ—Ä–µ–∑ LoggingService");
        loggingService.logDetailedDiagnostics();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
     */
    public void logStartupPoolStatus() {
        log.info("üîç –î–ï–õ–ï–ì–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —á–µ—Ä–µ–∑ LoggingService");
        loggingService.logStartupPoolStatus();
    }

    // ==================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–ò
    // ====================

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—É–ª–æ–≤
     * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    public Map<String, Object> getComprehensivePoolInfo() {
        log.info("üîç –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –æ—Ç –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤");

        Map<String, Object> comprehensiveInfo = healthService.getBasicConnectionPoolStats();

        try {
            // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
            Map<String, Object> detailedStats = diagnosticsService.getDatabaseDetailedStats();
            comprehensiveInfo.put("detailedDiagnostics", detailedStats);

            // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–±–ª–µ–º
            comprehensiveInfo.put("hasIssues", healthService.hasConnectionPoolIssues());

            // –î–æ–±–∞–≤–ª—è–µ–º health check —Å—Ç–∞—Ç—É—Å
            Health health = healthService.health();
            comprehensiveInfo.put("healthStatus", health.getStatus().getCode());
            comprehensiveInfo.put("healthDetails", health.getDetails());

            log.info("‚úÖ –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–±—Ä–∞–Ω—ã –æ—Ç –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤");

        } catch (Exception e) {
            log.error("‚ùå –ö–û–ú–ü–õ–ï–ö–°–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: {}", e.getMessage());
            comprehensiveInfo.put("error", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: " + e.getMessage());
        }

        return comprehensiveInfo;
    }

    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
     * –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ä—É—á–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º
     */
    public void performFullDiagnostics() {
        log.info("üîç –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–∞—á–∞–ª–æ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏");

        try {
            // 1. –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ health
            Health health = healthService.health();
            log.info("üìä Health Status: {}", health.getStatus().getCode());

            // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–±–ª–µ–º
            boolean hasIssues = healthService.hasConnectionPoolIssues();
            log.info("‚ö†Ô∏è Has Issues: {}", hasIssues);

            // 3. –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            loggingService.logDetailedDiagnostics();

            // 4. –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã - –ª–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ
            if (hasIssues) {
                loggingService.logCriticalIssues();
            }

            // 5. –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
            Map<String, Object> detailedStats = diagnosticsService.getDatabaseDetailedStats();
            log.info("üìà Detailed Stats Keys: {}", detailedStats.keySet());

            log.info("‚úÖ –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

        } catch (Exception e) {
            log.error("‚ùå –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {}", e.getMessage(), e);
        }
    }

    // ==================== BACKWARD COMPATIBILITY –ú–ï–¢–û–î–´ ====================
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º

    /**
     * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ healthService.health() –Ω–∞–ø—Ä—è–º—É—é
     */
    @Deprecated
    public Map<String, Object> getLegacyHealthInfo() {
        log.warn("‚ö†Ô∏è DEPRECATED: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ getLegacyHealthInfo()");
        Health health = healthService.health();
        return health.getDetails();
    }

    /**
     * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ loggingService.monitorConnectionPools() –Ω–∞–ø—Ä—è–º—É—é
     */
    @Deprecated
    public void performLegacyMonitoring() {
        log.warn("‚ö†Ô∏è DEPRECATED: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –º–µ—Ç–æ–¥ performLegacyMonitoring()");
        loggingService.monitorConnectionPools();
    }
}
