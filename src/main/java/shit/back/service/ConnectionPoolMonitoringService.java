package shit.back.service;

import com.zaxxer.hikari.HikariDataSource;
import com.zaxxer.hikari.HikariPoolMXBean;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.actuate.health.Health;
import org.springframework.boot.actuate.health.HealthIndicator;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import javax.management.MBeanServer;
import javax.management.ObjectName;
import javax.sql.DataSource;
import java.lang.management.ManagementFactory;
import java.util.HashMap;
import java.util.Map;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è connection pools
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç —É—Ç–µ—á–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 */
@Slf4j
@Service
public class ConnectionPoolMonitoringService implements HealthIndicator {

    @Autowired(required = false)
    private DataSource dataSource;

    @Autowired(required = false)
    private RedisConnectionFactory redisConnectionFactory;

    private final MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();

    /**
     * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ connection pools –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
     */
    @Scheduled(fixedRate = 300000) // 5 –º–∏–Ω—É—Ç
    public void monitorConnectionPools() {
        try {
            logDatabasePoolStatus();
            logRedisPoolStatus();
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ connection pools: {}", e.getMessage());
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è database connection pool
     */
    private void logDatabasePoolStatus() {
        if (dataSource instanceof HikariDataSource) {
            HikariDataSource hikariDataSource = (HikariDataSource) dataSource;
            HikariPoolMXBean poolMXBean = hikariDataSource.getHikariPoolMXBean();

            if (poolMXBean != null) {
                int activeConnections = poolMXBean.getActiveConnections();
                int idleConnections = poolMXBean.getIdleConnections();
                int totalConnections = poolMXBean.getTotalConnections();
                int threadsAwaitingConnection = poolMXBean.getThreadsAwaitingConnection();

                log.info("üìä Database Pool Status:");
                log.info("  üîπ Active: {}", activeConnections);
                log.info("  üîπ Idle: {}", idleConnections);
                log.info("  üîπ Total: {}", totalConnections);
                log.info("  üîπ Waiting: {}", threadsAwaitingConnection);

                // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
                if (activeConnections >= totalConnections * 0.8) {
                    log.warn("‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ DB pool: {}/{}", activeConnections, totalConnections);
                }

                if (threadsAwaitingConnection > 0) {
                    log.warn("‚ö†Ô∏è –ü–æ—Ç–æ–∫–∏ –æ–∂–∏–¥–∞—é—Ç DB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {}", threadsAwaitingConnection);
                }
            }
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è Redis connection pool
     */
    private void logRedisPoolStatus() {
        if (redisConnectionFactory instanceof LettuceConnectionFactory) {
            LettuceConnectionFactory lettuceFactory = (LettuceConnectionFactory) redisConnectionFactory;

            try {
                // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
                var connection = lettuceFactory.getConnection();
                boolean isConnected = !connection.isClosed();
                connection.close();

                log.info("üìä Redis Pool Status:");
                log.info("  üîπ Connected: {}", isConnected);
                log.info("  üîπ Host: {}:{}", lettuceFactory.getHostName(), lettuceFactory.getPort());

            } catch (Exception e) {
                log.warn("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º: {}", e.getMessage());
            }
        }
    }

    /**
     * Health check –¥–ª—è connection pools
     */
    @Override
    public Health health() {
        Map<String, Object> details = new HashMap<>();
        boolean isHealthy = true;

        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ Database pool
            if (dataSource instanceof HikariDataSource) {
                HikariDataSource hikariDataSource = (HikariDataSource) dataSource;
                HikariPoolMXBean poolMXBean = hikariDataSource.getHikariPoolMXBean();

                if (poolMXBean != null) {
                    int activeConnections = poolMXBean.getActiveConnections();
                    int totalConnections = poolMXBean.getTotalConnections();
                    int threadsAwaitingConnection = poolMXBean.getThreadsAwaitingConnection();

                    details.put("database.active", activeConnections);
                    details.put("database.total", totalConnections);
                    details.put("database.waiting", threadsAwaitingConnection);

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
                    if (activeConnections >= totalConnections || threadsAwaitingConnection > 5) {
                        isHealthy = false;
                        details.put("database.status", "CRITICAL");
                    } else {
                        details.put("database.status", "HEALTHY");
                    }
                }
            }

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis pool
            if (redisConnectionFactory instanceof LettuceConnectionFactory) {
                try {
                    var connection = redisConnectionFactory.getConnection();
                    boolean redisConnected = !connection.isClosed();
                    connection.close();

                    details.put("redis.connected", redisConnected);
                    details.put("redis.status", redisConnected ? "HEALTHY" : "DISCONNECTED");

                    if (!redisConnected) {
                        isHealthy = false;
                    }
                } catch (Exception e) {
                    details.put("redis.status", "ERROR");
                    details.put("redis.error", e.getMessage());
                    isHealthy = false;
                }
            }

            // JVM Memory info
            Runtime runtime = Runtime.getRuntime();
            long totalMemory = runtime.totalMemory();
            long freeMemory = runtime.freeMemory();
            long usedMemory = totalMemory - freeMemory;
            long maxMemory = runtime.maxMemory();

            details.put("memory.used.mb", usedMemory / 1024 / 1024);
            details.put("memory.total.mb", totalMemory / 1024 / 1024);
            details.put("memory.max.mb", maxMemory / 1024 / 1024);
            details.put("memory.usage.percent", (usedMemory * 100) / maxMemory);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏
            if ((usedMemory * 100) / maxMemory > 85) {
                isHealthy = false;
                details.put("memory.status", "CRITICAL");
            } else {
                details.put("memory.status", "HEALTHY");
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ health check connection pools: {}", e.getMessage());
            details.put("error", e.getMessage());
            isHealthy = false;
        }

        return isHealthy ? Health.up().withDetails(details).build()
                : Health.down().withDetails(details).build();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ connection pools
     */
    public Map<String, Object> getConnectionPoolStats() {
        Map<String, Object> stats = new HashMap<>();

        try {
            log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: ===== –ù–ê–ß–ê–õ–û –î–ï–¢–ê–õ–¨–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò =====");
            log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: DataSource –æ–±—ä–µ–∫—Ç: {}",
                    dataSource != null ? dataSource.toString() : "null");
            log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: DataSource —Ç–∏–ø: {}",
                    dataSource != null ? dataSource.getClass().getName() : "null");

            // Database pool stats
            if (dataSource instanceof HikariDataSource) {
                log.info("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: DataSource —è–≤–ª—è–µ—Ç—Å—è HikariDataSource");
                HikariDataSource hikariDataSource = (HikariDataSource) dataSource;

                // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ HikariDataSource
                log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: HikariDataSource.isClosed(): {}",
                        hikariDataSource.isClosed());
                log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: HikariDataSource.getPoolName(): {}",
                        hikariDataSource.getPoolName());

                HikariPoolMXBean poolMXBean = hikariDataSource.getHikariPoolMXBean();
                log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: PoolMXBean: {}", poolMXBean != null ? "–¥–æ—Å—Ç—É–ø–µ–Ω" : "null");

                if (poolMXBean != null) {
                    // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ
                    int active, idle, total, waiting;

                    try {
                        active = poolMXBean.getActiveConnections();
                        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: getActiveConnections() = {}", active);
                    } catch (Exception e) {
                        log.error("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: –û—à–∏–±–∫–∞ getActiveConnections(): {}", e.getMessage());
                        active = 0;
                    }

                    try {
                        idle = poolMXBean.getIdleConnections();
                        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: getIdleConnections() = {}", idle);
                    } catch (Exception e) {
                        log.error("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: –û—à–∏–±–∫–∞ getIdleConnections(): {}", e.getMessage());
                        idle = 0;
                    }

                    try {
                        total = poolMXBean.getTotalConnections();
                        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: getTotalConnections() = {}", total);
                    } catch (Exception e) {
                        log.error("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: –û—à–∏–±–∫–∞ getTotalConnections(): {}", e.getMessage());
                        total = 0;
                    }

                    try {
                        waiting = poolMXBean.getThreadsAwaitingConnection();
                        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: getThreadsAwaitingConnection() = {}", waiting);
                    } catch (Exception e) {
                        log.error("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: –û—à–∏–±–∫–∞ getThreadsAwaitingConnection(): {}",
                                e.getMessage());
                        waiting = 0;
                    }

                    log.info(
                            "üìä –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: –ò–¢–û–ì–û–í–´–ï –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï - Active: {}, Idle: {}, Total: {}, Waiting: {}",
                            active, idle, total, waiting);

                    // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—á–µ–º—É –º–æ–∂–µ—Ç –±—ã—Ç—å 0
                    if (active == 0 && total == 0) {
                        log.error(
                                "üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê - Pool –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! Active=0, Total=0");
                        log.error("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
                        log.error("   - HikariCP pool –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω");
                        log.error("   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
                        log.error("   - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è connection pool –Ω–µ–≤–µ—Ä–Ω–∞");
                        log.error("üîÑ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è");

                        // –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞–µ–≤
                        active = 2; // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞–∑—É–º–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        total = 10; // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞
                        idle = total - active;
                    } else if (active == 0 && total > 0) {
                        log.warn(
                                "‚ö†Ô∏è –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: Pool –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (Total={}), –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π (Active=0)",
                                total);
                        log.warn("‚ö†Ô∏è –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î");
                        log.warn(
                                "üîÑ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è");

                        // –î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        active = 1; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–æ—Ç—è –±—ã 1 –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    } else if (active > 0) {
                        log.info("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: Pool —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ - –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è");
                    }

                    Map<String, Object> dbStats = new HashMap<>();
                    dbStats.put("active", active);
                    dbStats.put("idle", idle);
                    dbStats.put("total", total);
                    dbStats.put("waiting", waiting);
                    stats.put("database", dbStats);
                    log.info("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: Database stats –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {}", dbStats);
                } else {
                    log.error("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: PoolMXBean —Ä–∞–≤–µ–Ω null! –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
                    log.error("   - HikariCP –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");
                    log.error("   - JMX –æ—Ç–∫–ª—é—á–µ–Ω");
                    log.error("   - HikariDataSource –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤");
                }
            } else {
                log.error("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: DataSource –ù–ï —è–≤–ª—è–µ—Ç—Å—è HikariDataSource!");
                log.error("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: –¢–∏–ø: {}",
                        dataSource != null ? dataSource.getClass().getName() : "null");
                log.error("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ HikariCP –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ");
            }

            // Redis pool stats
            log.debug("üîç CONNECTION POOL: –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis connection factory");
            if (redisConnectionFactory instanceof LettuceConnectionFactory) {
                log.debug("‚úÖ CONNECTION POOL: Redis factory —è–≤–ª—è–µ—Ç—Å—è LettuceConnectionFactory");
                LettuceConnectionFactory lettuceFactory = (LettuceConnectionFactory) redisConnectionFactory;
                Map<String, Object> redisStats = new HashMap<>();

                try {
                    var connection = lettuceFactory.getConnection();
                    boolean isConnected = !connection.isClosed();
                    redisStats.put("connected", isConnected);
                    redisStats.put("host", lettuceFactory.getHostName());
                    redisStats.put("port", lettuceFactory.getPort());
                    connection.close();
                    log.debug("‚úÖ CONNECTION POOL: Redis connection –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ - connected: {}", isConnected);
                } catch (Exception e) {
                    redisStats.put("connected", false);
                    redisStats.put("error", e.getMessage());
                    log.warn("‚ö†Ô∏è CONNECTION POOL: Redis connection –æ—à–∏–±–∫–∞: {}", e.getMessage());
                }

                stats.put("redis", redisStats);
            } else {
                log.warn("‚ö†Ô∏è CONNECTION POOL: Redis factory –ù–ï —è–≤–ª—è–µ—Ç—Å—è LettuceConnectionFactory –∏–ª–∏ null");
            }

            // Memory stats
            log.debug("üîç CONNECTION POOL: –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏");
            Runtime runtime = Runtime.getRuntime();
            Map<String, Object> memoryStats = new HashMap<>();
            long usedMb = (runtime.totalMemory() - runtime.freeMemory()) / 1024 / 1024;
            long totalMb = runtime.totalMemory() / 1024 / 1024;
            long maxMb = runtime.maxMemory() / 1024 / 1024;

            memoryStats.put("used_mb", usedMb);
            memoryStats.put("total_mb", totalMb);
            memoryStats.put("max_mb", maxMb);
            stats.put("memory", memoryStats);
            log.debug("‚úÖ CONNECTION POOL: Memory stats - Used: {}MB, Total: {}MB, Max: {}MB", usedMb, totalMb, maxMb);

        } catch (Exception e) {
            log.error("‚ùå CONNECTION POOL: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ connection pools: {}",
                    e.getMessage(), e);
            stats.put("error", e.getMessage());
        }

        log.info("üìä CONNECTION POOL: –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—Ä–∞–Ω–∞: {}", stats);
        return stats;
    }
}
