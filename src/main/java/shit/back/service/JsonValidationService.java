package shit.back.service;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –°–ï–†–í–ò–°: –í–∞–ª–∏–¥–∞—Ü–∏—è JSON –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è parsing –æ—à–∏–±–æ–∫
 * –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è JSON –≤ SSE —Å–æ–±—ã—Ç–∏—è—Ö
 */
@Service
public class JsonValidationService {

    private static final Logger log = LoggerFactory.getLogger(JsonValidationService.class);

    private final ObjectMapper objectMapper;

    public JsonValidationService() {
        this.objectMapper = new ObjectMapper();
        this.objectMapper.registerModule(new JavaTimeModule());
        this.objectMapper.disable(com.fasterxml.jackson.databind.SerializationFeature.WRITE_DATES_AS_TIMESTAMPS);
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è JSON —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
     */
    public boolean isValidJson(String jsonString) {
        try {
            objectMapper.readTree(jsonString);
            return true;
        } catch (Exception e) {
            log.error("‚ùå JSON –í–ê–õ–ò–î–ê–¶–ò–Ø: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON: {}", e.getMessage());
            log.debug("‚ùå JSON –í–ê–õ–ò–î–ê–¶–ò–Ø: –ü—Ä–æ–±–ª–µ–º–Ω—ã–π JSON: {}", jsonString);
            return false;
        }
    }

    /**
     * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è JSON –¥–ª—è performance-metrics
     */
    public String validateAndFixPerformanceMetricsJson(Map<String, Object> metricsData) {
        try {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            Map<String, Object> safeData = new LinkedHashMap<>();

            // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∏ –æ—á–∏—â–∞–µ–º –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ
            safeData.put("responseTime", validateNumericField(metricsData.get("responseTime"), 100.0));
            safeData.put("averageResponseTime", validateNumericField(metricsData.get("averageResponseTime"), 100.0));
            safeData.put("memoryUsage", validateIntegerField(metricsData.get("memoryUsage"), 70));
            safeData.put("memoryUsagePercent", validateIntegerField(metricsData.get("memoryUsagePercent"), 70));
            safeData.put("cacheHitRatio", validateIntegerField(metricsData.get("cacheHitRatio"), 90));
            safeData.put("totalUsers", validateLongField(metricsData.get("totalUsers"), 0L));
            safeData.put("activeUsers", validateLongField(metricsData.get("activeUsers"), 0L));
            safeData.put("onlineUsers", validateLongField(metricsData.get("onlineUsers"), 0L));
            safeData.put("totalOrders", validateLongField(metricsData.get("totalOrders"), 0L));
            safeData.put("healthScore", validateIntegerField(metricsData.get("healthScore"), 80));
            safeData.put("uptime", validateLongField(metricsData.get("uptime"), 3600L));
            safeData.put("timestamp", validateTimestampField(metricsData.get("timestamp")));
            safeData.put("source", validateStringField(metricsData.get("source"), "validated-source"));
            safeData.put("collectionNumber", validateLongField(metricsData.get("collectionNumber"), 1L));
            safeData.put("success", true);

            // –ö–†–ò–¢–ò–ß–ù–´–ï –ù–û–í–´–ï –ü–û–õ–Ø Database & Cache - –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê
            Object dbPoolUsageInput = metricsData.get("dbPoolUsage");
            Object cacheMissRatioInput = metricsData.get("cacheMissRatio");
            Object activeDbConnectionsInput = metricsData.get("activeDbConnections");

            log.info(
                    "üîç JSON VALIDATION –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Input DB fields - dbPoolUsage={}, cacheMissRatio={}, activeDbConnections={}",
                    dbPoolUsageInput, cacheMissRatioInput, activeDbConnectionsInput);

            safeData.put("dbPoolUsage", validateIntegerField(dbPoolUsageInput, 50));
            safeData.put("cacheMissRatio", validateIntegerField(cacheMissRatioInput, 10));
            safeData.put("activeDbConnections", validateIntegerField(activeDbConnectionsInput, 3));

            log.info(
                    "üîç JSON VALIDATION –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Output DB fields - dbPoolUsage={}, cacheMissRatio={}, activeDbConnections={}",
                    safeData.get("dbPoolUsage"), safeData.get("cacheMissRatio"), safeData.get("activeDbConnections"));

            // –°–µ—Ä–∏–∞–ª–∏–∑—É–µ–º –≤ JSON
            String jsonString = objectMapper.writeValueAsString(safeData);

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            if (!isValidJson(jsonString)) {
                throw new RuntimeException("JSON validation failed after creation");
            }

            log.debug("‚úÖ JSON –í–ê–õ–ò–î–ê–¶–ò–Ø: Performance metrics JSON –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é");
            return jsonString;

        } catch (Exception e) {
            log.error("‚ùå JSON –í–ê–õ–ò–î–ê–¶–ò–Ø: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ performance metrics: {}", e.getMessage(), e);
            return createFallbackPerformanceMetricsJson();
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –ø–æ–ª—è
     */
    private Double validateNumericField(Object value, Double defaultValue) {
        if (value == null)
            return defaultValue;

        try {
            if (value instanceof Number) {
                double result = ((Number) value).doubleValue();
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ NaN –∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å
                if (Double.isNaN(result) || Double.isInfinite(result)) {
                    return defaultValue;
                }
                return Math.round(result * 10.0) / 10.0; // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞
            }
            return Double.parseDouble(value.toString());
        } catch (Exception e) {
            log.debug("Invalid numeric field: {}, using default: {}", value, defaultValue);
            return defaultValue;
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—è
     */
    private Integer validateIntegerField(Object value, Integer defaultValue) {
        if (value == null)
            return defaultValue;

        try {
            if (value instanceof Number) {
                return ((Number) value).intValue();
            }
            return Integer.parseInt(value.toString());
        } catch (Exception e) {
            log.debug("Invalid integer field: {}, using default: {}", value, defaultValue);
            return defaultValue;
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è long –ø–æ–ª—è
     */
    private Long validateLongField(Object value, Long defaultValue) {
        if (value == null)
            return defaultValue;

        try {
            if (value instanceof Number) {
                return ((Number) value).longValue();
            }
            return Long.parseLong(value.toString());
        } catch (Exception e) {
            log.debug("Invalid long field: {}, using default: {}", value, defaultValue);
            return defaultValue;
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø–æ–ª—è
     */
    private String validateStringField(Object value, String defaultValue) {
        if (value == null)
            return defaultValue;

        String stringValue = value.toString();
        // –£–¥–∞–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è JSON
        return stringValue.replaceAll("[\"'\\\\\\r\\n\\t]", "").trim();
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è timestamp –ø–æ–ª—è
     */
    private String validateTimestampField(Object value) {
        try {
            if (value instanceof LocalDateTime) {
                return ((LocalDateTime) value).format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);
            } else if (value instanceof String) {
                String stringValue = (String) value;
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–≤—ã—á–µ–∫ –∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
                return stringValue.replaceAll("[\"'\\\\]", "");
            }
        } catch (Exception e) {
            log.debug("Invalid timestamp field: {}", value);
        }

        return LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME);
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ fallback JSON –¥–ª—è performance metrics
     */
    private String createFallbackPerformanceMetricsJson() {
        try {
            Map<String, Object> fallbackData = new LinkedHashMap<>();
            fallbackData.put("responseTime", 100.0);
            fallbackData.put("averageResponseTime", 100.0);
            fallbackData.put("memoryUsage", 70);
            fallbackData.put("memoryUsagePercent", 70);
            fallbackData.put("cacheHitRatio", 80);
            fallbackData.put("totalUsers", 0L);
            fallbackData.put("activeUsers", 0L);
            fallbackData.put("onlineUsers", 0L);
            fallbackData.put("totalOrders", 0L);
            fallbackData.put("healthScore", 50);
            fallbackData.put("uptime", 3600L);
            fallbackData.put("timestamp", LocalDateTime.now().format(DateTimeFormatter.ISO_LOCAL_DATE_TIME));
            fallbackData.put("source", "fallback-validation-error");
            fallbackData.put("collectionNumber", 0L);
            fallbackData.put("success", false);
            fallbackData.put("error", "JSON validation failed");

            // –ù–û–í–´–ï FALLBACK –ó–ù–ê–ß–ï–ù–ò–Ø –¥–ª—è Database & Cache
            fallbackData.put("dbPoolUsage", 50);
            fallbackData.put("cacheMissRatio", 10);
            fallbackData.put("activeDbConnections", 3);

            return objectMapper.writeValueAsString(fallbackData);
        } catch (Exception e) {
            log.error("‚ùå JSON –í–ê–õ–ò–î–ê–¶–ò–Ø: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback JSON: {}", e.getMessage());
            return "{\"error\":\"Critical JSON validation failure\",\"success\":false}";
        }
    }

    /**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—à–∏–±–æ–∫
     */
    public void logJsonParsingError(String jsonString, Exception error) {
        log.error("‚ùå JSON PARSING ERROR: {}", error.getMessage());
        log.error("‚ùå –ü–†–û–ë–õ–ï–ú–ù–´–ô JSON: {}",
                jsonString.length() > 500 ? jsonString.substring(0, 500) + "..." : jsonString);

        // –ê–Ω–∞–ª–∏–∑ –≤–æ–∑–º–æ–∂–Ω–æ–π –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏
        if (error.getMessage().contains("expected double-quoted property name")) {
            log.error("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í–µ—Ä–æ—è—Ç–Ω–∞—è –ø—Ä–∏—á–∏–Ω–∞ - –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –≤–º–µ—Å—Ç–æ –¥–≤–æ–π–Ω—ã—Ö –≤ –∏–º–µ–Ω–∞—Ö —Å–≤–æ–π—Å—Ç–≤");
        }
        if (error.getMessage().contains("line") && error.getMessage().contains("column")) {
            log.error("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É–∫–∞–∑–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≤ JSON –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ—ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤");
        }
    }
}