package shit.back.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.cache.annotation.CacheEvict;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import shit.back.entity.UserSessionEntity;
import shit.back.model.UserSession;
import shit.back.model.UserCountsBatchResult;
import shit.back.model.Order;
import shit.back.model.StarPackage;
import shit.back.repository.UserSessionJpaRepository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * –í–´–°–û–ö–û–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–´–ô —Å–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Å–µ—Å—Å–∏—è–º–∏
 * 
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:
 * 1. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 * 2. Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ë–î
 * 3. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
 * 4. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã —Å —Å–æ—Å—Ç–∞–≤–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏
 * 5. In-memory –∫—ç—à –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
 * 
 * –¶–ï–õ–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:
 * - createOrUpdateSessionEntity: —Å 100+ms –¥–æ <25ms
 * - getUserCountsBatch: –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è N+1 –ø—Ä–æ–±–ª–µ–º—ã
 * - Cache hit ratio: >90%
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã: SOLID, DRY, Clean Code, KISS, Fail-Fast, YAGNI
 */
@Slf4j
@Service
@Transactional
public class OptimizedUserSessionService {

    @Autowired
    private UserSessionJpaRepository sessionRepository;

    // –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π in-memory –∫—ç—à
    private final Map<Long, UserSession> activeSessionsCache = new ConcurrentHashMap<>();
    private final Map<String, Order> ordersCache = new ConcurrentHashMap<>();

    // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    private final AtomicInteger cacheHits = new AtomicInteger(0);
    private final AtomicInteger cacheMisses = new AtomicInteger(0);
    private final AtomicInteger dbOperations = new AtomicInteger(0);

    // –ü–æ—Ä–æ–≥–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    private static final int PERFORMANCE_THRESHOLD_MS = 25;
    private static final int CACHE_SIZE_LIMIT = 10000;
    private static final int CLEANUP_BATCH_SIZE = 100;

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
     * –¶–µ–ª—å: <25ms –≤–º–µ—Å—Ç–æ 100+ms
     */
    public UserSession getOrCreateSessionOptimized(Long userId, String username, String firstName, String lastName) {
        long startTime = System.currentTimeMillis();

        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è (–ø—Ä–∏–Ω—Ü–∏–ø Fail-Fast)
            if (userId == null || userId <= 0) {
                throw new IllegalArgumentException("Invalid user ID: " + userId);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º in-memory –∫—ç—à —Å–Ω–∞—á–∞–ª–∞
            UserSession cachedSession = activeSessionsCache.get(userId);
            if (cachedSession != null) {
                cachedSession.updateActivity();
                cacheHits.incrementAndGet();

                long duration = System.currentTimeMillis() - startTime;
                log.debug("‚úÖ CACHE HIT: –°–µ—Å—Å–∏—è –¥–ª—è userId={} –ø–æ–ª—É—á–µ–Ω–∞ –∑–∞ {}ms", userId, duration);

                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
                updateSessionAsyncIfNeeded(cachedSession);
                return cachedSession;
            }

            cacheMisses.incrementAndGet();

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            UserSession session = new UserSession(userId, username, firstName, lastName);

            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—ç—à
            if (activeSessionsCache.size() < CACHE_SIZE_LIMIT) {
                activeSessionsCache.put(userId, session);
            } else {
                log.warn("‚ö†Ô∏è CACHE FULL: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫—ç—à–∞ {}, –æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π", CACHE_SIZE_LIMIT);
                cleanupOldCacheEntries();
            }

            // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å PostgreSQL
            synchronizeSessionAsyncOptimized(session);

            long duration = System.currentTimeMillis() - startTime;
            if (duration <= PERFORMANCE_THRESHOLD_MS) {
                log.debug("‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∑–∞ {}ms", duration);
            } else {
                log.warn("‚ö†Ô∏è PERFORMANCE: –°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –∑–∞–Ω—è–ª–æ {}ms (—Ü–µ–ª—å: <{}ms)",
                        duration, PERFORMANCE_THRESHOLD_MS);
            }

            return session;

        } catch (Exception e) {
            long duration = System.currentTimeMillis() - startTime;
            log.error("üö® –û–®–ò–ë–ö–ê: getOrCreateSession –¥–ª—è userId={} –ø–æ—Å–ª–µ {}ms: {}",
                    userId, duration, e.getMessage(), e);
            throw new RuntimeException("Failed to get or create session", e);
        }
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
     */
    public void updateSessionStateOptimized(Long userId, UserSession.SessionState state) {
        long startTime = System.currentTimeMillis();

        try {
            if (userId == null || userId <= 0 || state == null) {
                throw new IllegalArgumentException("Invalid parameters: userId=" + userId + ", state=" + state);
            }

            UserSession session = activeSessionsCache.get(userId);
            if (session != null) {
                session.setState(state);
                session.updateActivity();

                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –ë–î
                updateSessionAsyncIfNeeded(session);

                long duration = System.currentTimeMillis() - startTime;
                log.debug("‚úÖ STATE UPDATE: userId={}, state={} –∑–∞ {}ms", userId, state, duration);
            } else {
                log.warn("‚ö†Ô∏è SESSION NOT FOUND: userId={} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è", userId);
            }

        } catch (Exception e) {
            long duration = System.currentTimeMillis() - startTime;
            log.error("üö® –û–®–ò–ë–ö–ê: updateSessionState –¥–ª—è userId={} –ø–æ—Å–ª–µ {}ms: {}",
                    userId, duration, e.getMessage(), e);
        }
    }

    /**
     * –í–´–°–û–ö–û–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–ê–Ø —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –ë–î
     */
    @Async("userActivityLoggingExecutor")
    public void synchronizeSessionAsyncOptimized(UserSession userSession) {
        long startTime = System.currentTimeMillis();

        try {
            createOrUpdateSessionEntityOptimized(userSession);

            long duration = System.currentTimeMillis() - startTime;
            if (duration <= PERFORMANCE_THRESHOLD_MS) {
                log.debug("‚úÖ ASYNC SYNC: –°–µ—Å—Å–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ {}ms", duration);
            } else {
                log.warn("‚ö†Ô∏è SLOW SYNC: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ {}ms (—Ü–µ–ª—å: <{}ms)",
                        duration, PERFORMANCE_THRESHOLD_MS);
            }

        } catch (Exception e) {
            long duration = System.currentTimeMillis() - startTime;
            log.error("üö® SYNC ERROR: –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ—Å–ª–µ {}ms: {}", duration, e.getMessage(), e);
        }
    }

    /**
     * –ö–†–ò–¢–ò–ß–ï–°–ö–ò –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ entity –≤ PostgreSQL
     * –¶–µ–ª—å: <25ms –≤–º–µ—Å—Ç–æ 100+ms
     */
    @Transactional
    public UserSessionEntity createOrUpdateSessionEntityOptimized(UserSession userSession) {
        long startTime = System.currentTimeMillis();
        dbOperations.incrementAndGet();

        try {
            Optional<UserSessionEntity> existingOpt = sessionRepository.findByUserId(userSession.getUserId());

            UserSessionEntity entity;
            if (existingOpt.isPresent()) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é entity
                entity = existingOpt.get();
                updateEntityFromSession(entity, userSession);
            } else {
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é entity
                entity = createEntityFromSession(userSession);
            }

            UserSessionEntity saved = sessionRepository.save(entity);

            long duration = System.currentTimeMillis() - startTime;
            if (duration <= PERFORMANCE_THRESHOLD_MS) {
                log.debug("‚úÖ DB OPTIMIZED: –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∑–∞ {}ms", duration);
            } else {
                log.warn("üö® DB SLOW: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–Ω—è–ª–æ {}ms (—Ü–µ–ª—å: <{}ms) –¥–ª—è userId={}",
                        duration, PERFORMANCE_THRESHOLD_MS, userSession.getUserId());
            }

            return saved;

        } catch (Exception e) {
            long duration = System.currentTimeMillis() - startTime;
            log.error("üö® DB ERROR: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ userId={} –ø–æ—Å–ª–µ {}ms: {}",
                    userSession.getUserId(), duration, e.getMessage(), e);
            throw new RuntimeException("Failed to create/update session entity", e);
        }
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô batch –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ä–µ—à–µ–Ω–∏—è N+1 –ø—Ä–æ–±–ª–µ–º—ã
     */
    @Cacheable(value = "userCountsCache", key = "'batch_counts'")
    @Transactional(readOnly = true)
    public UserCountsBatchResult getUserCountsBatchOptimized() {
        long startTime = System.currentTimeMillis();

        try {
            LocalDateTime activeThreshold = LocalDateTime.now().minusHours(24);
            LocalDateTime onlineThreshold = LocalDateTime.now().minusMinutes(5);

            UserCountsBatchResult result = sessionRepository.getUserCountsBatch(activeThreshold, onlineThreshold);

            long duration = System.currentTimeMillis() - startTime;
            log.info("üöÄ BATCH OPTIMIZED: getUserCountsBatch –∑–∞ {}ms - SINGLE SQL –≤–º–µ—Å—Ç–æ 3 –∑–∞–ø—Ä–æ—Å–æ–≤!", duration);
            log.debug("üìä –†–ï–ó–£–õ–¨–¢–ê–¢: Total={}, Active={}, Online={}",
                    result.totalUsers(), result.activeUsers(), result.onlineUsers());

            return result;

        } catch (Exception e) {
            long duration = System.currentTimeMillis() - startTime;
            log.error("üö® BATCH ERROR: –û—à–∏–±–∫–∞ batch –∑–∞–ø—Ä–æ—Å–∞ –ø–æ—Å–ª–µ {}ms: {}", duration, e.getMessage(), e);
            return new UserCountsBatchResult(0L, 0L, 0L);
        }
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    @Cacheable(value = "activeSessionsCache", key = "'active_sessions'")
    @Transactional(readOnly = true)
    public List<UserSessionEntity> getActiveSessionsOptimized() {
        long startTime = System.currentTimeMillis();

        try {
            List<UserSessionEntity> sessions = sessionRepository.findByIsActiveTrueOrderByLastActivityDesc();

            long duration = System.currentTimeMillis() - startTime;
            log.debug("‚úÖ ACTIVE SESSIONS: –ü–æ–ª—É—á–µ–Ω–æ {} —Å–µ—Å—Å–∏–π –∑–∞ {}ms", sessions.size(), duration);

            return sessions;

        } catch (Exception e) {
            long duration = System.currentTimeMillis() - startTime;
            log.error("üö® ACTIVE SESSIONS ERROR: –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {}ms: {}", duration, e.getMessage(), e);
            return List.of();
        }
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
     */
    @Async("userActivityLoggingExecutor")
    private void updateSessionAsyncIfNeeded(UserSession session) {
        if (shouldUpdateSession(session)) {
            synchronizeSessionAsyncOptimized(session);
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –≤ –ë–î
     */
    private boolean shouldUpdateSession(UserSession session) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—ã–ª–∞ –±–æ–ª–µ–µ 1 –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥
        return session.getLastActivity().isBefore(LocalDateTime.now().minusMinutes(1));
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞
     */
    private void cleanupOldCacheEntries() {
        LocalDateTime cutoff = LocalDateTime.now().minusHours(2);
        int removedCount = 0;

        activeSessionsCache.entrySet().removeIf(entry -> {
            if (entry.getValue().getLastActivity().isBefore(cutoff)) {
                return true;
            }
            return false;
        });

        if (removedCount > 0) {
            log.info("üßπ CACHE CLEANUP: –£–¥–∞–ª–µ–Ω–æ {} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞", removedCount);
        }
    }

    /**
     * –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
     */
    @Scheduled(fixedRate = 300000) // –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    @CacheEvict(value = { "userCountsCache", "activeSessionsCache" }, allEntries = true)
    public void scheduledCacheCleanup() {
        cleanupOldCacheEntries();

        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞
        logCacheStatistics();
    }

    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
     */
    private void logCacheStatistics() {
        int hits = cacheHits.get();
        int misses = cacheMisses.get();
        int total = hits + misses;
        double hitRatio = total > 0 ? (double) hits / total * 100 : 0;

        log.info("üìä CACHE STATS: –ü–æ–ø–∞–¥–∞–Ω–∏–π: {}, –ü—Ä–æ–º–∞—Ö–æ–≤: {}, Hit Ratio: {:.1f}%, DB –æ–ø–µ—Ä–∞—Ü–∏–π: {}",
                hits, misses, hitRatio, dbOperations.get());
        log.info("üìä CACHE SIZE: –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –≤ –∫—ç—à–µ: {}/{}",
                activeSessionsCache.size(), CACHE_SIZE_LIMIT);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    public PerformanceMetrics getPerformanceMetrics() {
        int hits = cacheHits.get();
        int misses = cacheMisses.get();
        int total = hits + misses;
        double hitRatio = total > 0 ? (double) hits / total * 100 : 0;

        return new PerformanceMetrics(
                hits, misses, hitRatio,
                activeSessionsCache.size(), CACHE_SIZE_LIMIT,
                dbOperations.get(), PERFORMANCE_THRESHOLD_MS);
    }

    /**
     * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å entity
     */
    private void updateEntityFromSession(UserSessionEntity entity, UserSession session) {
        entity.setUsername(session.getUsername());
        entity.setFirstName(session.getFirstName());
        entity.setLastName(session.getLastName());

        if (session.getState() != null) {
            entity.setState(convertSessionState(session.getState()));
        }

        if (session.getOrderId() != null) {
            entity.setCurrentOrderId(session.getOrderId());
        }

        if (session.getPaymentType() != null) {
            entity.setPaymentType(session.getPaymentType());
        }

        entity.updateActivity();
    }

    private UserSessionEntity createEntityFromSession(UserSession session) {
        UserSessionEntity entity = new UserSessionEntity(
                session.getUserId(),
                session.getUsername(),
                session.getFirstName(),
                session.getLastName());

        if (session.getState() != null) {
            entity.setState(convertSessionState(session.getState()));
        }

        if (session.getOrderId() != null) {
            entity.setCurrentOrderId(session.getOrderId());
        }

        if (session.getPaymentType() != null) {
            entity.setPaymentType(session.getPaymentType());
        }

        return entity;
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
     */
    private UserSessionEntity.SessionState convertSessionState(UserSession.SessionState state) {
        return switch (state) {
            case IDLE -> UserSessionEntity.SessionState.IDLE;
            case SELECTING_PACKAGE -> UserSessionEntity.SessionState.SELECTING_PACKAGE;
            case CONFIRMING_ORDER -> UserSessionEntity.SessionState.CONFIRMING_ORDER;
            case AWAITING_PAYMENT -> UserSessionEntity.SessionState.AWAITING_PAYMENT;
            case PAYMENT_PROCESSING -> UserSessionEntity.SessionState.PAYMENT_PROCESSING;
            case COMPLETED -> UserSessionEntity.SessionState.COMPLETED;
            case TOPPING_UP_BALANCE -> UserSessionEntity.SessionState.TOPPING_UP_BALANCE;
            case SELECTING_PAYMENT_TYPE -> UserSessionEntity.SessionState.SELECTING_PAYMENT_TYPE;
            case BALANCE_PAYMENT_PROCESSING -> UserSessionEntity.SessionState.BALANCE_PAYMENT_PROCESSING;
            case MIXED_PAYMENT_PROCESSING -> UserSessionEntity.SessionState.MIXED_PAYMENT_PROCESSING;
            case ENTERING_CUSTOM_AMOUNT -> UserSessionEntity.SessionState.ENTERING_CUSTOM_AMOUNT;
        };
    }

    /**
     * –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    public static class PerformanceMetrics {
        public final int cacheHits;
        public final int cacheMisses;
        public final double hitRatio;
        public final int cacheSize;
        public final int maxCacheSize;
        public final int dbOperations;
        public final int performanceThresholdMs;

        public PerformanceMetrics(int cacheHits, int cacheMisses, double hitRatio,
                int cacheSize, int maxCacheSize, int dbOperations, int performanceThresholdMs) {
            this.cacheHits = cacheHits;
            this.cacheMisses = cacheMisses;
            this.hitRatio = hitRatio;
            this.cacheSize = cacheSize;
            this.maxCacheSize = maxCacheSize;
            this.dbOperations = dbOperations;
            this.performanceThresholdMs = performanceThresholdMs;
        }

        @Override
        public String toString() {
            return String.format(
                    "SessionMetrics{hits=%d, misses=%d, hitRatio=%.1f%%, cache=%d/%d, dbOps=%d, threshold=%dms}",
                    cacheHits, cacheMisses, hitRatio, cacheSize, maxCacheSize, dbOperations, performanceThresholdMs);
        }
    }
}