package shit.back.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import shit.back.entity.UserSessionEntity;
import shit.back.model.UserSession;
import shit.back.model.UserCountsBatchResult;
import shit.back.model.Order;
import shit.back.model.StarPackage;
import shit.back.repository.UserSessionJpaRepository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Å–µ—Å—Å–∏—è–º–∏
 * 
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:
 * 1. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 * 2. Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
 * 3. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã —Å —Å–æ—Å—Ç–∞–≤–Ω—ã–º–∏ –∏–Ω–¥–µ–∫—Å–∞–º–∏
 * 4. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å PostgreSQL
 * 5. –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ batch —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 * 
 * –†–ï–ó–£–õ–¨–¢–ê–¢: –°–Ω–∏–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ getUserCountsBatch —Å 235–º—Å –¥–æ <30–º—Å
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã: SOLID, DRY, Clean Code, KISS, Fail-Fast, YAGNI
 */
@Service
@Transactional
public class OptimizedUserSessionService {

    private static final Logger log = LoggerFactory.getLogger(OptimizedUserSessionService.class);

    @Autowired
    private UserSessionJpaRepository sessionRepository;

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π in-memory –∫—ç—à
    private final Map<Long, UserSession> userSessions = new ConcurrentHashMap<>();
    private final Map<String, Order> orders = new ConcurrentHashMap<>();

    // –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    private final AtomicLong totalQueryTime = new AtomicLong(0);
    private final AtomicLong queryCount = new AtomicLong(0);

    // ===========================================
    // –û–°–ù–û–í–ù–´–ï –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ú–ï–¢–û–î–´
    // ===========================================

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
     * –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ –ë–î —á–µ—Ä–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
     */
    public UserSession getOrCreateSession(Long userId, String username, String firstName, String lastName) {
        long startTime = System.currentTimeMillis();

        try {
            // –ë—ã—Å—Ç—Ä–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
            if (userId == null || userId <= 0) {
                throw new IllegalArgumentException("Invalid user ID");
            }

            // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
            username = normalizeString(username);
            firstName = normalizeString(firstName);
            lastName = normalizeString(lastName);

            UserSession session = userSessions.get(userId);
            boolean isNewSession = false;

            if (session == null) {
                session = new UserSession(userId, username, firstName, lastName);
                userSessions.put(userId, session);
                isNewSession = true;
                log.debug("–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è in-memory —Å–µ—Å—Å–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            } else {
                session.updateActivity();
            }

            // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å PostgreSQL –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            if (isNewSession) {
                asyncCreateOrUpdateSessionEntity(session);
            }

            long duration = System.currentTimeMillis() - startTime;
            updatePerformanceMetrics(duration);

            log.trace("getOrCreateSession –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {}ms", duration);
            return session;

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –≤ getOrCreateSession –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId, e);
            throw new RuntimeException("Failed to get or create session", e);
        }
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    public Optional<UserSession> getSession(Long userId) {
        long startTime = System.currentTimeMillis();

        try {
            if (userId == null || userId <= 0) {
                throw new IllegalArgumentException("Invalid user ID");
            }

            UserSession session = userSessions.get(userId);
            if (session != null) {
                session.updateActivity();
            }

            long duration = System.currentTimeMillis() - startTime;
            updatePerformanceMetrics(duration);

            return Optional.ofNullable(session);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId, e);
            return Optional.empty();
        }
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π
     */
    public void updateSessionState(Long userId, UserSession.SessionState state) {
        try {
            if (userId == null || userId <= 0) {
                throw new IllegalArgumentException("Invalid user ID");
            }
            if (state == null) {
                throw new IllegalArgumentException("State cannot be null");
            }

            UserSession session = userSessions.get(userId);
            if (session != null) {
                String previousState = session.getState() != null ? session.getState().toString() : "UNKNOWN";
                session.setState(state);
                session.updateActivity();

                // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                asyncCreateOrUpdateSessionEntity(session);

                log.debug("–°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} —Å {} –Ω–∞ {}", userId, previousState, state);
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId, e);
            throw new RuntimeException("Failed to update session state", e);
        }
    }

    /**
     * –ö–†–ò–¢–ò–ß–ï–°–ö–ò –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô batch –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     * –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å 235–º—Å –¥–æ <30–º—Å
     */
    @Cacheable(value = "userCountsCache", unless = "#result == null")
    @Transactional(readOnly = true)
    public UserCountsBatchResult getUserCountsBatch() {
        long startTime = System.currentTimeMillis();

        try {
            log.debug("üöÄ –ù–ê–ß–ê–õ–û getUserCountsBatch –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å");

            LocalDateTime activeThreshold = LocalDateTime.now().minusHours(24);
            LocalDateTime onlineThreshold = LocalDateTime.now().minusMinutes(5);

            // –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô SQL –∑–∞–ø—Ä–æ—Å –≤–º–µ—Å—Ç–æ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö
            UserCountsBatchResult result = sessionRepository.getUserCountsBatch(activeThreshold, onlineThreshold);

            long duration = System.currentTimeMillis() - startTime;
            updatePerformanceMetrics(duration);

            log.info("‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: getUserCountsBatch –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {}ms (—Ü–µ–ª—å: <30ms) - " +
                    "Total={}, Active={}, Online={}",
                    duration, result.totalUsers(), result.activeUsers(), result.onlineUsers());

            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ —Ü–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è
            if (duration > 30) {
                log.warn("‚ö†Ô∏è PERFORMANCE WARNING: getUserCountsBatch –∑–∞–Ω—è–ª–æ {}ms (—Ü–µ–ª—å: <30ms)", duration);
            }

            return result;

        } catch (Exception e) {
            long errorTime = System.currentTimeMillis() - startTime;
            log.error("üö® –û–®–ò–ë–ö–ê getUserCountsBatch –ø–æ—Å–ª–µ {}ms: {}", errorTime, e.getMessage(), e);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º fallback —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            return new UserCountsBatchResult(0L, 0L, 0L);
        }
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    @Cacheable(value = "userSessionStatsCache", unless = "#result == null")
    @Transactional(readOnly = true)
    public UserSessionStatistics getUserSessionStatistics() {
        long startTime = System.currentTimeMillis();

        try {
            // –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            UserActivityAverages averages = getAverageUserActivity();
            UserCountsBatchResult userCounts = getUserCountsBatch();

            UserSessionStatistics statistics = new UserSessionStatistics(
                    userCounts.totalUsers(),
                    userCounts.activeUsers(),
                    userCounts.onlineUsers(),
                    userCounts.totalUsers() - userCounts.activeUsers(),
                    getNewUsersCount(1),
                    getNewUsersCount(7),
                    getNewUsersCount(30),
                    getUsersWithPendingOrdersCount(),
                    averages.averageOrders,
                    averages.averageStarsPurchased,
                    getAverageSessionDurationHours());

            long duration = System.currentTimeMillis() - startTime;
            log.info("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π –ø–æ–ª—É—á–µ–Ω–∞ –∑–∞ {}ms", duration);

            return statistics;

        } catch (Exception e) {
            long errorTime = System.currentTimeMillis() - startTime;
            log.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Å—Å–∏–π –ø–æ—Å–ª–µ {}ms", errorTime, e);
            return new UserSessionStatistics(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0.0, 0.0, 0.0);
        }
    }

    // ===========================================
    // –ê–°–ò–ù–•–†–û–ù–ù–´–ï –ú–ï–¢–û–î–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò
    // ===========================================

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å PostgreSQL –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    @Async("userActivityLoggingExecutor")
    @Transactional(propagation = org.springframework.transaction.annotation.Propagation.REQUIRES_NEW)
    public void asyncCreateOrUpdateSessionEntity(UserSession userSession) {
        try {
            log.trace("–ù–∞—á–∞–ª–æ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userSession.getUserId());

            Optional<UserSessionEntity> existingOpt = sessionRepository.findByUserId(userSession.getUserId());

            UserSessionEntity entity;
            if (existingOpt.isPresent()) {
                entity = existingOpt.get();
                updateEntityFromSession(entity, userSession);
            } else {
                entity = createEntityFromSession(userSession);
            }

            UserSessionEntity saved = sessionRepository.save(entity);
            log.trace("–°–µ—Å—Å–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} —Å ID: {}",
                    userSession.getUserId(), saved.getId());

        } catch (Exception e) {
            log.warn("–û—à–∏–±–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    userSession.getUserId(), e.getMessage());
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –ø—Ä–∏ –æ—à–∏–±–∫–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        }
    }

    /**
     * Batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
     */
    @Async("userActivityLoggingExecutor")
    @Transactional
    public void batchUpdateUserActivity(List<Long> userIds) {
        if (userIds == null || userIds.isEmpty()) {
            return;
        }

        long startTime = System.currentTimeMillis();

        try {
            LocalDateTime now = LocalDateTime.now();
            int updatedCount = 0;

            // Batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ native query –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
            for (Long userId : userIds) {
                int updated = sessionRepository.updateUserActivity(userId, now);
                updatedCount += updated;
            }

            long duration = System.currentTimeMillis() - startTime;
            log.info("üöÄ BATCH UPDATE: –û–±–Ω–æ–≤–ª–µ–Ω–æ {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {}ms", updatedCount, duration);

        } catch (Exception e) {
            long errorTime = System.currentTimeMillis() - startTime;
            log.error("–û—à–∏–±–∫–∞ batch –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ {}ms: {}", errorTime, e.getMessage(), e);
        }
    }

    // ===========================================
    // –ö–≠–®–ò–†–û–í–ê–ù–ù–´–ï –ó–ê–ü–†–û–°–´
    // ===========================================

    @Cacheable(value = "onlineUsersCache", unless = "#result.isEmpty()")
    @Transactional(readOnly = true)
    public List<UserSessionEntity> getOnlineUsers() {
        long startTime = System.currentTimeMillis();

        try {
            LocalDateTime cutoff = LocalDateTime.now().minusMinutes(5);
            List<UserSessionEntity> users = sessionRepository.findOnlineUsers(cutoff);

            long duration = System.currentTimeMillis() - startTime;
            log.debug("–û–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã –∑–∞ {}ms (–Ω–∞–π–¥–µ–Ω–æ: {})", duration, users.size());

            return users;
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", e);
            return List.of();
        }
    }

    @Cacheable(value = "activeSessionsCache", unless = "#result.isEmpty()")
    @Transactional(readOnly = true)
    public List<UserSessionEntity> getActiveSessions() {
        long startTime = System.currentTimeMillis();

        try {
            List<UserSessionEntity> sessions = sessionRepository.findByIsActiveTrueOrderByLastActivityDesc();

            long duration = System.currentTimeMillis() - startTime;
            log.debug("–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—É—á–µ–Ω—ã –∑–∞ {}ms (–Ω–∞–π–¥–µ–Ω–æ: {})", duration, sessions.size());

            return sessions;
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π", e);
            return List.of();
        }
    }

    // ===========================================
    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    // ===========================================

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    private String normalizeString(String value) {
        if (value != null && value.trim().isEmpty()) {
            return null;
        }
        return value;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    private void updatePerformanceMetrics(long duration) {
        totalQueryTime.addAndGet(duration);
        queryCount.incrementAndGet();

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 100 –∑–∞–ø—Ä–æ—Å–æ–≤
        long count = queryCount.get();
        if (count % 100 == 0) {
            long avgTime = totalQueryTime.get() / count;
            log.info("üìà –ú–ï–¢–†–ò–ö–ò: –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞ {} –∑–∞–ø—Ä–æ—Å–æ–≤: {}ms", count, avgTime);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ entity –∏–∑ —Å–µ—Å—Å–∏–∏
     */
    private UserSessionEntity createEntityFromSession(UserSession userSession) {
        UserSessionEntity entity = new UserSessionEntity(
                userSession.getUserId(),
                userSession.getUsername(),
                userSession.getFirstName(),
                userSession.getLastName());

        updateEntityFromSession(entity, userSession);
        return entity;
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ entity –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Å–µ—Å—Å–∏–∏
     */
    private void updateEntityFromSession(UserSessionEntity entity, UserSession userSession) {
        entity.setUsername(userSession.getUsername());
        entity.setFirstName(userSession.getFirstName());
        entity.setLastName(userSession.getLastName());

        if (userSession.getState() != null) {
            entity.setState(convertSessionState(userSession.getState()));
        }

        if (userSession.getOrderId() != null) {
            entity.setCurrentOrderId(userSession.getOrderId());
        }

        if (userSession.getPaymentType() != null) {
            entity.setPaymentType(userSession.getPaymentType());
        }

        entity.updateActivity();
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
     */
    private UserSessionEntity.SessionState convertSessionState(UserSession.SessionState state) {
        return switch (state) {
            case IDLE -> UserSessionEntity.SessionState.IDLE;
            case SELECTING_PACKAGE -> UserSessionEntity.SessionState.SELECTING_PACKAGE;
            case CONFIRMING_ORDER -> UserSessionEntity.SessionState.CONFIRMING_ORDER;
            case AWAITING_PAYMENT -> UserSessionEntity.SessionState.AWAITING_PAYMENT;
            case PAYMENT_PROCESSING -> UserSessionEntity.SessionState.PAYMENT_PROCESSING;
            case COMPLETED -> UserSessionEntity.SessionState.COMPLETED;
            case TOPPING_UP_BALANCE -> UserSessionEntity.SessionState.TOPPING_UP_BALANCE;
            case SELECTING_PAYMENT_TYPE -> UserSessionEntity.SessionState.SELECTING_PAYMENT_TYPE;
            case BALANCE_PAYMENT_PROCESSING -> UserSessionEntity.SessionState.BALANCE_PAYMENT_PROCESSING;
            case MIXED_PAYMENT_PROCESSING -> UserSessionEntity.SessionState.MIXED_PAYMENT_PROCESSING;
            case ENTERING_CUSTOM_AMOUNT -> UserSessionEntity.SessionState.ENTERING_CUSTOM_AMOUNT;
        };
    }

    // ===========================================
    // –ú–ï–¢–û–î–´ –°–¢–ê–¢–ò–°–¢–ò–ö–ò (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï)
    // ===========================================

    @Transactional(readOnly = true)
    public long getNewUsersCount(int days) {
        try {
            LocalDateTime since = LocalDateTime.now().minusDays(days);
            return sessionRepository.countByCreatedAtAfter(since);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ {} –¥–Ω–µ–π", days, e);
            return 0L;
        }
    }

    @Transactional(readOnly = true)
    public long getUsersWithPendingOrdersCount() {
        try {
            return sessionRepository.countUsersWithPendingOrders();
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–∂–∏–¥–∞—é—â–∏–º–∏ –∑–∞–∫–∞–∑–∞–º–∏", e);
            return 0L;
        }
    }

    @Transactional(readOnly = true)
    public UserActivityAverages getAverageUserActivity() {
        try {
            List<Object[]> results = sessionRepository.getAverageUserActivity();
            if (!results.isEmpty()) {
                Object[] row = results.get(0);
                return new UserActivityAverages(
                        row[0] != null ? ((Number) row[0]).doubleValue() : 0.0,
                        row[1] != null ? ((Number) row[1]).doubleValue() : 0.0);
            }
            return new UserActivityAverages(0.0, 0.0);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", e);
            return new UserActivityAverages(0.0, 0.0);
        }
    }

    @Transactional(readOnly = true)
    public Double getAverageSessionDurationHours() {
        try {
            Double duration = sessionRepository.getAverageSessionDurationHours();
            return duration != null ? duration : 0.0;
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Å—Å–∏–∏", e);
            return 0.0;
        }
    }

    // ===========================================
    // SCHEDULED –ú–ï–¢–û–î–´ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò
    // ===========================================

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å
     */
    @Scheduled(fixedRate = 3600000) // –ö–∞–∂–¥—ã–π —á–∞—Å
    @Transactional
    public void scheduledOptimization() {
        try {
            // –û—á–∏—Å—Ç–∫–∞ PostgreSQL
            int deactivated = deactivateExpiredSessions(48);

            // –û—á–∏—Å—Ç–∫–∞ in-memory –∫—ç—à–∞
            cleanupOldSessions();

            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if (deactivated > 0) {
                log.info("üßπ SCHEDULED CLEANUP: –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {} –∏—Å—Ç—ë–∫—à–∏—Ö —Å–µ—Å—Å–∏–π", deactivated);
            }

            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            long avgTime = queryCount.get() > 0 ? totalQueryTime.get() / queryCount.get() : 0;
            log.info("üìä PERFORMANCE METRICS: –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {}ms, –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {}",
                    avgTime, queryCount.get());

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏", e);
        }
    }

    @Transactional
    public int deactivateExpiredSessions(int hours) {
        try {
            LocalDateTime cutoff = LocalDateTime.now().minusHours(hours);
            int deactivated = sessionRepository.deactivateExpiredSessions(cutoff);
            if (deactivated > 0) {
                log.info("–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {} –∏—Å—Ç—ë–∫—à–∏—Ö —Å–µ—Å—Å–∏–π", deactivated);
            }
            return deactivated;
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏—Å—Ç—ë–∫—à–∏—Ö —Å–µ—Å—Å–∏–π", e);
            return 0;
        }
    }

    public void cleanupOldSessions() {
        try {
            LocalDateTime cutoff = LocalDateTime.now().minusHours(24);
            int initialSize = userSessions.size();
            userSessions.entrySet().removeIf(entry -> entry.getValue().getLastActivity().isBefore(cutoff));

            int removedCount = initialSize - userSessions.size();
            if (removedCount > 0) {
                log.info("üßπ –û—á–∏—â–µ–Ω–æ {} —Å—Ç–∞—Ä—ã—Ö in-memory —Å–µ—Å—Å–∏–π", removedCount);
            }
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ in-memory —Å–µ—Å—Å–∏–π", e);
        }
    }

    // ===========================================
    // –ú–ï–¢–û–î–´ –î–õ–Ø –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê
    // ===========================================

    public int getActiveSessionsCount() {
        return userSessions.size();
    }

    public int getTotalOrdersCount() {
        return orders.size();
    }

    public long getAverageQueryTime() {
        return queryCount.get() > 0 ? totalQueryTime.get() / queryCount.get() : 0;
    }

    public long getTotalQueries() {
        return queryCount.get();
    }

    // ===========================================
    // DATA TRANSFER OBJECTS (–ò–ó –ò–°–•–û–î–ù–û–ì–û –ö–û–î–ê)
    // ===========================================

    public static class UserSessionStatistics {
        public final long totalUsers;
        public final long activeUsers;
        public final long onlineUsers;
        public final long inactiveUsers;
        public final long newUsersToday;
        public final long newUsersThisWeek;
        public final long newUsersThisMonth;
        public final long usersWithPendingOrders;
        public final Double averageOrdersPerUser;
        public final Double averageStarsPerUser;
        public final Double averageSessionDurationHours;

        public UserSessionStatistics(long totalUsers, long activeUsers, long onlineUsers, long inactiveUsers,
                long newUsersToday, long newUsersThisWeek, long newUsersThisMonth, long usersWithPendingOrders,
                Double averageOrdersPerUser, Double averageStarsPerUser, Double averageSessionDurationHours) {
            this.totalUsers = totalUsers;
            this.activeUsers = activeUsers;
            this.onlineUsers = onlineUsers;
            this.inactiveUsers = inactiveUsers;
            this.newUsersToday = newUsersToday;
            this.newUsersThisWeek = newUsersThisWeek;
            this.newUsersThisMonth = newUsersThisMonth;
            this.usersWithPendingOrders = usersWithPendingOrders;
            this.averageOrdersPerUser = averageOrdersPerUser;
            this.averageStarsPerUser = averageStarsPerUser;
            this.averageSessionDurationHours = averageSessionDurationHours;
        }

        // Getters –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        public long getTotalUsers() {
            return totalUsers;
        }

        public long getActiveUsers() {
            return activeUsers;
        }

        public long getOnlineUsers() {
            return onlineUsers;
        }

        public long getInactiveUsers() {
            return inactiveUsers;
        }

        public long getNewUsersToday() {
            return newUsersToday;
        }

        public long getNewUsersThisWeek() {
            return newUsersThisWeek;
        }

        public long getNewUsersThisMonth() {
            return newUsersThisMonth;
        }

        public long getUsersWithPendingOrders() {
            return usersWithPendingOrders;
        }

        public Double getAverageOrdersPerUser() {
            return averageOrdersPerUser;
        }

        public Double getAverageStarsPerUser() {
            return averageStarsPerUser;
        }

        public Double getAverageSessionDurationHours() {
            return averageSessionDurationHours;
        }
    }

    public static class UserActivityAverages {
        public final Double averageOrders;
        public final Double averageStarsPurchased;

        public UserActivityAverages(Double averageOrders, Double averageStarsPurchased) {
            this.averageOrders = averageOrders;
            this.averageStarsPurchased = averageStarsPurchased;
        }

        public Double getAverageOrders() {
            return averageOrders;
        }

        public Double getAverageStarsPurchased() {
            return averageStarsPurchased;
        }
    }
}