package shit.back.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import shit.back.config.PaymentConfigurationProperties;
import shit.back.config.SystemConfigurationProperties;
import shit.back.entity.PaymentEntity;
import shit.back.entity.PaymentStatus;
import shit.back.entity.UserBalanceEntity;
import shit.back.repository.PaymentJpaRepository;
import shit.back.service.payment.PaymentStrategyFactory;
import shit.back.service.payment.PaymentStrategy;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.ThreadLocalRandom;

/**
 * –†–µ—Ñ–∞–∫—Ç–æ—Ä–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ –±–∞–ª–∞–Ω—Å
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Strategy Pattern –¥–ª—è —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç–∏
 */
@Slf4j
@Service
public class PaymentService {

    @Autowired
    private PaymentJpaRepository paymentRepository;

    @Autowired
    private PaymentConfigurationProperties paymentConfig;

    @Autowired
    private SystemConfigurationProperties systemConfig;

    @Autowired
    private PaymentStrategyFactory paymentStrategyFactory;

    @Autowired
    private BalanceService balanceService;

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
     */
    @Transactional
    public PaymentEntity createPayment(Long userId, BigDecimal amount, String paymentMethod, String orderId,
            String description) {
        log.info("üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: —Å—É–º–º–∞={}, –º–µ—Ç–æ–¥={}, –∑–∞–∫–∞–∑={}",
                userId, amount, paymentMethod, orderId);

        validatePaymentData(userId, amount, paymentMethod);

        String paymentId = generatePaymentId();
        String currency = "USD"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é USD, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å

        PaymentEntity payment = new PaymentEntity(paymentId, userId, orderId, amount, currency, paymentMethod,
                description);
        payment.setExpiresAt(paymentConfig.getGeneral().getPaymentTimeoutMinutes());

        payment = paymentRepository.save(payment);
        log.info("‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: ID={}, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π_ID={}", payment.getPaymentId(), payment.getId());

        return payment;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ –±–∞–ª–∞–Ω—Å (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç Strategy Pattern)
     */
    @Transactional
    public PaymentStrategy.PaymentResult processPayment(Long userId, BigDecimal amount, String description) {
        log.info("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ë–ê–õ–ê–ù–°–û–í–û–ì–û –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: —Å—É–º–º–∞={}",
                userId, amount);

        try {
            validatePaymentData(userId, amount, "BALANCE");

            // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é (BALANCE)
            PaymentStrategy strategy = paymentStrategyFactory.getPreferredStrategy();

            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            PaymentStrategy.PaymentResult result = strategy.processPayment(userId, amount, description);

            if (result.success()) {
                log.info("‚úÖ –ë–∞–ª–∞–Ω—Å–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                        userId, result.paymentId());
            } else {
                log.warn("‚ùå –ë–∞–ª–∞–Ω—Å–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                        userId, result.errorMessage());
            }

            return result;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∞–ª–∞–Ω—Å–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    userId, e.getMessage(), e);
            return PaymentStrategy.PaymentResult.failure(
                    "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: " + e.getMessage(),
                    Map.of("errorCode", "PROCESSING_ERROR", "errorDetails", e.getMessage()));
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public boolean checkBalancePaymentAvailability(Long userId, BigDecimal amount) {
        log.debug("–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: —Å—É–º–º–∞={}", userId, amount);

        try {
            PaymentStrategy strategy = paymentStrategyFactory.getPreferredStrategy();
            if (strategy instanceof shit.back.service.payment.BalancePaymentStrategy balanceStrategy) {
                return balanceStrategy.isAvailableForUser(userId, amount);
            }
            return false;
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–∞–ª–∞–Ω—Å–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {}", e.getMessage());
            return false;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–∞—Ö –ø–ª–∞—Ç–µ–∂–∞ (–¢–û–õ–¨–ö–û BALANCE)
     */
    public List<PaymentStrategy.PaymentMethodInfo> getAvailablePaymentMethods() {
        log.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–ª–∞—Ç–µ–∂–∞");
        return paymentStrategyFactory.getAllPaymentMethodsInfo();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è–º –ø–ª–∞—Ç–µ–∂–µ–π
     */
    public Map<String, Object> getPaymentStrategiesStatistics() {
        return paymentStrategyFactory.getStrategyStatistics();
    }

    /**
     * –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å callback –¢–û–õ–¨–ö–û –¥–ª—è –±–∞–ª–∞–Ω—Å–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π (–∏—Å–ø–æ–ª—å–∑—É—É–µ—Ç Strategy
     * Pattern)
     */
    @Transactional
    public boolean verifyPaymentCallback(String paymentId, Map<String, String> params) {
        log.info("üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è callback –¥–ª—è –ë–ê–õ–ê–ù–°–û–í–û–ì–û –ø–ª–∞—Ç–µ–∂–∞: {}", paymentId);

        try {
            Optional<PaymentEntity> paymentOpt = paymentRepository.findByPaymentId(paymentId);
            if (paymentOpt.isEmpty()) {
                log.warn("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è callback: {}", paymentId);
                return false;
            }

            PaymentEntity payment = paymentOpt.get();

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º Strategy Pattern –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
            PaymentStrategy strategy = paymentStrategyFactory.getPreferredStrategy();
            boolean isValid = strategy.verifyCallback(payment, params);

            if (isValid) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
                processSuccessfulPayment(payment);
                log.info("‚úÖ Callback —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –±–∞–ª–∞–Ω—Å–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {}", paymentId);
            } else {
                payment.updateStatus(PaymentStatus.FAILED, "–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å callback");
                paymentRepository.save(payment);
                log.warn("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å callback –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞: {}", paymentId);
            }

            return isValid;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ callback –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {}: {}", paymentId, e.getMessage(), e);
            return false;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
     */
    @Transactional
    protected void processSuccessfulPayment(PaymentEntity payment) {
        log.info("üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: ID={}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={}, —Å—É–º–º–∞={}",
                payment.getPaymentId(), payment.getUserId(), payment.getAmount());

        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            payment.updateStatus(PaymentStatus.COMPLETED);
            paymentRepository.save(payment);

            // –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (payment.getUserId() != null) {
                balanceService.processBalancePayment(
                        payment.getUserId(),
                        payment.getPaymentId(),
                        payment.getAmount());

                log.info("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É {}",
                        payment.getUserId(), payment.getAmount());
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ {}: {}",
                    payment.getPaymentId(), e.getMessage(), e);
            payment.updateStatus(PaymentStatus.FAILED, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤");
            paymentRepository.save(payment);
            throw e;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
     */
    public Optional<PaymentEntity> getPayment(String paymentId) {
        return paymentRepository.findByPaymentId(paymentId);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public List<PaymentEntity> getUserPayments(Long userId) {
        return paymentRepository.findByUserIdOrderByCreatedAtDesc(userId);
    }

    /**
     * –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂
     */
    @Transactional
    public boolean cancelPayment(String paymentId, String reason) {
        log.info("üö´ –û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞: ID={}, –ø—Ä–∏—á–∏–Ω–∞={}", paymentId, reason);

        try {
            Optional<PaymentEntity> paymentOpt = paymentRepository.findByPaymentId(paymentId);
            if (paymentOpt.isEmpty()) {
                log.warn("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–º–µ–Ω—ã: {}", paymentId);
                return false;
            }

            PaymentEntity payment = paymentOpt.get();
            if (!payment.isCancellable()) {
                log.warn("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ: {} ({})",
                        paymentId, payment.getStatus());
                return false;
            }

            payment.updateStatus(PaymentStatus.CANCELLED, reason);
            paymentRepository.save(payment);

            log.info("‚úÖ –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω: {}", paymentId);
            return true;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞ {}: {}", paymentId, e.getMessage(), e);
            return false;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –ø–ª–∞—Ç–µ–∂–∏
     */
    @Transactional
    public void processExpiredPayments() {
        log.debug("üïê –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π...");

        List<PaymentStatus> activeStatuses = Arrays.asList(
                PaymentStatus.PENDING, PaymentStatus.PROCESSING, PaymentStatus.VERIFICATION_REQUIRED);

        List<PaymentEntity> expiredPayments = paymentRepository.findExpiredPayments(
                LocalDateTime.now(), activeStatuses);

        for (PaymentEntity payment : expiredPayments) {
            try {
                payment.updateStatus(PaymentStatus.EXPIRED, "–í—Ä–µ–º—è –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç–µ–∫–ª–æ");
                paymentRepository.save(payment);
                log.info("‚åõ –ü–ª–∞—Ç–µ–∂ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–π: {}", payment.getPaymentId());
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–µ–∫—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ {}: {}",
                        payment.getPaymentId(), e.getMessage());
            }
        }

        if (!expiredPayments.isEmpty()) {
            log.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {}", expiredPayments.size());
        }
    }

    // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

    private void validatePaymentData(Long userId, BigDecimal amount, String paymentMethod) {
        if (userId == null) {
            throw new IllegalArgumentException("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
        }
        if (amount == null || amount.compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π");
        }
        if (paymentMethod == null || paymentMethod.trim().isEmpty()) {
            throw new IllegalArgumentException("–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }

        validatePaymentMethod(paymentMethod);
    }

    private void validatePaymentMethod(String paymentMethod) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º Strategy Pattern –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–µ—Ç–æ–¥–∞
        if (!paymentStrategyFactory.isPaymentMethodSupported(paymentMethod)) {
            throw new IllegalArgumentException("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: " + paymentMethod +
                    ". –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã: " + paymentStrategyFactory.getSupportedPaymentMethods());
        }
    }

    private String generatePaymentId() {
        return "PAY_" + System.currentTimeMillis() + "_" +
                ThreadLocalRandom.current().nextInt(1000, 9999);
    }
}