package shit.back.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import shit.back.config.PaymentConfigurationProperties;
import shit.back.entity.PaymentEntity;
import shit.back.entity.PaymentStatus;
import shit.back.entity.UserBalanceEntity;
import shit.back.repository.PaymentJpaRepository;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.*;
import java.util.concurrent.ThreadLocalRandom;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π —á–µ—Ä–µ–∑ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
 */
@Slf4j
@Service
public class PaymentService {

    @Autowired
    private PaymentJpaRepository paymentRepository;

    @Autowired
    private PaymentConfigurationProperties paymentConfig;

    @Autowired
    private BalanceService balanceService;

    /**
     * –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
     */
    @Transactional
    public PaymentEntity createPayment(Long userId, BigDecimal amount, String paymentMethod, String orderId,
            String description) {
        log.info("üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: —Å—É–º–º–∞={}, –º–µ—Ç–æ–¥={}, –∑–∞–∫–∞–∑={}",
                userId, amount, paymentMethod, orderId);

        validatePaymentData(userId, amount, paymentMethod);

        String paymentId = generatePaymentId();
        String currency = "USD"; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é USD, –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å

        PaymentEntity payment = new PaymentEntity(paymentId, userId, orderId, amount, currency, paymentMethod,
                description);
        payment.setExpiresAt(paymentConfig.getGeneral().getPaymentTimeoutMinutes());

        payment = paymentRepository.save(payment);
        log.info("‚úÖ –ü–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: ID={}, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π_ID={}", payment.getPaymentId(), payment.getId());

        return payment;
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–ª–∞—Ç–µ–∂ –∏ —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
     */
    @Transactional
    public String processPayment(Long userId, BigDecimal amount, String paymentMethod) {
        log.info("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: —Å—É–º–º–∞={}, –º–µ—Ç–æ–¥={}",
                userId, amount, paymentMethod);

        try {
            validatePaymentData(userId, amount, paymentMethod);

            // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            PaymentEntity payment = createPayment(userId, amount, paymentMethod, null, "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞");

            // –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –º–µ—Ç–æ–¥–∞
            String paymentUrl = createPaymentLink(payment);

            if (paymentUrl != null) {
                payment.setPaymentUrl(paymentUrl);
                payment.updateStatus(PaymentStatus.PENDING);
                paymentRepository.save(payment);

                log.info("‚úÖ –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∞: {}", paymentUrl);
                return paymentUrl;
            } else {
                payment.updateStatus(PaymentStatus.FAILED, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã");
                paymentRepository.save(payment);
                throw new RuntimeException("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã");
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage(), e);
            throw new RuntimeException("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞: " + e.getMessage());
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
     */
    public String createPaymentLink(BigDecimal amount, String paymentMethod) {
        log.info("üîó –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã: —Å—É–º–º–∞={}, –º–µ—Ç–æ–¥={}", amount, paymentMethod);

        validatePaymentMethod(paymentMethod);

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Å—ã–ª–∫–∏
        String paymentId = generatePaymentId();
        PaymentEntity tempPayment = new PaymentEntity(paymentId, null, amount, "USD", paymentMethod);

        return createPaymentLink(tempPayment);
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
     */
    private String createPaymentLink(PaymentEntity payment) {
        String paymentMethod = payment.getPaymentMethod().toLowerCase();

        switch (paymentMethod) {
            case "ton":
                return createTonPaymentLink(payment);
            case "yookassa":
                return createYooKassaPaymentLink(payment);
            case "qiwi":
                return createQiwiPaymentLink(payment);
            case "sberpay":
                return createSberPayPaymentLink(payment);
            default:
                log.warn("‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: {}", paymentMethod);
                return null;
        }
    }

    /**
     * –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å callback –æ—Ç –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
     */
    @Transactional
    public boolean verifyPaymentCallback(String paymentId, Map<String, String> params) {
        log.info("üîç –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è callback –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞: {}", paymentId);

        try {
            Optional<PaymentEntity> paymentOpt = paymentRepository.findByPaymentId(paymentId);
            if (paymentOpt.isEmpty()) {
                log.warn("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è callback: {}", paymentId);
                return false;
            }

            PaymentEntity payment = paymentOpt.get();
            String paymentMethod = payment.getPaymentMethod().toLowerCase();

            boolean isValid = false;
            switch (paymentMethod) {
                case "ton":
                    isValid = verifyTonCallback(payment, params);
                    break;
                case "yookassa":
                    isValid = verifyYooKassaCallback(payment, params);
                    break;
                case "qiwi":
                    isValid = verifyQiwiCallback(payment, params);
                    break;
                case "sberpay":
                    isValid = verifySberPayCallback(payment, params);
                    break;
                default:
                    log.warn("‚ö†Ô∏è –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏: {}", paymentMethod);
                    return false;
            }

            if (isValid) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –∏ –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
                processSuccessfulPayment(payment);
                log.info("‚úÖ Callback —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞: {}", paymentId);
            } else {
                payment.updateStatus(PaymentStatus.FAILED, "–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å callback");
                paymentRepository.save(payment);
                log.warn("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å callback –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞: {}", paymentId);
            }

            return isValid;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ callback –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {}: {}", paymentId, e.getMessage(), e);
            return false;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂
     */
    @Transactional
    protected void processSuccessfulPayment(PaymentEntity payment) {
        log.info("üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: ID={}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å={}, —Å—É–º–º–∞={}",
                payment.getPaymentId(), payment.getUserId(), payment.getAmount());

        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            payment.updateStatus(PaymentStatus.COMPLETED);
            paymentRepository.save(payment);

            // –ü–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (payment.getUserId() != null) {
                balanceService.deposit(payment.getUserId(), payment.getAmount(),
                        payment.getPaymentMethod(),
                        "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ " + payment.getPaymentMethod() + " (ID: " + payment.getPaymentId() + ")");

                log.info("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É {}",
                        payment.getUserId(), payment.getAmount());
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ {}: {}",
                    payment.getPaymentId(), e.getMessage(), e);
            payment.updateStatus(PaymentStatus.FAILED, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞—á–∏—Å–ª–µ–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤");
            paymentRepository.save(payment);
            throw e;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
     */
    public Optional<PaymentEntity> getPayment(String paymentId) {
        return paymentRepository.findByPaymentId(paymentId);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public List<PaymentEntity> getUserPayments(Long userId) {
        return paymentRepository.findByUserIdOrderByCreatedAtDesc(userId);
    }

    /**
     * –û—Ç–º–µ–Ω–∏—Ç—å –ø–ª–∞—Ç–µ–∂
     */
    @Transactional
    public boolean cancelPayment(String paymentId, String reason) {
        log.info("üö´ –û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞: ID={}, –ø—Ä–∏—á–∏–Ω–∞={}", paymentId, reason);

        try {
            Optional<PaymentEntity> paymentOpt = paymentRepository.findByPaymentId(paymentId);
            if (paymentOpt.isEmpty()) {
                log.warn("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ—Ç–º–µ–Ω—ã: {}", paymentId);
                return false;
            }

            PaymentEntity payment = paymentOpt.get();
            if (!payment.isCancellable()) {
                log.warn("‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ: {} ({})",
                        paymentId, payment.getStatus());
                return false;
            }

            payment.updateStatus(PaymentStatus.CANCELLED, reason);
            paymentRepository.save(payment);

            log.info("‚úÖ –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω: {}", paymentId);
            return true;

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–ª–∞—Ç–µ–∂–∞ {}: {}", paymentId, e.getMessage(), e);
            return false;
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏—Å—Ç–µ–∫—à–∏–µ –ø–ª–∞—Ç–µ–∂–∏
     */
    @Transactional
    public void processExpiredPayments() {
        log.debug("üïê –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π...");

        List<PaymentStatus> activeStatuses = Arrays.asList(
                PaymentStatus.PENDING, PaymentStatus.PROCESSING, PaymentStatus.VERIFICATION_REQUIRED);

        List<PaymentEntity> expiredPayments = paymentRepository.findExpiredPayments(
                LocalDateTime.now(), activeStatuses);

        for (PaymentEntity payment : expiredPayments) {
            try {
                payment.updateStatus(PaymentStatus.EXPIRED, "–í—Ä–µ–º—è –ø–ª–∞—Ç–µ–∂–∞ –∏—Å—Ç–µ–∫–ª–æ");
                paymentRepository.save(payment);
                log.info("‚åõ –ü–ª–∞—Ç–µ–∂ –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å—Ç–µ–∫—à–∏–π: {}", payment.getPaymentId());
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏—Å—Ç–µ–∫—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ {}: {}",
                        payment.getPaymentId(), e.getMessage());
            }
        }

        if (!expiredPayments.isEmpty()) {
            log.info("‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π: {}", expiredPayments.size());
        }
    }

    // ===== –ú–ï–¢–û–î–´ –î–õ–Ø –ö–û–ù–ö–†–ï–¢–ù–´–• –ü–õ–ê–¢–ï–ñ–ù–´–• –°–ò–°–¢–ï–ú =====

    private String createTonPaymentLink(PaymentEntity payment) {
        if (!paymentConfig.getTon().getEnabled()) {
            log.warn("‚ö†Ô∏è TON Wallet –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
            return null;
        }

        // TODO: –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TON Wallet API
        log.info("üöß TON Wallet: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {}", payment.getPaymentId());

        // –ó–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-—Å—Å—ã–ª–∫—É
        return String.format("https://wallet.ton.org/pay?amount=%s&payment_id=%s",
                payment.getAmount(), payment.getPaymentId());
    }

    private String createYooKassaPaymentLink(PaymentEntity payment) {
        if (!paymentConfig.getYookassa().getEnabled()) {
            log.warn("‚ö†Ô∏è YooKassa –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
            return null;
        }

        // TODO: –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å YooKassa API
        log.info("üöß YooKassa: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {}", payment.getPaymentId());

        // –ó–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-—Å—Å—ã–ª–∫—É
        return String.format("https://yookassa.ru/checkout?amount=%s&payment_id=%s",
                payment.getAmount(), payment.getPaymentId());
    }

    private String createQiwiPaymentLink(PaymentEntity payment) {
        if (!paymentConfig.getQiwi().getEnabled()) {
            log.warn("‚ö†Ô∏è Qiwi –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
            return null;
        }

        // TODO: –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Qiwi API
        log.info("üöß Qiwi: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {}", payment.getPaymentId());

        // –ó–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-—Å—Å—ã–ª–∫—É
        return String.format("https://oplata.qiwi.com/create?amount=%s&payment_id=%s",
                payment.getAmount(), payment.getPaymentId());
    }

    private String createSberPayPaymentLink(PaymentEntity payment) {
        if (!paymentConfig.getSberpay().getEnabled()) {
            log.warn("‚ö†Ô∏è SberPay –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏");
            return null;
        }

        // TODO: –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SberPay API
        log.info("üöß SberPay: –°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {}", payment.getPaymentId());

        // –ó–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-—Å—Å—ã–ª–∫—É
        return String.format(
                "https://securepayments.sberbank.ru/payment/merchants/%s/payment_pages?amount=%s&payment_id=%s",
                paymentConfig.getSberpay().getMerchantId(), payment.getAmount(), payment.getPaymentId());
    }

    // ===== –ú–ï–¢–û–î–´ –í–ï–†–ò–§–ò–ö–ê–¶–ò–ò CALLBACK'–û–í =====

    private boolean verifyTonCallback(PaymentEntity payment, Map<String, String> params) {
        // TODO: –†–µ–∞–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ TON
        log.info("üöß TON: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è callback –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {}", payment.getPaymentId());
        return true; // –ó–∞–≥–ª—É—à–∫–∞
    }

    private boolean verifyYooKassaCallback(PaymentEntity payment, Map<String, String> params) {
        // TODO: –†–µ–∞–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ YooKassa
        log.info("üöß YooKassa: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è callback –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {}", payment.getPaymentId());
        return true; // –ó–∞–≥–ª—É—à–∫–∞
    }

    private boolean verifyQiwiCallback(PaymentEntity payment, Map<String, String> params) {
        // TODO: –†–µ–∞–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ Qiwi
        log.info("üöß Qiwi: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è callback –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {}", payment.getPaymentId());
        return true; // –ó–∞–≥–ª—É—à–∫–∞
    }

    private boolean verifySberPayCallback(PaymentEntity payment, Map<String, String> params) {
        // TODO: –†–µ–∞–ª—å–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ SberPay
        log.info("üöß SberPay: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è callback –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ {}", payment.getPaymentId());
        return true; // –ó–∞–≥–ª—É—à–∫–∞
    }

    // ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ =====

    private void validatePaymentData(Long userId, BigDecimal amount, String paymentMethod) {
        if (userId == null) {
            throw new IllegalArgumentException("ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null");
        }
        if (amount == null || amount.compareTo(BigDecimal.ZERO) <= 0) {
            throw new IllegalArgumentException("–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π");
        }
        if (paymentMethod == null || paymentMethod.trim().isEmpty()) {
            throw new IllegalArgumentException("–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º");
        }

        validatePaymentMethod(paymentMethod);
    }

    private void validatePaymentMethod(String paymentMethod) {
        String[] enabledMethods = paymentConfig.getEnabledPaymentMethods();
        boolean isSupported = Arrays.stream(enabledMethods)
                .anyMatch(method -> method.equalsIgnoreCase(paymentMethod));

        if (!isSupported) {
            throw new IllegalArgumentException("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã: " + paymentMethod);
        }
    }

    private String generatePaymentId() {
        return "PAY_" + System.currentTimeMillis() + "_" +
                ThreadLocalRandom.current().nextInt(1000, 9999);
    }
}