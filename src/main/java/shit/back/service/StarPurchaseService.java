package shit.back.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import shit.back.application.balance.dto.response.SimpleBalanceResponse;
import shit.back.application.balance.service.BalanceApplicationServiceV2;
import shit.back.domain.balance.BalanceAggregate;
import shit.back.domain.balance.exceptions.InsufficientFundsException;
import shit.back.domain.balance.valueobjects.Money;
import shit.back.application.balance.repository.BalanceAggregateRepository;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø—Ä—è–º–æ–π –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ –∏–∑ –µ–¥–∏–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
 * 
 * –£–ø—Ä–æ—â–∞–µ—Ç —Å–ª–æ–∂–Ω—É—é DualBalance –ª–æ–≥–∏–∫—É, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –ø—Ä—è–º—É—é –ø–æ–∫—É–ø–∫—É –∑–≤–µ–∑–¥
 * —á–µ—Ä–µ–∑ –µ–¥–∏–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 * –°–ª–µ–¥—É–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø–∞–º SOLID, DRY, Clean Code, KISS.
 */
@Service
@Transactional
public class StarPurchaseService {

    private static final Logger log = LoggerFactory.getLogger(StarPurchaseService.class);

    private final BalanceApplicationServiceV2 balanceService;
    private final FragmentIntegrationService fragmentIntegrationService;
    private final BalanceAggregateRepository balanceRepository;

    public StarPurchaseService(
            BalanceApplicationServiceV2 balanceService,
            FragmentIntegrationService fragmentIntegrationService,
            BalanceAggregateRepository balanceRepository) {
        this.balanceService = balanceService;
        this.fragmentIntegrationService = fragmentIntegrationService;
        this.balanceRepository = balanceRepository;
    }

    /**
     * –ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ –∏–∑ –µ–¥–∏–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * 
     * @param userId    ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param starCount –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥
     * @param amount    —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏
     * @return —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫—É–ø–∫–∏
     */
    public StarPurchaseResult purchaseStars(Long userId, Integer starCount, Money amount) {
        log.info("üåü –ù–∞—á–∞–ª–æ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥: userId={}, stars={}, amount={}",
                userId, starCount, amount.getFormattedAmount());

        try {
            // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            validatePurchaseRequest(userId, starCount, amount);

            // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ BalanceAggregate
            var balanceOptional = balanceRepository.findByUserId(userId);
            if (balanceOptional.isEmpty()) {
                log.warn("‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
                return StarPurchaseResult.failure("BALANCE_NOT_FOUND",
                        "–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω");
            }

            BalanceAggregate balance = balanceOptional.get();

            // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
            if (!balance.hasSufficientFunds(amount)) {
                log.warn("üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: —Ç—Ä–µ–±—É–µ—Ç—Å—è {}, –¥–æ—Å—Ç—É–ø–Ω–æ {}",
                        amount.getFormattedAmount(),
                        balance.getCurrentBalance().getFormattedAmount());
                return StarPurchaseResult.failure("INSUFFICIENT_FUNDS",
                        String.format("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¢—Ä–µ–±—É–µ—Ç—Å—è: %s, –¥–æ—Å—Ç—É–ø–Ω–æ: %s",
                                amount.getFormattedAmount(),
                                balance.getCurrentBalance().getFormattedAmount()));
            }

            // 4. –°–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞
            String transactionId = generateTransactionId(userId, starCount);
            balance.withdraw(amount,
                    String.format("–ü–æ–∫—É–ø–∫–∞ %d –∑–≤–µ–∑–¥", starCount),
                    transactionId);

            // 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–∞–ª–∞–Ω—Å–∞
            balanceRepository.save(balance);

            // 6. –í—ã–∑–æ–≤ FragmentIntegrationService
            fragmentIntegrationService.initiateStarPurchase(userId, starCount, amount);

            log.info("‚úÖ –ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: userId={}, stars={}, transactionId={}",
                    userId, starCount, transactionId);

            return StarPurchaseResult.success(transactionId, starCount, amount);

        } catch (InsufficientFundsException e) {
            log.error("üí∏ –û—à–∏–±–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤: {}", e.getMessage());
            return StarPurchaseResult.failure("INSUFFICIENT_FUNDS", e.getMessage());

        } catch (Exception e) {
            log.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ –¥–ª—è userId={}: {}",
                    userId, e.getMessage(), e);
            return StarPurchaseResult.failure("PURCHASE_ERROR",
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –∑–≤–µ–∑–¥: " + e.getMessage());
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
     * 
     * @param userId ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @param amount —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏
     * @return true –µ—Å–ª–∏ –ø–æ–∫—É–ø–∫–∞ –≤–æ–∑–º–æ–∂–Ω–∞
     */
    public boolean canPurchaseStars(Long userId, Money amount) {
        try {
            var result = balanceService.checkSufficientFunds(userId, amount);
            if (result.isSuccess()) {
                boolean canPurchase = result.getValue();
                log.debug("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏: userId={}, amount={}, result={}",
                        userId, amount.getFormattedAmount(), canPurchase);
                return canPurchase;
            } else {
                log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ä–µ–¥—Å—Ç–≤: {}", result.getError().getMessage());
                return false;
            }
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–∫—É–ø–∫–∏: {}", e.getMessage(), e);
            return false;
        }
    }

    /**
     * –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∫—É–ø–∫—É
     */
    private void validatePurchaseRequest(Long userId, Integer starCount, Money amount) {
        if (userId == null || userId <= 0) {
            throw new IllegalArgumentException("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        }
        if (starCount == null || starCount <= 0) {
            throw new IllegalArgumentException("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º");
        }
        if (amount == null || !amount.isPositive()) {
            throw new IllegalArgumentException("–°—É–º–º–∞ –ø–æ–∫—É–ø–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π");
        }
        if (starCount > 10000) {
            throw new IllegalArgumentException("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤–µ–∑–¥ –∑–∞ –æ–¥–Ω—É –ø–æ–∫—É–ø–∫—É");
        }
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     */
    private String generateTransactionId(Long userId, Integer starCount) {
        return String.format("STAR_%d_%d_%d",
                userId, starCount, System.currentTimeMillis());
    }

    /**
     * –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
     */
    public static class StarPurchaseResult {
        private final boolean success;
        private final String errorCode;
        private final String errorMessage;
        private final String transactionId;
        private final Integer starCount;
        private final Money amount;

        private StarPurchaseResult(boolean success, String errorCode, String errorMessage,
                String transactionId, Integer starCount, Money amount) {
            this.success = success;
            this.errorCode = errorCode;
            this.errorMessage = errorMessage;
            this.transactionId = transactionId;
            this.starCount = starCount;
            this.amount = amount;
        }

        public static StarPurchaseResult success(String transactionId, Integer starCount, Money amount) {
            return new StarPurchaseResult(true, null, null, transactionId, starCount, amount);
        }

        public static StarPurchaseResult failure(String errorCode, String errorMessage) {
            return new StarPurchaseResult(false, errorCode, errorMessage, null, null, null);
        }

        // –ì–µ—Ç—Ç–µ—Ä—ã
        public boolean isSuccess() {
            return success;
        }

        public String getErrorCode() {
            return errorCode;
        }

        public String getErrorMessage() {
            return errorMessage;
        }

        public String getTransactionId() {
            return transactionId;
        }

        public Integer getStarCount() {
            return starCount;
        }

        public Money getAmount() {
            return amount;
        }

        @Override
        public String toString() {
            return success
                    ? String.format("StarPurchaseResult{success=true, transactionId='%s', stars=%d}",
                            transactionId, starCount)
                    : String.format("StarPurchaseResult{success=false, error='%s: %s'}",
                            errorCode, errorMessage);
        }
    }
}