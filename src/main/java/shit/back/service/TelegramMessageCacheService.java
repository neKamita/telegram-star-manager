package shit.back.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;

import java.time.LocalDateTime;
import java.util.Map;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;

/**
 * –°–µ—Ä–≤–∏—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π Telegram –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
 * 
 * –†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É: "message is not modified: specified new message content and
 * reply markup are exactly the same"
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã:
 * - Single Responsibility: –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π
 * - Performance: –±—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ø–∞–º—è—Ç–∏
 * - Memory Management: –∞–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π
 */
@Service
@Slf4j
public class TelegramMessageCacheService {

    private final Map<String, CachedMessage> messageCache = new ConcurrentHashMap<>();
    private static final int CACHE_CLEANUP_HOURS = 1;

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
     */
    public boolean isMessageChanged(Long chatId, Integer messageId, String newText, InlineKeyboardMarkup newKeyboard) {
        if (chatId == null || messageId == null || newText == null) {
            return true; // –°—á–∏—Ç–∞–µ–º –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–º, –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        }

        String cacheKey = getCacheKey(chatId, messageId);
        CachedMessage cached = messageCache.get(cacheKey);

        // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –õ–û–ì #3: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–≠–®–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è chatId={}, messageId={}", chatId, messageId);
        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–≠–®–ê: –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç: '{}'",
                newText.length() > 100 ? newText.substring(0, 100) + "..." : newText);

        if (cached == null) {
            // –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –≤—Å–µ–≥–¥–∞ —Å—á–∏—Ç–∞–µ–º –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–º
            cacheMessage(cacheKey, newText, newKeyboard);
            log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–≠–®–ê: –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ {} —Å–æ–æ–±—â–µ–Ω–∏–µ {} - —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É", chatId,
                    messageId);
            return true;
        }

        boolean textChanged = !Objects.equals(cached.text, newText);
        boolean keyboardChanged = !areKeyboardsEqual(cached.keyboard, newKeyboard);

        // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –õ–û–ì #3: –î–µ—Ç–∞–ª–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–≠–®–ê: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç: '{}'",
                cached.text != null && cached.text.length() > 100 ? cached.text.substring(0, 100) + "..."
                        : cached.text);
        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–≠–®–ê: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ - —Ç–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è: {}, –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: {}", textChanged,
                keyboardChanged);

        if (textChanged || keyboardChanged) {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Å –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            cacheMessage(cacheKey, newText, newKeyboard);
            log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–≠–®–ê: –°–æ–æ–±—â–µ–Ω–∏–µ –ò–ó–ú–ï–ù–ò–õ–û–°–¨ –¥–ª—è —á–∞—Ç–∞ {} —Å–æ–æ–±—â–µ–Ω–∏–µ {} - —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É", chatId,
                    messageId);
            return true;
        }

        // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú–´ #3: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        log.warn("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–≠–®–ê: –°–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –¥–ª—è —á–∞—Ç–∞ {} —Å–æ–æ–±—â–µ–Ω–∏–µ {} - –ë–õ–û–ö–ò–†–£–ï–ú –æ—Ç–ø—Ä–∞–≤–∫—É!", chatId,
                messageId);
        log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–≠–®–ê: –î–µ—Ç–∞–ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:");
        log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–≠–®–ê:   - –¢–µ–∫—Å—Ç –∏–∑–º–µ–Ω–∏–ª—Å—è: {}", textChanged);
        log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–≠–®–ê:   - –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: {}", keyboardChanged);
        log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–≠–®–ê:   - –í—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è: {}", cached.timestamp);
        log.warn(
                "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–≠–®–ê: –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å UI");
        return false;
    }

    /**
     * –ö—ç—à–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    private void cacheMessage(String cacheKey, String text, InlineKeyboardMarkup keyboard) {
        messageCache.put(cacheKey, new CachedMessage(text, keyboard, LocalDateTime.now()));
    }

    /**
     * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –∫—ç—à–∞
     */
    private String getCacheKey(Long chatId, Integer messageId) {
        return chatId + ":" + messageId;
    }

    /**
     * –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
     */
    private boolean areKeyboardsEqual(InlineKeyboardMarkup keyboard1, InlineKeyboardMarkup keyboard2) {
        if (keyboard1 == null && keyboard2 == null) {
            return true;
        }
        if (keyboard1 == null || keyboard2 == null) {
            return false;
        }

        // –£–ø—Ä–æ—â—ë–Ω–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –∏ –∫–Ω–æ–ø–æ–∫
        var rows1 = keyboard1.getKeyboard();
        var rows2 = keyboard2.getKeyboard();

        if (rows1 == null && rows2 == null) {
            return true;
        }
        if (rows1 == null || rows2 == null) {
            return false;
        }
        if (rows1.size() != rows2.size()) {
            return false;
        }

        for (int i = 0; i < rows1.size(); i++) {
            var row1 = rows1.get(i);
            var row2 = rows2.get(i);

            if (row1.size() != row2.size()) {
                return false;
            }

            for (int j = 0; j < row1.size(); j++) {
                var button1 = row1.get(j);
                var button2 = row2.get(j);

                if (!Objects.equals(button1.getText(), button2.getText()) ||
                        !Objects.equals(button1.getCallbackData(), button2.getCallbackData())) {
                    return false;
                }
            }
        }

        return true;
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞
     */
    public void cleanupOldEntries() {
        LocalDateTime cutoff = LocalDateTime.now().minusHours(CACHE_CLEANUP_HOURS);
        int initialSize = messageCache.size();

        messageCache.entrySet().removeIf(entry -> entry.getValue().timestamp.isBefore(cutoff));

        int removed = initialSize - messageCache.size();
        if (removed > 0) {
            log.info("–û—á–∏—â–µ–Ω–æ {} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞ —Å–æ–æ–±—â–µ–Ω–∏–π", removed);
        }
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
     */
    @Scheduled(fixedRate = 1800000) // 30 –º–∏–Ω—É—Ç
    public void scheduledCleanup() {
        try {
            cleanupOldEntries();
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {}", e.getMessage(), e);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
     */
    public int getCacheSize() {
        return messageCache.size();
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫—ç—à
     */
    public void clearCache() {
        messageCache.clear();
        log.info("–ö—ç—à —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω");
    }

    /**
     * –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–ª–∞—Å—Å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
     */
    private static class CachedMessage {
        final String text;
        final InlineKeyboardMarkup keyboard;
        final LocalDateTime timestamp;

        CachedMessage(String text, InlineKeyboardMarkup keyboard, LocalDateTime timestamp) {
            this.text = text;
            this.keyboard = keyboard;
            this.timestamp = timestamp;
        }
    }
}