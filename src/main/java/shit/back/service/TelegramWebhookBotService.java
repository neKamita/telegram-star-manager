package shit.back.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramWebhookBot;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updates.SetWebhook;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import shit.back.handler.MessageHandler;
import shit.back.handler.CallbackHandler;

import java.time.LocalDateTime;

@Service
@Profile("production")
public class TelegramWebhookBotService extends TelegramWebhookBot {

    private static final Logger logger = LoggerFactory.getLogger(TelegramWebhookBotService.class);

    public TelegramWebhookBotService() {
        logger.info("üéØ TelegramWebhookBotService CONSTRUCTOR –≤—ã–∑–≤–∞–Ω!");
        logger.info("üìã Active Profile: {}", System.getProperty("spring.profiles.active"));
    }

    @Value("${telegram.bot.token}")
    private String botToken;

    @Value("${telegram.bot.username}")
    private String botUsername;

    @Value("${telegram.bot.webhook-url}")
    private String webhookUrl;

    @Autowired(required = false)
    private MessageHandler messageHandler;

    @Autowired(required = false)
    private CallbackHandler callbackHandler;

    private boolean webhookSet = false;
    private String botStatus = "INITIALIZING";
    private String errorMessage = null;
    private LocalDateTime lastUpdate = LocalDateTime.now();

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è webhook –±–æ—Ç–∞. –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ TelegramBotRegistrationService.
     */
    public void init() {
        try {
            logger.info("üöÄ –ù–ê–ß–ê–õ–û –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TelegramWebhookBotService –¥–ª—è production");
            logger.info("üìã Bot Token: {}",
                    botToken != null && !botToken.trim().isEmpty() ? "SET (" + botToken.length() + " chars)"
                            : "NOT_SET");
            logger.info("üë§ Bot Username: {}", botUsername);
            logger.info("üåê Webhook URL: {}", webhookUrl);
            logger.info("üîó MessageHandler: {}", messageHandler != null ? "AVAILABLE" : "NULL");
            logger.info("üîó CallbackHandler: {}", callbackHandler != null ? "AVAILABLE" : "NULL");

            if (botToken == null || botToken.trim().isEmpty()) {
                botStatus = "ERROR";
                errorMessage = "Bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω";
                logger.error("‚ùå Bot token –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!");
                return;
            }

            if (webhookUrl == null || webhookUrl.trim().isEmpty()) {
                botStatus = "ERROR";
                errorMessage = "Webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω";
                logger.error("‚ùå Webhook URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ó–Ω–∞—á–µ–Ω–∏–µ: '{}'", webhookUrl);
                return;
            }

            if (messageHandler == null) {
                botStatus = "ERROR";
                errorMessage = "MessageHandler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω";
                logger.error("‚ùå MessageHandler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
                return;
            }

            if (callbackHandler == null) {
                botStatus = "ERROR";
                errorMessage = "CallbackHandler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω";
                logger.error("‚ùå CallbackHandler –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
                return;
            }

            logger.info("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã, –∑–∞–ø—É—Å–∫–∞–µ–º setupWebhook()");
            setupWebhook();
            logger.info("üèÅ –ö–û–ù–ï–¶ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TelegramWebhookBotService");

        } catch (Exception e) {
            botStatus = "ERROR";
            errorMessage = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: " + e.getMessage();
            logger.error("üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TelegramWebhookBotService", e);
        }
    }

    private void setupWebhook() {
        try {
            String fullWebhookUrl = webhookUrl + "/webhook/telegram";
            SetWebhook setWebhook = SetWebhook.builder()
                    .url(fullWebhookUrl)
                    .build();

            logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook: {}", fullWebhookUrl);

            Boolean result = execute(setWebhook);
            if (Boolean.TRUE.equals(result)) {
                webhookSet = true;
                botStatus = "RUNNING";
                errorMessage = null;
                logger.info("Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {}", fullWebhookUrl);
            } else {
                botStatus = "ERROR";
                errorMessage = "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook";
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook");
            }
        } catch (TelegramApiException e) {
            botStatus = "ERROR";
            errorMessage = "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: " + e.getMessage();
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook", e);
        }
    }

    @Override
    public BotApiMethod<?> onWebhookUpdateReceived(Update update) {
        try {
            lastUpdate = LocalDateTime.now();
            logger.info("üîÑ onWebhookUpdateReceived: –ø–æ–ª—É—á–µ–Ω update ID {}", update.getUpdateId());

            if (update.hasMessage()) {
                Message message = update.getMessage();
                logger.info("üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} (ID: {}): {}",
                        message.getFrom().getFirstName(), message.getFrom().getId(),
                        message.hasText() ? message.getText() : "[–Ω–µ —Ç–µ–∫—Å—Ç]");

                if (messageHandler == null) {
                    logger.error("‚ùå MessageHandler is NULL! –ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ");
                    return createErrorMessage(message.getChatId(), "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
                }

                BotApiMethod<?> response = messageHandler.handleMessage(message);
                logger.info("‚úÖ MessageHandler –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç: {}",
                        response != null ? response.getClass().getSimpleName() : "NULL");
                return response;
            }

            if (update.hasCallbackQuery()) {
                logger.info("üîò –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} (ID: {}): {}",
                        update.getCallbackQuery().getFrom().getFirstName(),
                        update.getCallbackQuery().getFrom().getId(),
                        update.getCallbackQuery().getData());

                if (callbackHandler == null) {
                    logger.error("‚ùå CallbackHandler is NULL! –ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å callback");
                    return null;
                }

                return callbackHandler.handleCallback(update.getCallbackQuery());
            }

            logger.warn("‚ö†Ô∏è –ü–æ–ª—É—á–µ–Ω –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: updateId={}, type={}",
                    update.getUpdateId(), getUpdateType(update));

        } catch (Exception e) {
            logger.error("üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook update {}: {}",
                    update.getUpdateId(), e.getMessage(), e);

            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –º–æ–∂–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id
            if (update.hasMessage()) {
                return createErrorMessage(update.getMessage().getChatId(),
                        "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            }
        }

        return null;
    }

    private SendMessage createErrorMessage(Long chatId, String errorText) {
        return SendMessage.builder()
                .chatId(chatId.toString())
                .text(errorText)
                .build();
    }

    private String getUpdateType(Update update) {
        if (update.hasMessage())
            return "MESSAGE";
        if (update.hasCallbackQuery())
            return "CALLBACK";
        if (update.hasInlineQuery())
            return "INLINE_QUERY";
        if (update.hasEditedMessage())
            return "EDITED_MESSAGE";
        if (update.hasChannelPost())
            return "CHANNEL_POST";
        if (update.hasEditedChannelPost())
            return "EDITED_CHANNEL_POST";
        if (update.hasShippingQuery())
            return "SHIPPING_QUERY";
        if (update.hasPreCheckoutQuery())
            return "PRE_CHECKOUT_QUERY";
        if (update.hasPoll())
            return "POLL";
        if (update.hasPollAnswer())
            return "POLL_ANSWER";
        return "UNKNOWN";
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public String getBotPath() {
        return "/webhook/telegram";
    }

    // –ú–µ—Ç–æ–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    public boolean isWebhookSet() {
        return webhookSet;
    }

    public String getBotStatus() {
        return botStatus;
    }

    public String getErrorMessage() {
        return errorMessage;
    }

    public LocalDateTime getLastUpdate() {
        return lastUpdate;
    }

    public void resetError() {
        if ("ERROR".equals(botStatus)) {
            errorMessage = null;
            setupWebhook();
        }
    }
}
