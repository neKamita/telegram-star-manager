package shit.back.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.scheduling.TaskScheduler;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import shit.back.entity.PaymentEntity;
import shit.back.entity.PaymentStatus;
import shit.back.repository.PaymentJpaRepository;

import java.math.BigDecimal;
import java.time.Instant;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –≤ dev —Ä–µ–∂–∏–º–µ
 * 
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å —Ñ–ª–æ—É –ø–æ–∫—É–ø–∫–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
 */
@Service
@ConditionalOnProperty(name = "test.payment.enabled", havingValue = "true")
public class TestPaymentService {

    private static final Logger log = LoggerFactory.getLogger(TestPaymentService.class);

    @Autowired
    private PaymentService paymentService;

    @Autowired
    private PaymentJpaRepository paymentRepository;

    @Autowired(required = false)
    private TelegramBotService telegramBotService;

    @Autowired
    private TaskScheduler taskScheduler;

    @Value("${test.payment.auto-complete.enabled:true}")
    private boolean autoCompleteEnabled;

    @Value("${test.payment.auto-complete.delay-seconds:3}")
    private int autoCompleteDelaySeconds;

    @Value("${test.payment.logging.enabled:true}")
    private boolean loggingEnabled;

    /**
     * –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
     */
    @Transactional
    public PaymentEntity createTestPayment(Long userId, BigDecimal amount, String description) {
        if (loggingEnabled) {
            log.info("üß™ –¢–ï–°–¢: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: —Å—É–º–º–∞={}, –æ–ø–∏—Å–∞–Ω–∏–µ={}",
                    userId, amount, description);
        }

        // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π PaymentService
        PaymentEntity payment = paymentService.createPayment(userId, amount, "TEST", null, description);

        // –û–±–Ω–æ–≤–ª—è–µ–º URL –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ setExternalData
        String testUrl = "test://payment/" + payment.getPaymentId() + "?test_mode=true";
        payment.setExternalData("TEST_EXT_" + System.currentTimeMillis(), testUrl);
        payment.updateStatus(PaymentStatus.PENDING);
        payment = paymentRepository.save(payment);

        if (loggingEnabled) {
            log.info("‚úÖ –¢–ï–°–¢: –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω: ID={}", payment.getPaymentId());
        }

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –ø–ª–∞—Ç–µ–∂, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if (autoCompleteEnabled) {
            scheduleAutoCompletion(payment);
        }

        return payment;
    }

    /**
     * –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
     */
    @Transactional
    public boolean completeTestPaymentImmediately(String paymentId) {
        if (loggingEnabled) {
            log.info("üß™ –¢–ï–°–¢: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {}", paymentId);
        }

        try {
            Optional<PaymentEntity> paymentOpt = paymentRepository.findByPaymentId(paymentId);
            if (paymentOpt.isEmpty()) {
                log.warn("‚ö†Ô∏è –¢–ï–°–¢: –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω: {}", paymentId);
                return false;
            }

            PaymentEntity payment = paymentOpt.get();
            return processTestPaymentCompletion(payment);

        } catch (Exception e) {
            log.error("‚ùå –¢–ï–°–¢: –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ {}: {}",
                    paymentId, e.getMessage(), e);
            return false;
        }
    }

    /**
     * –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
     */
    private void scheduleAutoCompletion(PaymentEntity payment) {
        if (loggingEnabled) {
            log.info("‚è∞ –¢–ï–°–¢: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ {} —Å–µ–∫—É–Ω–¥",
                    autoCompleteDelaySeconds);
        }

        taskScheduler.schedule(() -> {
            try {
                if (loggingEnabled) {
                    log.info("üéØ –¢–ï–°–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞");
                }
                processSuccessfulCompletion(payment.getPaymentId());
            } catch (Exception e) {
                log.error("‚ùå –¢–ï–°–¢: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ {}: {}",
                        payment.getPaymentId(), e.getMessage(), e);
            }
        }, Instant.now().plusSeconds(autoCompleteDelaySeconds));
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –ø–æ ID
     */
    @Transactional
    public void processSuccessfulCompletion(String paymentId) {
        try {
            Optional<PaymentEntity> paymentOpt = paymentRepository.findByPaymentId(paymentId);
            if (paymentOpt.isEmpty()) {
                log.warn("‚ö†Ô∏è –¢–ï–°–¢: –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–≤—Ç–æ–∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {}", paymentId);
                return;
            }

            PaymentEntity payment = paymentOpt.get();
            processTestPaymentCompletion(payment);

        } catch (Exception e) {
            log.error("‚ùå –¢–ï–°–¢: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ {}: {}",
                    paymentId, e.getMessage(), e);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
     */
    @Transactional
    private boolean processTestPaymentCompletion(PaymentEntity payment) {
        try {
            // –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è callback
            Map<String, String> testParams = createTestCallbackParams(payment);

            if (loggingEnabled) {
                log.info("üéØ –¢–ï–°–¢: –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞");
            }

            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∏–∑ –ë–î
            Optional<PaymentEntity> paymentOpt = paymentRepository.findByPaymentId(payment.getPaymentId());
            if (paymentOpt.isPresent()) {
                PaymentEntity actualPayment = paymentOpt.get();
                boolean success = paymentService.verifyPaymentCallback(actualPayment.getPaymentId(), testParams);

                if (success) {
                    if (loggingEnabled) {
                        log.info("‚úÖ –¢–ï–°–¢: –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω –∏ –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω");
                    }

                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –±–∞–ª–∞–Ω—Å—É –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ
                    // –ø–ª–∞—Ç–µ–∂–∞
                    sendTestPaymentCompletionMessage(actualPayment.getUserId(), actualPayment.getAmount());
                }

                return success;
            }

            return false;

        } catch (Exception e) {
            log.error("‚ùå –¢–ï–°–¢: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {}", e.getMessage(), e);
            return false;
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ callback
     */
    private Map<String, String> createTestCallbackParams(PaymentEntity payment) {
        Map<String, String> params = new HashMap<>();

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        Optional<PaymentEntity> paymentOpt = paymentRepository.findByPaymentId(payment.getPaymentId());
        if (paymentOpt.isPresent()) {
            PaymentEntity actualPayment = paymentOpt.get();
            params.put("payment_id", actualPayment.getPaymentId());
            params.put("status", "completed");
            params.put("amount", actualPayment.getAmount().toString());
            params.put("currency", actualPayment.getCurrency());
            params.put("test_mode", "true");
            params.put("transaction_id", "TEST_TXN_" + System.currentTimeMillis());
        }

        return params;
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º
     */
    public boolean isTestModeEnabled() {
        return true; // –ö–ª–∞—Å—Å —Å–æ–∑–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ test.payment.enabled=true
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞
     */
    public Map<String, Object> getTestModeConfiguration() {
        Map<String, Object> config = new HashMap<>();
        config.put("enabled", true);
        config.put("auto_complete_enabled", autoCompleteEnabled);
        config.put("auto_complete_delay_seconds", autoCompleteDelaySeconds);
        config.put("logging_enabled", loggingEnabled);

        return config;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∏
     * –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –∫ –±–∞–ª–∞–Ω—Å—É
     */
    @Async
    private void sendTestPaymentCompletionMessage(Long userId, BigDecimal amount) {
        try {
            String message = String.format("""
                    ‚úÖ <b>–¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!</b>

                    üí∞ <b>–°—É–º–º–∞:</b> %.2f ‚ÇΩ
                    üí≥ <b>–ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω</b>
                    üß™ <b>–†–µ–∂–∏–º:</b> –¢–µ—Å—Ç–æ–≤—ã–π

                    üéâ <i>–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!</i>

                    üëá –ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ –±–∞–ª–∞–Ω—Å—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è:
                    """, amount);

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–∞–ª–∞–Ω—Å—É
            org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup keyboard = createTestPaymentCompletionKeyboard();

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–π —Å–µ—Ä–≤–∏—Å
            if (telegramBotService != null) {
                telegramBotService.sendMessageWithKeyboard(userId, message, keyboard);
                if (loggingEnabled) {
                    log.info("üß™ –¢–ï–°–¢: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}", userId);
                }
            } else {
                if (loggingEnabled) {
                    log.warn("‚ö†Ô∏è –¢–ï–°–¢: TelegramBotService –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}",
                            userId);
                }
            }

        } catch (Exception e) {
            log.error("‚ùå –¢–ï–°–¢: –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {}: {}",
                    userId, e.getMessage(), e);
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
     */
    private org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup createTestPaymentCompletionKeyboard() {
        org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup keyboard = new org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup();
        java.util.List<java.util.List<org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton>> rows = new java.util.ArrayList<>();

        // –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–∞–ª–∞–Ω—Å—É
        java.util.List<org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton> row1 = new java.util.ArrayList<>();
        org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton balanceButton = new org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton();
        balanceButton.setText("üí∞ –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–∞–ª–∞–Ω—Å—É");
        balanceButton.setCallbackData("show_balance");
        row1.add(balanceButton);
        rows.add(row1);

        // –ö–Ω–æ–ø–∫–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
        java.util.List<org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton> row2 = new java.util.ArrayList<>();
        org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton buyButton = new org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton();
        buyButton.setText("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã");
        buyButton.setCallbackData("buy_stars");
        row2.add(buyButton);
        rows.add(row2);

        // –ö–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
        java.util.List<org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton> row3 = new java.util.ArrayList<>();
        org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton mainButton = new org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton();
        mainButton.setText("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é");
        mainButton.setCallbackData("back_to_main");
        row3.add(mainButton);
        rows.add(row3);

        keyboard.setKeyboard(rows);
        return keyboard;
    }
}