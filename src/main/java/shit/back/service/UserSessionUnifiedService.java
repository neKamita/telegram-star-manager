package shit.back.service;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import shit.back.entity.UserSessionEntity;
import shit.back.model.UserSession;
import shit.back.model.UserCountsBatchResult;
import shit.back.model.Order;
import shit.back.model.StarPackage;
import shit.back.repository.UserSessionJpaRepository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;

/**
 * –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Å–µ—Å—Å–∏—è–º–∏
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å UserSessionService –∏ UserSessionEnhancedService
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—É—é in-memory —Ä–∞–±–æ—Ç—É + PostgreSQL –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
 * 
 * –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
 * - Single Responsibility: —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Å—Å–∏—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * - DRY: –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏
 * - Security: –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * - Performance: –±–∞—Ç—á-–∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
 */
@Service
@Transactional
public class UserSessionUnifiedService {

    static {
        System.err.println("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TM: UserSessionUnifiedService –∫–ª–∞—Å—Å –∑–∞–≥—Ä—É–∂–µ–Ω");
    }

    private static final Logger log = LoggerFactory.getLogger(UserSessionUnifiedService.class);

    @Autowired
    private UserSessionJpaRepository sessionRepository;

    // In-memory –∫—ç—à –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ (–∏–∑ —Å—Ç–∞—Ä–æ–≥–æ UserSessionService)
    private final Map<Long, UserSession> userSessions = new ConcurrentHashMap<>();
    private final Map<String, Order> orders = new ConcurrentHashMap<>();

    // ===========================================
    // –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ï–°–°–ò–Ø–ú–ò
    // ===========================================

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É –∏–∑ –æ–±–æ–∏—Ö —Å—Ç–∞—Ä—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
     */
    public UserSession getOrCreateSession(Long userId, String username, String firstName, String lastName) {
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if (userId == null || userId <= 0) {
                throw new IllegalArgumentException("Invalid user ID");
            }
            if (username != null && username.trim().isEmpty()) {
                username = null;
            }
            if (firstName != null && firstName.trim().isEmpty()) {
                firstName = null;
            }
            if (lastName != null && lastName.trim().isEmpty()) {
                lastName = null;
            }

            UserSession session = userSessions.get(userId);
            boolean isNewSession = false;

            if (session == null) {
                session = new UserSession(userId, username, firstName, lastName);
                userSessions.put(userId, session);
                isNewSession = true;
                log.info("Created new in-memory session for user {}", userId);
            } else {
                session.updateActivity();
            }

            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å PostgreSQL –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
            try {
                createOrUpdateSessionEntity(session);
                if (isNewSession) {
                    log.info("Synchronized new user {} with PostgreSQL", userId);
                }
            } catch (Exception e) {
                log.warn("Failed to sync session for user {} with PostgreSQL: {}", userId, e.getMessage());
                // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
            }

            return session;
        } catch (Exception e) {
            log.error("Error in getOrCreateSession for user {}", userId, e);
            throw new RuntimeException("Failed to get or create session", e);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Å–µ—Å—Å–∏—é
     */
    public Optional<UserSession> getSession(Long userId) {
        try {
            if (userId == null || userId <= 0) {
                throw new IllegalArgumentException("Invalid user ID");
            }

            UserSession session = userSessions.get(userId);
            if (session != null) {
                session.updateActivity();
            }
            return Optional.ofNullable(session);
        } catch (Exception e) {
            log.error("Error getting session for user {}", userId, e);
            return Optional.empty();
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
     */
    public void updateSessionState(Long userId, UserSession.SessionState state) {
        try {
            if (userId == null || userId <= 0) {
                throw new IllegalArgumentException("Invalid user ID");
            }
            if (state == null) {
                throw new IllegalArgumentException("State cannot be null");
            }

            UserSession session = userSessions.get(userId);
            if (session != null) {
                session.setState(state);
                session.updateActivity();

                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å PostgreSQL
                try {
                    createOrUpdateSessionEntity(session);
                    log.debug("Synchronized state change for user {} to {}", userId, state);
                } catch (Exception e) {
                    log.warn("Failed to sync state change for user {} to PostgreSQL: {}", userId, e.getMessage());
                }
            }
        } catch (Exception e) {
            log.error("Error updating session state for user {}", userId, e);
            throw new RuntimeException("Failed to update session state", e);
        }
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–∞–∫–µ—Ç
     */
    public void setSelectedPackage(Long userId, StarPackage starPackage) {
        try {
            if (userId == null || userId <= 0) {
                throw new IllegalArgumentException("Invalid user ID");
            }

            UserSession session = userSessions.get(userId);
            if (session != null) {
                session.setSelectedPackage(starPackage);
                session.setState(UserSession.SessionState.CONFIRMING_ORDER);
                session.updateActivity();

                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–∞ —Å PostgreSQL
                try {
                    createOrUpdateSessionEntity(session);
                    log.debug("Synchronized package selection for user {}", userId);
                } catch (Exception e) {
                    log.warn("Failed to sync package selection for user {} to PostgreSQL: {}", userId, e.getMessage());
                }
            }
        } catch (Exception e) {
            log.error("Error setting selected package for user {}", userId, e);
            throw new RuntimeException("Failed to set selected package", e);
        }
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
     */
    public Order createOrder(Long userId) {
        try {
            if (userId == null || userId <= 0) {
                throw new IllegalArgumentException("Invalid user ID");
            }

            UserSession session = userSessions.get(userId);
            if (session != null && session.getSelectedPackage() != null) {
                Order order = new Order(userId, session.getUsername(), session.getSelectedPackage());
                orders.put(order.getOrderId(), order);
                session.setOrderId(order.getOrderId());
                session.setState(UserSession.SessionState.AWAITING_PAYMENT);
                session.updateActivity();

                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å PostgreSQL
                try {
                    createOrUpdateSessionEntity(session);
                    log.info("Synchronized order creation for user {}, orderId: {}", userId, order.getOrderId());
                } catch (Exception e) {
                    log.warn("Failed to sync order creation for user {} to PostgreSQL: {}", userId, e.getMessage());
                }

                return order;
            }
            return null;
        } catch (Exception e) {
            log.error("Error creating order for user {}", userId, e);
            throw new RuntimeException("Failed to create order", e);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑ –ø–æ ID
     */
    public Optional<Order> getOrder(String orderId) {
        try {
            if (orderId == null || orderId.trim().isEmpty()) {
                throw new IllegalArgumentException("Invalid order ID");
            }
            return Optional.ofNullable(orders.get(orderId));
        } catch (Exception e) {
            log.error("Error getting order {}", orderId, e);
            return Optional.empty();
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public Optional<Order> getUserActiveOrder(Long userId) {
        try {
            if (userId == null || userId <= 0) {
                throw new IllegalArgumentException("Invalid user ID");
            }

            UserSession session = userSessions.get(userId);
            if (session != null && session.getOrderId() != null) {
                return getOrder(session.getOrderId());
            }
            return Optional.empty();
        } catch (Exception e) {
            log.error("Error getting active order for user {}", userId, e);
            return Optional.empty();
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
     */
    public void updateOrderStatus(String orderId, Order.OrderStatus status) {
        try {
            if (orderId == null || orderId.trim().isEmpty()) {
                throw new IllegalArgumentException("Invalid order ID");
            }

            Order order = orders.get(orderId);
            if (order != null) {
                order.updateStatus(status);
            }
        } catch (Exception e) {
            log.error("Error updating order status for order {}", orderId, e);
            throw new RuntimeException("Failed to update order status", e);
        }
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public void clearUserSession(Long userId) {
        try {
            if (userId == null || userId <= 0) {
                throw new IllegalArgumentException("Invalid user ID");
            }

            UserSession session = userSessions.get(userId);
            if (session != null) {
                session.setState(UserSession.SessionState.IDLE);
                session.setSelectedPackage(null);
                session.setOrderId(null);
                session.updateActivity();

                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏ —Å PostgreSQL
                try {
                    createOrUpdateSessionEntity(session);
                    log.debug("Synchronized session clear for user {}", userId);
                } catch (Exception e) {
                    log.warn("Failed to sync session clear for user {} to PostgreSQL: {}", userId, e.getMessage());
                }
            }
        } catch (Exception e) {
            log.error("Error clearing session for user {}", userId, e);
            throw new RuntimeException("Failed to clear session", e);
        }
    }

    // ===========================================
    // POSTGRESQL –ü–ï–†–°–ò–°–¢–ï–ù–¢–ù–û–°–¢–¨
    // ===========================================

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø: –°–æ–∑–¥–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å entity –≤ PostgreSQL
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∏–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å 175-350ms –¥–æ <50ms
     */
    @Transactional
    public UserSessionEntity createOrUpdateSessionEntity(UserSession userSession) {
        long startTime = System.currentTimeMillis();
        try {
            log.debug("‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: Creating/updating session entity for user {}", userSession.getUserId());

            // –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø #1: –ò—Å–ø–æ–ª—å–∑—É–µ–º upsert –≤–º–µ—Å—Ç–æ find+save –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ DB
            // –∑–∞–ø—Ä–æ—Å–æ–≤
            UserSessionEntity entity = upsertSessionEntity(userSession);

            long duration = System.currentTimeMillis() - startTime;
            if (duration > 50) {
                log.warn("‚ö†Ô∏è –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –û–ø–µ—Ä–∞—Ü–∏—è –≤—Å–µ –µ—â–µ –º–µ–¥–ª–µ–Ω–Ω–∞—è {}ms –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} (—Ü–µ–ª—å <50ms)",
                        duration, userSession.getUserId());
            } else {
                log.debug("‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ë—ã—Å—Ç—Ä–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è {}ms –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}",
                        duration, userSession.getUserId());
            }

            return entity;
        } catch (Exception e) {
            long duration = System.currentTimeMillis() - startTime;
            log.error("‚ùå –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {}ms –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    duration, userSession.getUserId(), e.getMessage(), e);
            throw new RuntimeException("Failed to create/update session entity", e);
        }
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø #1: Upsert –æ–ø–µ—Ä–∞—Ü–∏—è –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ DB –∑–∞–ø—Ä–æ—Å–æ–≤
     * –ó–∞–º–µ–Ω—è–µ—Ç –º–µ–¥–ª–µ–Ω–Ω—É—é –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å findByUserId + save
     */
    private UserSessionEntity upsertSessionEntity(UserSession userSession) {
        try {
            // –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
            int updatedRows = sessionRepository.updateUserActivity(
                    userSession.getUserId(),
                    LocalDateTime.now());

            if (updatedRows > 0) {
                // –ó–∞–ø–∏—Å—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                return updateExistingSessionFields(userSession);
            } else {
                // –ó–∞–ø–∏—Å–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
                return createNewSessionEntity(userSession);
            }
        } catch (Exception e) {
            log.debug("‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: Fallback –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É find+save –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}",
                    userSession.getUserId());
            return fallbackCreateOrUpdate(userSession);
        }
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø #2: –ë—ã—Å—Ç—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏
     */
    private UserSessionEntity updateExistingSessionFields(UserSession userSession) {
        // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
        Optional<UserSessionEntity> existingOpt = sessionRepository.findByUserId(userSession.getUserId());

        if (existingOpt.isPresent()) {
            UserSessionEntity entity = existingOpt.get();

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è
            boolean hasChanges = false;

            if (!Objects.equals(entity.getUsername(), userSession.getUsername())) {
                entity.setUsername(userSession.getUsername());
                hasChanges = true;
            }

            if (!Objects.equals(entity.getFirstName(), userSession.getFirstName())) {
                entity.setFirstName(userSession.getFirstName());
                hasChanges = true;
            }

            if (!Objects.equals(entity.getLastName(), userSession.getLastName())) {
                entity.setLastName(userSession.getLastName());
                hasChanges = true;
            }

            if (userSession.getState() != null) {
                UserSessionEntity.SessionState newState = convertSessionState(userSession.getState());
                if (!Objects.equals(entity.getState(), newState)) {
                    entity.setState(newState);
                    hasChanges = true;
                }
            }

            if (userSession.getOrderId() != null
                    && !Objects.equals(entity.getCurrentOrderId(), userSession.getOrderId())) {
                entity.setCurrentOrderId(userSession.getOrderId());
                hasChanges = true;
            }

            if (userSession.getPaymentType() != null
                    && !Objects.equals(entity.getPaymentType(), userSession.getPaymentType())) {
                entity.setPaymentType(userSession.getPaymentType());
                hasChanges = true;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if (hasChanges) {
                entity.updateActivity();
                return sessionRepository.save(entity);
            } else {
                log.debug("‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º save()",
                        userSession.getUserId());
                return entity;
            }
        }

        // Fallback –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        return createNewSessionEntity(userSession);
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø #3: –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
     */
    private UserSessionEntity createNewSessionEntity(UserSession userSession) {
        UserSessionEntity entity = new UserSessionEntity(
                userSession.getUserId(),
                userSession.getUsername(),
                userSession.getFirstName(),
                userSession.getLastName());

        if (userSession.getState() != null) {
            entity.setState(convertSessionState(userSession.getState()));
        }

        if (userSession.getOrderId() != null) {
            entity.setCurrentOrderId(userSession.getOrderId());
        }

        if (userSession.getPaymentType() != null) {
            entity.setPaymentType(userSession.getPaymentType());
        }

        log.info("‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userSession.getUserId());
        return sessionRepository.save(entity);
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø #4: Fallback –∫ —Å—Ç–∞—Ä–æ–π –ª–æ–≥–∏–∫–µ –µ—Å–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç
     */
    private UserSessionEntity fallbackCreateOrUpdate(UserSession userSession) {
        Optional<UserSessionEntity> existingOpt = sessionRepository.findByUserId(userSession.getUserId());

        UserSessionEntity entity;
        if (existingOpt.isPresent()) {
            entity = existingOpt.get();
            entity.setUsername(userSession.getUsername());
            entity.setFirstName(userSession.getFirstName());
            entity.setLastName(userSession.getLastName());

            if (userSession.getState() != null) {
                entity.setState(convertSessionState(userSession.getState()));
            }

            if (userSession.getOrderId() != null) {
                entity.setCurrentOrderId(userSession.getOrderId());
            }

            if (userSession.getPaymentType() != null) {
                entity.setPaymentType(userSession.getPaymentType());
            }

            entity.updateActivity();
        } else {
            entity = createNewSessionEntity(userSession);
        }

        return sessionRepository.save(entity);
    }

    /**
     * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
     */
    private UserSessionEntity.SessionState convertSessionState(UserSession.SessionState state) {
        return switch (state) {
            case IDLE -> UserSessionEntity.SessionState.IDLE;
            case SELECTING_PACKAGE -> UserSessionEntity.SessionState.SELECTING_PACKAGE;
            case CONFIRMING_ORDER -> UserSessionEntity.SessionState.CONFIRMING_ORDER;
            case AWAITING_PAYMENT -> UserSessionEntity.SessionState.AWAITING_PAYMENT;
            case PAYMENT_PROCESSING -> UserSessionEntity.SessionState.PAYMENT_PROCESSING;
            case COMPLETED -> UserSessionEntity.SessionState.COMPLETED;
            case TOPPING_UP_BALANCE -> UserSessionEntity.SessionState.TOPPING_UP_BALANCE;
            case SELECTING_PAYMENT_TYPE -> UserSessionEntity.SessionState.SELECTING_PAYMENT_TYPE;
            case BALANCE_PAYMENT_PROCESSING -> UserSessionEntity.SessionState.BALANCE_PAYMENT_PROCESSING;
            case MIXED_PAYMENT_PROCESSING -> UserSessionEntity.SessionState.MIXED_PAYMENT_PROCESSING;
            case ENTERING_CUSTOM_AMOUNT -> UserSessionEntity.SessionState.ENTERING_CUSTOM_AMOUNT;
        };
    }

    // ===========================================
    // –ú–ï–¢–û–î–´ –ó–ê–ü–†–û–°–û–í –ò –°–¢–ê–¢–ò–°–¢–ò–ö–ò
    // ===========================================

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏—é –ø–æ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ PostgreSQL
     */
    @Transactional(readOnly = true)
    public Optional<UserSessionEntity> getSessionByUserId(Long userId) {
        try {
            if (userId == null || userId <= 0) {
                throw new IllegalArgumentException("Invalid user ID");
            }
            return sessionRepository.findByUserId(userId);
        } catch (Exception e) {
            log.error("Error getting session by userId {}", userId, e);
            return Optional.empty();
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
     */
    @Transactional(readOnly = true)
    public List<UserSessionEntity> getActiveSessions() {
        try {
            return sessionRepository.findByIsActiveTrueOrderByLastActivityDesc();
        } catch (Exception e) {
            log.error("Error getting active sessions", e);
            return List.of();
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –Ω–µ–¥–∞–≤–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
     */
    @Transactional(readOnly = true)
    public List<UserSessionEntity> getRecentActiveSessions(int hours) {
        try {
            LocalDateTime since = LocalDateTime.now().minusHours(hours);
            return sessionRepository.findSessionsActiveSince(since);
        } catch (Exception e) {
            log.error("Error getting recent active sessions for {} hours", hours, e);
            return List.of();
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    @Transactional(readOnly = true)
    public List<UserSessionEntity> getOnlineUsers() {
        try {
            LocalDateTime cutoff = LocalDateTime.now().minusMinutes(5);
            return sessionRepository.findOnlineUsers(cutoff);
        } catch (Exception e) {
            log.error("Error getting online users", e);
            return List.of();
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏–∏ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
     */
    @Transactional(readOnly = true)
    public List<UserSessionEntity> getSessionsByState(UserSessionEntity.SessionState state) {
        try {
            return sessionRepository.findByStateOrderByLastActivityDesc(state);
        } catch (Exception e) {
            log.error("Error getting sessions by state {}", state, e);
            return List.of();
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Å—Å–∏–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
     */
    @Transactional(readOnly = true)
    public Page<UserSessionEntity> getSessions(Pageable pageable) {
        try {
            return sessionRepository.findAll(pageable);
        } catch (Exception e) {
            log.error("Error getting sessions with pagination", e);
            return Page.empty();
        }
    }

    /**
     * –ü–æ–∏—Å–∫ —Å–µ—Å—Å–∏–π
     */
    @Transactional(readOnly = true)
    public Page<UserSessionEntity> searchSessions(String searchTerm, Pageable pageable) {
        try {
            if (searchTerm == null || searchTerm.trim().isEmpty()) {
                throw new IllegalArgumentException("Invalid search term");
            }
            return sessionRepository.searchUsers(searchTerm, pageable);
        } catch (Exception e) {
            log.error("Error searching sessions with term: {}", searchTerm, e);
            return Page.empty();
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    @Transactional(readOnly = true)
    public List<UserSessionEntity> getTopActiveUsers(int limit) {
        try {
            return sessionRepository.findTopActiveUsers(PageRequest.of(0, limit));
        } catch (Exception e) {
            log.error("Error getting top active users", e);
            return List.of();
        }
    }

    // ===========================================
    // –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
    // ===========================================

    /**
     * –ë–∞—Ç—á-–∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–¥–Ω–∏–º SQL –∑–∞–ø—Ä–æ—Å–æ–º
     * –†–µ—à–∞–µ—Ç N+1 Query –ø—Ä–æ–±–ª–µ–º—É
     */
    @Transactional(readOnly = true)
    public UserCountsBatchResult getUserCountsBatch() {
        try {
            long startTime = System.currentTimeMillis();

            LocalDateTime activeThreshold = LocalDateTime.now().minusHours(24);
            LocalDateTime onlineThreshold = LocalDateTime.now().minusMinutes(5);

            UserCountsBatchResult result = sessionRepository.getUserCountsBatch(activeThreshold, onlineThreshold);

            long duration = System.currentTimeMillis() - startTime;
            log.info(
                    "üîç –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø N+1: getUserCountsBatch() took {}ms - SINGLE SQL QUERY instead of 3 separate queries!",
                    duration);
            log.info("üîç –†–ï–ó–£–õ–¨–¢–ê–¢ –ë–ê–¢–ß-–ó–ê–ü–†–û–°–ê: Total={}, Active={}, Online={}",
                    result.totalUsers(), result.activeUsers(), result.onlineUsers());

            return result;
        } catch (Exception e) {
            log.error("Error getting user counts batch", e);
            return new UserCountsBatchResult(0L, 0L, 0L);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–µ—Å—Å–∏–π
     */
    @Transactional(readOnly = true)
    public UserSessionStatistics getUserSessionStatistics() {
        try {
            UserActivityAverages averages = getAverageUserActivity();
            UserCountsBatchResult userCounts = getUserCountsBatch();

            return new UserSessionStatistics(
                    userCounts.totalUsers(),
                    userCounts.activeUsers(),
                    userCounts.onlineUsers(),
                    userCounts.totalUsers() - userCounts.activeUsers(),
                    getNewUsersCount(1),
                    getNewUsersCount(7),
                    getNewUsersCount(30),
                    getUsersWithPendingOrdersCount(),
                    averages.averageOrders,
                    averages.averageStarsPurchased,
                    getAverageSessionDurationHours());
        } catch (Exception e) {
            log.error("Error getting user session statistics", e);
            return new UserSessionStatistics(0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0.0, 0.0, 0.0);
        }
    }

    // ===========================================
    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –°–¢–ê–¢–ò–°–¢–ò–ö–ò
    // ===========================================

    @Transactional(readOnly = true)
    public long getNewUsersCount(int days) {
        try {
            LocalDateTime since = LocalDateTime.now().minusDays(days);
            return sessionRepository.countByCreatedAtAfter(since);
        } catch (Exception e) {
            log.error("Error getting new users count for {} days", days, e);
            return 0L;
        }
    }

    @Transactional(readOnly = true)
    public long getUsersWithPendingOrdersCount() {
        try {
            return sessionRepository.countUsersWithPendingOrders();
        } catch (Exception e) {
            log.error("Error getting users with pending orders count", e);
            return 0L;
        }
    }

    @Transactional(readOnly = true)
    public UserActivityAverages getAverageUserActivity() {
        try {
            List<Object[]> results = sessionRepository.getAverageUserActivity();
            if (!results.isEmpty()) {
                Object[] row = results.get(0);
                return new UserActivityAverages(
                        row[0] != null ? ((Number) row[0]).doubleValue() : 0.0,
                        row[1] != null ? ((Number) row[1]).doubleValue() : 0.0);
            }
            return new UserActivityAverages(0.0, 0.0);
        } catch (Exception e) {
            log.error("Error getting average user activity", e);
            return new UserActivityAverages(0.0, 0.0);
        }
    }

    @Transactional(readOnly = true)
    public Double getAverageSessionDurationHours() {
        try {
            Double duration = sessionRepository.getAverageSessionDurationHours();
            return duration != null ? duration : 0.0;
        } catch (Exception e) {
            log.error("Error getting average session duration", e);
            return 0.0;
        }
    }

    // ===========================================
    // MAINTENANCE –ò CLEANUP
    // ===========================================

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    @Transactional
    public void updateUserActivity(Long userId) {
        try {
            if (userId == null || userId <= 0) {
                throw new IllegalArgumentException("Invalid user ID");
            }

            int updated = sessionRepository.updateUserActivity(userId, LocalDateTime.now());
            if (updated > 0) {
                log.debug("Updated activity for user {}", userId);
            }
        } catch (Exception e) {
            log.error("Error updating user activity for user {}", userId, e);
        }
    }

    /**
     * –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç—ë–∫—à–∏–µ —Å–µ—Å—Å–∏–∏
     */
    @Transactional
    public int deactivateExpiredSessions(int hours) {
        try {
            LocalDateTime cutoff = LocalDateTime.now().minusHours(hours);
            int deactivated = sessionRepository.deactivateExpiredSessions(cutoff);
            if (deactivated > 0) {
                log.info("Deactivated {} expired sessions", deactivated);
            }
            return deactivated;
        } catch (Exception e) {
            log.error("Error deactivating expired sessions", e);
            return 0;
        }
    }

    /**
     * –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö in-memory —Å–µ—Å—Å–∏–π
     */
    public void cleanupOldSessions() {
        try {
            LocalDateTime cutoff = LocalDateTime.now().minusHours(24);
            int initialSize = userSessions.size();
            userSessions.entrySet().removeIf(entry -> entry.getValue().getLastActivity().isBefore(cutoff));

            int removedCount = initialSize - userSessions.size();
            if (removedCount > 0) {
                log.info("Cleaned up {} old in-memory sessions", removedCount);
            }
        } catch (Exception e) {
            log.error("Error during in-memory session cleanup", e);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö in-memory —Å–µ—Å—Å–∏–π
     */
    public int getActiveSessionsCount() {
        return userSessions.size();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤ –≤ –ø–∞–º—è—Ç–∏
     */
    public int getTotalOrdersCount() {
        return orders.size();
    }

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç—ë–∫—à–∏—Ö —Å–µ—Å—Å–∏–π (–∫–∞–∂–¥—ã–π —á–∞—Å)
     */
    @Scheduled(fixedRate = 3600000) // Each hour
    @Transactional
    public void scheduledCleanupExpiredSessions() {
        try {
            // PostgreSQL cleanup
            int deactivated = deactivateExpiredSessions(48);

            // In-memory cleanup
            cleanupOldSessions();

            if (deactivated > 0) {
                log.info("Scheduled cleanup: deactivated {} expired sessions", deactivated);
            }
        } catch (Exception e) {
            log.error("Error during scheduled session cleanup", e);
        }
    }

    // ===========================================
    // DATA TRANSFER OBJECTS
    // ===========================================

    public static class UserSessionStatistics {
        public final long totalUsers;
        public final long activeUsers;
        public final long onlineUsers;
        public final long inactiveUsers;
        public final long newUsersToday;
        public final long newUsersThisWeek;
        public final long newUsersThisMonth;
        public final long usersWithPendingOrders;
        public final Double averageOrdersPerUser;
        public final Double averageStarsPerUser;
        public final Double averageSessionDurationHours;

        public UserSessionStatistics(long totalUsers, long activeUsers, long onlineUsers, long inactiveUsers,
                long newUsersToday, long newUsersThisWeek, long newUsersThisMonth, long usersWithPendingOrders,
                Double averageOrdersPerUser, Double averageStarsPerUser, Double averageSessionDurationHours) {
            this.totalUsers = totalUsers;
            this.activeUsers = activeUsers;
            this.onlineUsers = onlineUsers;
            this.inactiveUsers = inactiveUsers;
            this.newUsersToday = newUsersToday;
            this.newUsersThisWeek = newUsersThisWeek;
            this.newUsersThisMonth = newUsersThisMonth;
            this.usersWithPendingOrders = usersWithPendingOrders;
            this.averageOrdersPerUser = averageOrdersPerUser;
            this.averageStarsPerUser = averageStarsPerUser;
            this.averageSessionDurationHours = averageSessionDurationHours;
        }

        // Getters –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å Lombok builder pattern
        public long getTotalUsers() {
            return totalUsers;
        }

        public long getActiveUsers() {
            return activeUsers;
        }

        public long getOnlineUsers() {
            return onlineUsers;
        }

        public long getInactiveUsers() {
            return inactiveUsers;
        }

        public long getNewUsersToday() {
            return newUsersToday;
        }

        public long getNewUsersThisWeek() {
            return newUsersThisWeek;
        }

        public long getNewUsersThisMonth() {
            return newUsersThisMonth;
        }

        public long getUsersWithPendingOrders() {
            return usersWithPendingOrders;
        }

        public Double getAverageOrdersPerUser() {
            return averageOrdersPerUser;
        }

        public Double getAverageStarsPerUser() {
            return averageStarsPerUser;
        }

        public Double getAverageSessionDurationHours() {
            return averageSessionDurationHours;
        }
    }

    public static class UserActivityAverages {
        public final Double averageOrders;
        public final Double averageStarsPurchased;

        public UserActivityAverages(Double averageOrders, Double averageStarsPurchased) {
            this.averageOrders = averageOrders;
            this.averageStarsPurchased = averageStarsPurchased;
        }

        // Getters –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        public Double getAverageOrders() {
            return averageOrders;
        }

        public Double getAverageStarsPurchased() {
            return averageStarsPurchased;
        }
    }
}