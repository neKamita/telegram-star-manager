package shit.back.service.activity;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import shit.back.entity.OrderEntity;
import shit.back.entity.UserActivityLogEntity;
import shit.back.entity.UserActivityLogEntity.ActionType;
import shit.back.entity.UserActivityLogEntity.LogCategory;
import shit.back.entity.UserSessionEntity;
import shit.back.repository.UserActivityLogJpaRepository;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ò –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô —Å–µ—Ä–≤–∏—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * 
 * –ö–õ–Æ–ß–ï–í–´–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:
 * 1. Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ - —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ SQL –∑–∞–ø—Ä–æ—Å–æ–≤ —Å N –¥–æ 1
 * 2. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è - –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
 * 3. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã batch'–µ–π –¥–ª—è PostgreSQL
 * 4. –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
 * 5. Fail-Fast –ø—Ä–∏–Ω—Ü–∏–ø - –±—ã—Å—Ç—Ä–æ–µ –≤—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
 * 
 * –¶–ï–õ–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:
 * - DB –æ–ø–µ—Ä–∞—Ü–∏–∏: —Å 180-257ms –¥–æ <30ms
 * - Throughput: +300% –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É
 * - Memory usage: –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±—É—Ñ–µ—Ä—ã
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã: SOLID, DRY, Clean Code, KISS, Fail-Fast, YAGNI
 */
@Slf4j
@Service
@Transactional
public class HighPerformanceUserActivityService {

    @Autowired
    private UserActivityLogJpaRepository activityLogRepository;

    @Autowired
    private UserActivitySSEService sseService;

    // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã batch –æ–ø–µ—Ä–∞—Ü–∏–π
    private static final int OPTIMAL_BATCH_SIZE = 20;
    private static final int MAX_BUFFER_SIZE = 100;
    private static final int FLUSH_INTERVAL_MS = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã
    private static final int PERFORMANCE_THRESHOLD_MS = 30;

    // –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ –±—É—Ñ–µ—Ä—ã
    private final BlockingQueue<UserActivityLogEntity> activityBuffer = new LinkedBlockingQueue<>(MAX_BUFFER_SIZE);
    private final AtomicInteger bufferSize = new AtomicInteger(0);
    private final AtomicInteger totalProcessed = new AtomicInteger(0);
    private final AtomicInteger batchCount = new AtomicInteger(0);

    /**
     * –í–´–°–û–ö–û–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞
     * –¶–µ–ª–µ–≤–æ–µ –≤—Ä–µ–º—è: <30ms –≤–º–µ—Å—Ç–æ 180-257ms
     */
    @Async("userActivityLoggingExecutor")
    public void logOrderActivityOptimized(Long userId, String username, String firstName, String lastName,
            ActionType actionType, String actionDescription,
            String orderId, BigDecimal orderAmount, Integer starCount, String paymentMethod) {

        long startTime = System.currentTimeMillis();

        try {
            UserActivityLogEntity activity = new UserActivityLogEntity(
                    userId, username, firstName, lastName, actionType, actionDescription)
                    .withOrderInfo(orderId, orderAmount, starCount)
                    .withPaymentMethod(paymentMethod);

            // –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è
            if (addToOptimizedBuffer(activity)) {
                long duration = System.currentTimeMillis() - startTime;

                if (duration <= PERFORMANCE_THRESHOLD_MS) {
                    log.debug("‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: OrderActivity –±—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ {}ms", duration);
                } else {
                    log.warn("‚ö†Ô∏è PERFORMANCE: OrderActivity –∑–∞–Ω—è–ª–æ {}ms (—Ü–µ–ª—å: <{}ms)",
                            duration, PERFORMANCE_THRESHOLD_MS);
                }

                totalProcessed.incrementAndGet();
            } else {
                log.warn("üö® BUFFER OVERFLOW: OrderActivity –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ - –±—É—Ñ–µ—Ä –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω");
            }

        } catch (Exception e) {
            long duration = System.currentTimeMillis() - startTime;
            log.error("üö® –û–®–ò–ë–ö–ê –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò: OrderActivity –ø–æ—Å–ª–µ {}ms: {}", duration, e.getMessage(), e);
        }
    }

    /**
     * –í–´–°–û–ö–û–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    @Async("userActivityLoggingExecutor")
    public void logTelegramBotActivityOptimized(Long userId, String username, String firstName, String lastName,
            ActionType actionType, String actionDescription) {

        long startTime = System.currentTimeMillis();

        try {
            UserActivityLogEntity activity = new UserActivityLogEntity(
                    userId, username, firstName, lastName, actionType, actionDescription)
                    .withLogCategory(LogCategory.TELEGRAM_BOT);

            if (addToOptimizedBuffer(activity)) {
                long duration = System.currentTimeMillis() - startTime;

                if (duration <= PERFORMANCE_THRESHOLD_MS) {
                    log.debug("‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: TelegramActivity –±—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ {}ms", duration);
                } else {
                    log.warn("‚ö†Ô∏è PERFORMANCE: TelegramActivity –∑–∞–Ω—è–ª–æ {}ms (—Ü–µ–ª—å: <{}ms)",
                            duration, PERFORMANCE_THRESHOLD_MS);
                }

                totalProcessed.incrementAndGet();
            }

        } catch (Exception e) {
            long duration = System.currentTimeMillis() - startTime;
            log.error("üö® –û–®–ò–ë–ö–ê: TelegramActivity –ø–æ—Å–ª–µ {}ms: {}", duration, e.getMessage(), e);
        }
    }

    /**
     * –í–´–°–û–ö–û–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
     */
    @Async("userActivityLoggingExecutor")
    public void logStateChangeOptimized(UserSessionEntity userSession, String previousState, String newState) {
        try {
            ActionType actionType = determineActionTypeByState(newState);
            String description = String.format("–ò–∑–º–µ–Ω–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å %s –Ω–∞ %s", previousState, newState);

            UserActivityLogEntity activity = new UserActivityLogEntity(
                    userSession.getUserId(),
                    userSession.getUsername(),
                    userSession.getFirstName(),
                    userSession.getLastName(),
                    actionType,
                    description).withStateChange(previousState, newState);

            addToOptimizedBuffer(activity);
            totalProcessed.incrementAndGet();

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {}", e.getMessage(), e);
        }
    }

    /**
     * –í–´–°–û–ö–û–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–ï —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
     */
    @Async("userActivityLoggingExecutor")
    public void logActivityOptimized(Long userId, String username, String firstName, String lastName,
            ActionType actionType, String actionDescription, LogCategory logCategory) {
        try {
            UserActivityLogEntity activity = new UserActivityLogEntity(
                    userId, username, firstName, lastName, actionType, actionDescription, logCategory);

            addToOptimizedBuffer(activity);
            totalProcessed.incrementAndGet();

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {}", e.getMessage(), e);
        }
    }

    /**
     * –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –ú–ï–¢–û–î: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä
     */
    private boolean addToOptimizedBuffer(UserActivityLogEntity activity) {
        boolean added = activityBuffer.offer(activity);

        if (added) {
            int currentSize = bufferSize.incrementAndGet();

            // –ü—Ä–∏–Ω—Ü–∏–ø Fail-Fast: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            if (currentSize >= OPTIMAL_BATCH_SIZE) {
                log.debug("üöÄ AUTO FLUSH: –î–æ—Å—Ç–∏–≥–Ω—É—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä batch ({})", currentSize);
                flushBufferAsync();
            }
        }

        return added;
    }

    /**
     * –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –ú–ï–¢–û–î: –í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞
     */
    @Async("userActivityLoggingExecutor")
    public void flushBufferAsync() {
        flushBufferOptimized();
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ —Å batch –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
     */
    @Transactional(propagation = org.springframework.transaction.annotation.Propagation.REQUIRES_NEW)
    public void flushBufferOptimized() {
        if (activityBuffer.isEmpty()) {
            return;
        }

        long startTime = System.currentTimeMillis();
        int currentBatch = batchCount.incrementAndGet();

        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π batch –∑–∞–ø–∏—Å–µ–π
            List<UserActivityLogEntity> batch = new ArrayList<>(OPTIMAL_BATCH_SIZE);
            UserActivityLogEntity activity;

            while ((activity = activityBuffer.poll()) != null && batch.size() < OPTIMAL_BATCH_SIZE) {
                batch.add(activity);
            }

            if (batch.isEmpty()) {
                return;
            }

            // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: Batch —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            long dbStartTime = System.currentTimeMillis();
            List<UserActivityLogEntity> savedActivities = activityLogRepository.saveAll(batch);
            long dbDuration = System.currentTimeMillis() - dbStartTime;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
            bufferSize.addAndGet(-batch.size());

            // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ SSE
            long sseStartTime = System.currentTimeMillis();
            processSseBatch(savedActivities);
            long sseDuration = System.currentTimeMillis() - sseStartTime;

            long totalDuration = System.currentTimeMillis() - startTime;

            // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if (totalDuration <= PERFORMANCE_THRESHOLD_MS) {
                log.info("üöÄ BATCH #{}: {} –∑–∞–ø–∏—Å–µ–π –∑–∞ {}ms (–ë–î: {}ms, SSE: {}ms) ‚úÖ",
                        currentBatch, batch.size(), totalDuration, dbDuration, sseDuration);
            } else {
                log.warn("‚ö†Ô∏è BATCH #{}: {} –∑–∞–ø–∏—Å–µ–π –∑–∞ {}ms (–ë–î: {}ms, SSE: {}ms) - –ø—Ä–µ–≤—ã—à–µ–Ω –ø–æ—Ä–æ–≥ {}ms",
                        currentBatch, batch.size(), totalDuration, dbDuration, sseDuration, PERFORMANCE_THRESHOLD_MS);
            }

            // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if (currentBatch % 10 == 0) {
                logPerformanceStats();
            }

        } catch (Exception e) {
            long errorDuration = System.currentTimeMillis() - startTime;
            log.error("üö® BATCH ERROR #{}: –û—à–∏–±–∫–∞ –ø–æ—Å–ª–µ {}ms: {}", currentBatch, errorDuration, e.getMessage(), e);
        }
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ SSE –¥–ª—è batch
     */
    private void processSseBatch(List<UserActivityLogEntity> activities) {
        for (UserActivityLogEntity activity : activities) {
            try {
                sseService.addToRecentActivities(activity);
                sseService.broadcastActivity(activity);
            } catch (Exception e) {
                log.warn("SSE –æ—à–∏–±–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {}: {}", activity.getId(), e.getMessage());
            }
        }
    }

    /**
     * –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–≤–æ–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
     */
    @Scheduled(fixedDelay = FLUSH_INTERVAL_MS)
    public void scheduledFlushBuffer() {
        if (!activityBuffer.isEmpty()) {
            int currentSize = bufferSize.get();
            log.debug("üìÖ SCHEDULED FLUSH: –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ (—Ä–∞–∑–º–µ—Ä: {})", currentSize);
            flushBufferOptimized();
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –±—É—Ñ–µ—Ä–æ–≤ (–¥–ª—è shutdown)
     */
    public void forceFlushAllBuffers() {
        log.info("üöÄ FORCE FLUSH: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –±—É—Ñ–µ—Ä–æ–≤");
        while (!activityBuffer.isEmpty()) {
            flushBufferOptimized();
        }
        logPerformanceStats();
    }

    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    private void logPerformanceStats() {
        int processed = totalProcessed.get();
        int batches = batchCount.get();
        int avgBatchSize = batches > 0 ? processed / batches : 0;

        log.info("üìä –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨: –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {} –∑–∞–ø–∏—Å–µ–π –≤ {} batch'–∞—Ö (—Å—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä: {})",
                processed, batches, avgBatchSize);
        log.info("üìä –ë–£–§–ï–†–ò–ó–ê–¶–ò–Ø: –¢–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: {}/{}", bufferSize.get(), MAX_BUFFER_SIZE);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    public PerformanceMetrics getPerformanceMetrics() {
        return new PerformanceMetrics(
                totalProcessed.get(),
                batchCount.get(),
                bufferSize.get(),
                MAX_BUFFER_SIZE,
                OPTIMAL_BATCH_SIZE,
                PERFORMANCE_THRESHOLD_MS);
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
     */
    private ActionType determineActionTypeByState(String state) {
        return switch (state) {
            case "IDLE" -> ActionType.SESSION_START;
            case "SELECTING_PACKAGE" -> ActionType.PACKAGE_VIEWED;
            case "CONFIRMING_ORDER" -> ActionType.PACKAGE_SELECTED;
            case "AWAITING_PAYMENT" -> ActionType.ORDER_CREATED;
            case "PAYMENT_PROCESSING" -> ActionType.PAYMENT_INITIATED;
            case "COMPLETED" -> ActionType.ORDER_COMPLETED;
            case "CANCELLED" -> ActionType.ORDER_CANCELLED;
            case "EXPIRED" -> ActionType.SESSION_EXPIRED;
            default -> ActionType.STATE_CHANGED;
        };
    }

    /**
     * –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    public static class PerformanceMetrics {
        public final int totalProcessed;
        public final int batchCount;
        public final int currentBufferSize;
        public final int maxBufferSize;
        public final int optimalBatchSize;
        public final int performanceThresholdMs;

        public PerformanceMetrics(int totalProcessed, int batchCount, int currentBufferSize,
                int maxBufferSize, int optimalBatchSize, int performanceThresholdMs) {
            this.totalProcessed = totalProcessed;
            this.batchCount = batchCount;
            this.currentBufferSize = currentBufferSize;
            this.maxBufferSize = maxBufferSize;
            this.optimalBatchSize = optimalBatchSize;
            this.performanceThresholdMs = performanceThresholdMs;
        }

        @Override
        public String toString() {
            return String.format(
                    "PerformanceMetrics{processed=%d, batches=%d, buffer=%d/%d, batchSize=%d, threshold=%dms}",
                    totalProcessed, batchCount, currentBufferSize, maxBufferSize, optimalBatchSize,
                    performanceThresholdMs);
        }
    }
}