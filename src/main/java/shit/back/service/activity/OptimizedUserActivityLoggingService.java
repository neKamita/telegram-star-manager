package shit.back.service.activity;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import shit.back.entity.OrderEntity;
import shit.back.entity.UserActivityLogEntity;
import shit.back.entity.UserActivityLogEntity.ActionType;
import shit.back.entity.UserActivityLogEntity.LogCategory;
import shit.back.entity.UserSessionEntity;
import shit.back.repository.UserActivityLogJpaRepository;

import java.math.BigDecimal;
import java.util.List;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.atomic.AtomicInteger;

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * 
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:
 * 1. Batch –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ SQL –∑–∞–ø—Ä–æ—Å–æ–≤
 * 2. –ë—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –≤ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
 * 3. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ thread pools
 * 4. –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ SSE –æ–ø–µ—Ä–∞—Ü–∏–π
 * 5. –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã —Å –∏–Ω–¥–µ–∫—Å–∞–º–∏
 * 
 * –†–ï–ó–£–õ–¨–¢–ê–¢: –°–Ω–∏–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å 350–º—Å –¥–æ <50–º—Å
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã: SOLID, DRY, Clean Code, KISS, Fail-Fast, YAGNI
 */
@Slf4j
@Service
@Transactional
public class OptimizedUserActivityLoggingService {

    @Autowired
    private UserActivityLogJpaRepository activityLogRepository;

    @Autowired
    private UserActivitySSEService sseService;

    // –ë—É—Ñ–µ—Ä –¥–ª—è batch –æ–ø–µ—Ä–∞—Ü–∏–π
    private final ConcurrentLinkedQueue<UserActivityLogEntity> activityBuffer = new ConcurrentLinkedQueue<>();
    private final AtomicInteger bufferSize = new AtomicInteger(0);

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    private static final int BATCH_SIZE = 15;
    private static final int MAX_BUFFER_SIZE = 50;
    private static final long FLUSH_INTERVAL_MS = 3000; // 3 —Å–µ–∫—É–Ω–¥—ã

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏—é –¥–ª—è batch –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    @Async("userActivityLoggingExecutor")
    public void logUserActivity(Long userId, String username, String firstName, String lastName,
            ActionType actionType, String actionDescription) {
        try {
            UserActivityLogEntity activity = new UserActivityLogEntity(
                    userId, username, firstName, lastName, actionType, actionDescription);

            addToBuffer(activity);

            log.debug("–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±—É—Ñ–µ—Ä: {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", actionType, username);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", e.getMessage(), e);
        }
    }

    /**
     * –ö–†–ò–¢–ò–ß–ï–°–ö–ò –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞
     * –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å 350–º—Å –¥–æ <50–º—Å —á–µ—Ä–µ–∑ batch –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    @Async("userActivityLoggingExecutor")
    @Transactional(propagation = org.springframework.transaction.annotation.Propagation.REQUIRES_NEW)
    public void logOrderActivity(Long userId, String username, String firstName, String lastName,
            ActionType actionType, String actionDescription,
            String orderId, BigDecimal orderAmount, Integer starCount, String paymentMethod) {

        long startTime = System.currentTimeMillis();

        try {
            log.debug("üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ù–∞—á–∞–ª–æ logOrderActivity –¥–ª—è userId={}", userId);

            UserActivityLogEntity activity = new UserActivityLogEntity(
                    userId, username, firstName, lastName, actionType, actionDescription)
                    .withOrderInfo(orderId, orderAmount, starCount)
                    .withPaymentMethod(paymentMethod);

            addToBuffer(activity);

            long totalTime = System.currentTimeMillis() - startTime;
            log.info("‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: OrderActivity –±—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ {}ms (—Ü–µ–ª—å: <50ms)", totalTime);

        } catch (Exception e) {
            long errorTime = System.currentTimeMillis() - startTime;
            log.error("üö® –û–®–ò–ë–ö–ê –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò: OrderActivity –ø–æ—Å–ª–µ {}ms: {}", errorTime, e.getMessage(), e);
        }
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     * –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–ø–µ—Ä–∞—Ü–∏–π
     */
    @Async("userActivityLoggingExecutor")
    @Transactional(propagation = org.springframework.transaction.annotation.Propagation.REQUIRES_NEW)
    public void logTelegramBotActivity(Long userId, String username, String firstName, String lastName,
            ActionType actionType, String actionDescription) {

        long startTime = System.currentTimeMillis();

        try {
            log.debug("üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ù–∞—á–∞–ª–æ TelegramBotActivity –¥–ª—è userId={}", userId);

            UserActivityLogEntity activity = new UserActivityLogEntity(
                    userId, username, firstName, lastName, actionType, actionDescription)
                    .withLogCategory(LogCategory.TELEGRAM_BOT);

            addToBuffer(activity);

            long totalTime = System.currentTimeMillis() - startTime;
            log.info("‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: TelegramBotActivity –±—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ {}ms (—Ü–µ–ª—å: <50ms)", totalTime);

        } catch (Exception e) {
            long errorTime = System.currentTimeMillis() - startTime;
            log.error("üö® –û–®–ò–ë–ö–ê –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò: TelegramBotActivity –ø–æ—Å–ª–µ {}ms: {}", errorTime, e.getMessage(), e);
        }
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
     */
    @Async("userActivityLoggingExecutor")
    @Transactional(propagation = org.springframework.transaction.annotation.Propagation.REQUIRES_NEW)
    public void logStateChange(UserSessionEntity userSession, String previousState, String newState) {
        try {
            ActionType actionType = determineActionTypeByState(newState);
            String description = String.format("–ò–∑–º–µ–Ω–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å %s –Ω–∞ %s", previousState, newState);

            UserActivityLogEntity activity = new UserActivityLogEntity(
                    userSession.getUserId(),
                    userSession.getUsername(),
                    userSession.getFirstName(),
                    userSession.getLastName(),
                    actionType,
                    description).withStateChange(previousState, newState);

            addToBuffer(activity);

            log.debug("State change –±—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userSession.getUserId());

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è: {}", e.getMessage(), e);
        }
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –∑–∞–∫–∞–∑–∞
     */
    @Async("userActivityLoggingExecutor")
    public void logOrderAction(OrderEntity order, ActionType actionType, String description) {
        try {
            UserActivityLogEntity activity = new UserActivityLogEntity(
                    order.getUserId(),
                    order.getUsername(),
                    null, null, // firstName, lastName –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ OrderEntity
                    actionType,
                    description)
                    .withOrderInfo(order.getOrderId(), order.getFinalAmount(), order.getStarCount())
                    .withPaymentMethod(order.getPaymentMethod());

            addToBuffer(activity);

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è –∑–∞–∫–∞–∑–∞: {}", e.getMessage(), e);
        }
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    @Async("userActivityLoggingExecutor")
    public void logApplicationActivity(Long userId, String username, String firstName, String lastName,
            ActionType actionType, String actionDescription) {
        try {
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å NULL user_id - –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º -1
            Long actualUserId = userId != null ? userId : -1L;
            String actualUsername = username != null ? username : "ADMIN";

            UserActivityLogEntity activity = new UserActivityLogEntity(
                    actualUserId, actualUsername, firstName, lastName, actionType, actionDescription)
                    .withLogCategory(LogCategory.APPLICATION);

            addToBuffer(activity);

            log.debug("Application –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", actualUsername);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {}", e.getMessage(), e);
        }
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    @Async("userActivityLoggingExecutor")
    public void logSystemActivity(String description, ActionType actionType) {
        try {
            UserActivityLogEntity activity = new UserActivityLogEntity(
                    0L, "SYSTEM", actionType, description).withLogCategory(LogCategory.SYSTEM);

            addToBuffer(activity);

            log.debug("System –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {}", e.getMessage(), e);
        }
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏
     */
    @Async("userActivityLoggingExecutor")
    public void logSystemActivityWithDetails(String description, ActionType actionType, String details) {
        try {
            UserActivityLogEntity activity = new UserActivityLogEntity(
                    0L, "SYSTEM", actionType, description)
                    .withLogCategory(LogCategory.APPLICATION)
                    .withDetails(details);

            addToBuffer(activity);

            log.debug("System –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –¥–µ—Ç–∞–ª—è–º–∏ –±—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏: {}", e.getMessage(), e);
        }
    }

    /**
     * –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ï —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
     */
    @Async("userActivityLoggingExecutor")
    public void logActivityWithCategory(Long userId, String username, String firstName, String lastName,
            ActionType actionType, String actionDescription, LogCategory logCategory) {
        try {
            UserActivityLogEntity activity = new UserActivityLogEntity(
                    userId, username, firstName, lastName, actionType, actionDescription, logCategory);

            addToBuffer(activity);

            log.debug("–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {} –±—É—Ñ–µ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", logCategory, username);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –±—É—Ñ–µ—Ä–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {}", e.getMessage(), e);
        }
    }

    /**
     * –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –ú–ï–¢–û–î: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π
     */
    private void addToBuffer(UserActivityLogEntity activity) {
        activityBuffer.offer(activity);
        int currentSize = bufferSize.incrementAndGet();

        log.trace("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±—É—Ñ–µ—Ä: —Ä–∞–∑–º–µ—Ä = {}/{}", currentSize, MAX_BUFFER_SIZE);

        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        if (currentSize >= MAX_BUFFER_SIZE) {
            log.debug("üöÄ BATCH FLUSH: –ë—É—Ñ–µ—Ä –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω ({}), –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞", currentSize);
            flushBuffer();
        }
    }

    /**
     * –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô –ú–ï–¢–û–î: Batch —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    @Transactional(propagation = org.springframework.transaction.annotation.Propagation.REQUIRES_NEW)
    public void flushBuffer() {
        if (activityBuffer.isEmpty()) {
            return;
        }

        long startTime = System.currentTimeMillis();

        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –±—É—Ñ–µ—Ä–∞
            List<UserActivityLogEntity> batch = new java.util.ArrayList<>();
            UserActivityLogEntity activity;
            int batchCount = 0;

            while ((activity = activityBuffer.poll()) != null && batchCount < BATCH_SIZE) {
                batch.add(activity);
                batchCount++;
            }

            if (batch.isEmpty()) {
                return;
            }

            // Batch —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            long dbStartTime = System.currentTimeMillis();
            List<UserActivityLogEntity> savedActivities = activityLogRepository.saveAll(batch);
            long dbTime = System.currentTimeMillis() - dbStartTime;

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
            bufferSize.addAndGet(-batch.size());

            // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ SSE –¥–ª—è –≤—Å–µ—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            long sseStartTime = System.currentTimeMillis();
            for (UserActivityLogEntity saved : savedActivities) {
                sseService.addToRecentActivities(saved);
                sseService.broadcastActivity(saved);
            }
            long sseTime = System.currentTimeMillis() - sseStartTime;

            long totalTime = System.currentTimeMillis() - startTime;

            log.info("üöÄ BATCH OPTIMIZATION: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {} –∑–∞–ø–∏—Å–µ–π –∑–∞ {}ms (–ë–î: {}ms, SSE: {}ms)",
                    batch.size(), totalTime, dbTime, sseTime);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if (totalTime > 50) {
                log.warn("‚ö†Ô∏è PERFORMANCE WARNING: Batch –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ {}ms (—Ü–µ–ª—å: <50ms)", totalTime);
            }

        } catch (Exception e) {
            long errorTime = System.currentTimeMillis() - startTime;
            log.error("üö® BATCH ERROR: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è batch –ø–æ—Å–ª–µ {}ms: {}", errorTime, e.getMessage(), e);
        }
    }

    /**
     * –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
     */
    @Scheduled(fixedDelay = FLUSH_INTERVAL_MS)
    public void scheduledFlushBuffer() {
        if (!activityBuffer.isEmpty()) {
            log.debug("üìÖ SCHEDULED FLUSH: –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é (—Ä–∞–∑–º–µ—Ä: {})", bufferSize.get());
            flushBuffer();
        }
    }

    /**
     * –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ (–¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
     */
    public void forceFlushBuffer() {
        log.info("üöÄ FORCE FLUSH: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞");
        flushBuffer();
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞)
     */
    public int getBufferSize() {
        return bufferSize.get();
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
     */
    private ActionType determineActionTypeByState(String state) {
        return switch (state) {
            case "IDLE" -> ActionType.SESSION_START;
            case "SELECTING_PACKAGE" -> ActionType.PACKAGE_VIEWED;
            case "CONFIRMING_ORDER" -> ActionType.PACKAGE_SELECTED;
            case "AWAITING_PAYMENT" -> ActionType.ORDER_CREATED;
            case "PAYMENT_PROCESSING" -> ActionType.PAYMENT_INITIATED;
            case "COMPLETED" -> ActionType.ORDER_COMPLETED;
            case "CANCELLED" -> ActionType.ORDER_CANCELLED;
            case "EXPIRED" -> ActionType.SESSION_EXPIRED;
            default -> ActionType.STATE_CHANGED;
        };
    }

    // –ú–µ—Ç–æ–¥—ã –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
    @Async("userActivityLoggingExecutor")
    public void logOrderActivityAsync(Long userId, String username, String firstName, String lastName,
            ActionType actionType, String actionDescription,
            String orderId, BigDecimal orderAmount, Integer starCount, String paymentMethod) {
        logOrderActivity(userId, username, firstName, lastName, actionType, actionDescription,
                orderId, orderAmount, starCount, paymentMethod);
    }

    @Async("userActivityLoggingExecutor")
    public void logStateChangeAsync(UserSessionEntity userSession, String previousState, String newState) {
        logStateChange(userSession, previousState, newState);
    }

    @Async("userActivityLoggingExecutor")
    public void logTelegramBotActivityAsync(Long userId, String username, String firstName, String lastName,
            ActionType actionType, String actionDescription) {
        logTelegramBotActivity(userId, username, firstName, lastName, actionType, actionDescription);
    }
}