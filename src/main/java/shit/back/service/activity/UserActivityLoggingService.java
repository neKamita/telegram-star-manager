package shit.back.service.activity;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import shit.back.entity.OrderEntity;
import shit.back.entity.UserActivityLogEntity;
import shit.back.entity.UserActivityLogEntity.ActionType;
import shit.back.entity.UserActivityLogEntity.LogCategory;
import shit.back.entity.UserSessionEntity;
import shit.back.repository.UserActivityLogJpaRepository;

import java.math.BigDecimal;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –†–ï–§–ê–ö–¢–û–†–ò–ù–ì: –í—ã–¥–µ–ª–µ–Ω –∏–∑ UserActivityLogService –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è SRP
 * 
 * –û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞:
 * - –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
 * - –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
 */
@Slf4j
@Service
@Transactional
public class UserActivityLoggingService {

    static {
        System.err.println("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TM: UserActivityLoggingService –∫–ª–∞—Å—Å –∑–∞–≥—Ä—É–∂–µ–Ω");
    }

    @Autowired
    private UserActivityLogJpaRepository activityLogRepository;

    @Autowired
    private UserActivitySSEService sseService;

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û)
     */
    @Async("userActivityLoggingExecutor")
    public void logUserActivity(Long userId, String username, String firstName, String lastName,
            ActionType actionType, String actionDescription) {
        try {
            UserActivityLogEntity activity = new UserActivityLogEntity(
                    userId, username, firstName, lastName, actionType, actionDescription);

            UserActivityLogEntity saved = activityLogRepository.save(activity);
            sseService.addToRecentActivities(saved);
            sseService.broadcastActivity(saved);

            log.debug("Logged activity: {} for user {}", actionType, username);
        } catch (Exception e) {
            log.error("Error logging user activity: {}", e.getMessage(), e);
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–∫–∞–∑–µ (–ê–°–ò–ù–•–†–û–ù–ù–û –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
     * –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
     *
     * –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
     */
    @Async("userActivityLoggingExecutor")
    @Transactional(propagation = org.springframework.transaction.annotation.Propagation.REQUIRES_NEW)
    public void logOrderActivity(Long userId, String username, String firstName, String lastName,
            ActionType actionType, String actionDescription,
            String orderId, BigDecimal orderAmount, Integer starCount, String paymentMethod) {
        long startTime = System.currentTimeMillis();
        long connectionAcquireStart = 0;
        long dbSaveStart = 0;
        long sseStart = 0;

        try {
            log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê DB PERF: OrderActivity - –Ω–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è userId={}", userId);

            connectionAcquireStart = System.currentTimeMillis();
            log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê DB PERF: –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...");

            UserActivityLogEntity activity = new UserActivityLogEntity(
                    userId, username, firstName, lastName, actionType, actionDescription)
                    .withOrderInfo(orderId, orderAmount, starCount)
                    .withPaymentMethod(paymentMethod);

            dbSaveStart = System.currentTimeMillis();
            long connectionAcquireTime = dbSaveStart - connectionAcquireStart;
            log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê DB PERF: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∑–∞ {}ms", connectionAcquireTime);

            UserActivityLogEntity saved = activityLogRepository.save(activity);

            long dbSaveTime = System.currentTimeMillis() - dbSaveStart;
            log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê DB PERF: –ë–î —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ {}ms", dbSaveTime);

            sseStart = System.currentTimeMillis();
            sseService.addToRecentActivities(saved);
            long sseAddTime = System.currentTimeMillis() - sseStart;
            log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê DB PERF: SSE addToRecentActivities –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {}ms", sseAddTime);

            long broadcastStart = System.currentTimeMillis();
            sseService.broadcastActivity(saved);
            long broadcastTime = System.currentTimeMillis() - broadcastStart;
            log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê DB PERF: SSE broadcastActivity –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {}ms", broadcastTime);

            long totalTime = System.currentTimeMillis() - startTime;
            log.error(
                    "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: OrderActivity –û–ë–©–ï–ï –í–†–ï–ú–Ø={}ms (connection={}ms, db={}ms, sse_add={}ms, sse_broadcast={}ms)",
                    totalTime, connectionAcquireTime, dbSaveTime, sseAddTime, broadcastTime);

        } catch (Exception e) {
            long errorTime = System.currentTimeMillis() - startTime;
            log.error("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê DB PERF: –û–®–ò–ë–ö–ê –ø–æ—Å–ª–µ {}ms: {}", errorTime, e.getMessage(), e);
        }
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
     * (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û)
     */
    @Async("userActivityLoggingExecutor")
    public void logOrderActivityAsync(Long userId, String username, String firstName, String lastName,
            ActionType actionType, String actionDescription,
            String orderId, BigDecimal orderAmount, Integer starCount, String paymentMethod) {
        logOrderActivity(userId, username, firstName, lastName, actionType, actionDescription,
                orderId, orderAmount, starCount, paymentMethod);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ (–ê–°–ò–ù–•–†–û–ù–ù–û –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
     * –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
     *
     * –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
     */
    @Async("userActivityLoggingExecutor")
    @Transactional(propagation = org.springframework.transaction.annotation.Propagation.REQUIRES_NEW)
    public void logStateChange(UserSessionEntity userSession, String previousState, String newState) {
        long startTime = System.currentTimeMillis();
        try {
            ActionType actionType = determineActionTypeByState(newState);
            String description = String.format("–ò–∑–º–µ–Ω–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å %s –Ω–∞ %s", previousState, newState);

            UserActivityLogEntity activity = new UserActivityLogEntity(
                    userSession.getUserId(),
                    userSession.getUsername(),
                    userSession.getFirstName(),
                    userSession.getLastName(),
                    actionType,
                    description).withStateChange(previousState, newState);

            UserActivityLogEntity saved = activityLogRepository.save(activity);
            sseService.addToRecentActivities(saved);

            long dbTime = System.currentTimeMillis();
            log.debug("State change activity saved to DB in {}ms", dbTime - startTime);

            sseService.broadcastActivity(saved);

            long totalTime = System.currentTimeMillis();
            log.debug("State change activity broadcast completed in {}ms total", totalTime - startTime);

        } catch (Exception e) {
            log.error("Error logging state change: {}", e.getMessage(), e);
        }
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
     * (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û)
     */
    @Async("userActivityLoggingExecutor")
    public void logStateChangeAsync(UserSessionEntity userSession, String previousState, String newState) {
        logStateChange(userSession, previousState, newState);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å –∑–∞–∫–∞–∑–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ OrderEntity (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û)
     */
    @Async("userActivityLoggingExecutor")
    public void logOrderAction(OrderEntity order, ActionType actionType, String description) {
        try {
            UserActivityLogEntity activity = new UserActivityLogEntity(
                    order.getUserId(),
                    order.getUsername(),
                    null, null, // firstName, lastName –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã –≤ OrderEntity
                    actionType,
                    description)
                    .withOrderInfo(order.getOrderId(), order.getFinalAmount(), order.getStarCount())
                    .withPaymentMethod(order.getPaymentMethod());

            UserActivityLogEntity saved = activityLogRepository.save(activity);
            sseService.addToRecentActivities(saved);
            sseService.broadcastActivity(saved);

        } catch (Exception e) {
            log.error("Error logging order action: {}", e.getMessage(), e);
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ (–ê–°–ò–ù–•–†–û–ù–ù–û –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
     * –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
     *
     * –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è –Ω–∞–≥—Ä—É–∑–∫–∏
     */
    @Async("userActivityLoggingExecutor")
    @Transactional(propagation = org.springframework.transaction.annotation.Propagation.REQUIRES_NEW)
    public void logTelegramBotActivity(Long userId, String username, String firstName, String lastName,
            ActionType actionType, String actionDescription) {
        long startTime = System.currentTimeMillis();
        long connectionAcquireStart = 0;
        long dbSaveStart = 0;
        long sseStart = 0;

        try {
            log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê DB PERF: TelegramBotActivity - –Ω–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è userId={}", userId);

            connectionAcquireStart = System.currentTimeMillis();
            log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê DB PERF: –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –¥–ª—è Telegram –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...");

            UserActivityLogEntity activity = new UserActivityLogEntity(
                    userId, username, firstName, lastName, actionType, actionDescription)
                    .withLogCategory(LogCategory.TELEGRAM_BOT);

            dbSaveStart = System.currentTimeMillis();
            long connectionAcquireTime = dbSaveStart - connectionAcquireStart;
            log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê DB PERF: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è Telegram –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–µ–Ω–æ –∑–∞ {}ms",
                    connectionAcquireTime);

            UserActivityLogEntity saved = activityLogRepository.save(activity);

            long dbSaveTime = System.currentTimeMillis() - dbSaveStart;
            log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê DB PERF: Telegram –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î –∑–∞ {}ms", dbSaveTime);

            sseStart = System.currentTimeMillis();
            sseService.addToRecentActivities(saved);
            long sseAddTime = System.currentTimeMillis() - sseStart;
            log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê DB PERF: SSE addToRecentActivities –¥–ª—è Telegram –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {}ms", sseAddTime);

            long broadcastStart = System.currentTimeMillis();
            sseService.broadcastActivity(saved);
            long broadcastTime = System.currentTimeMillis() - broadcastStart;
            log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê DB PERF: SSE broadcastActivity –¥–ª—è Telegram –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {}ms", broadcastTime);

            long totalTime = System.currentTimeMillis() - startTime;
            log.error(
                    "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: TelegramBotActivity –û–ë–©–ï–ï –í–†–ï–ú–Ø={}ms (connection={}ms, db={}ms, sse_add={}ms, sse_broadcast={}ms)",
                    totalTime, connectionAcquireTime, dbSaveTime, sseAddTime, broadcastTime);

        } catch (Exception e) {
            long errorTime = System.currentTimeMillis() - startTime;
            log.error("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê DB PERF: –û–®–ò–ë–ö–ê Telegram –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ {}ms: {}", errorTime, e.getMessage(),
                    e);
        }
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û)
     */
    @Async("userActivityLoggingExecutor")
    public void logTelegramBotActivityAsync(Long userId, String username, String firstName, String lastName,
            ActionType actionType, String actionDescription) {
        logTelegramBotActivity(userId, username, firstName, lastName, actionType, actionDescription);
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û)
     */
    @Async("userActivityLoggingExecutor")
    public void logApplicationActivity(Long userId, String username, String firstName, String lastName,
            ActionType actionType, String actionDescription) {
        try {
            // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—É —Å NULL user_id - –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º -1
            Long actualUserId = userId != null ? userId : -1L;
            String actualUsername = username != null ? username : "ADMIN";

            UserActivityLogEntity activity = new UserActivityLogEntity(
                    actualUserId, actualUsername, firstName, lastName, actionType, actionDescription)
                    .withLogCategory(LogCategory.APPLICATION);

            UserActivityLogEntity saved = activityLogRepository.save(activity);
            sseService.addToRecentActivities(saved);
            sseService.broadcastActivity(saved);

            log.debug("Logged application activity: {} for user {}", actionType, actualUsername);
        } catch (Exception e) {
            log.error("Error logging application activity: {}", e.getMessage(), e);
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û)
     */
    @Async("userActivityLoggingExecutor")
    public void logSystemActivity(String description, ActionType actionType) {
        try {
            UserActivityLogEntity activity = new UserActivityLogEntity(
                    0L, "SYSTEM", actionType, description).withLogCategory(LogCategory.SYSTEM);

            UserActivityLogEntity saved = activityLogRepository.save(activity);
            sseService.addToRecentActivities(saved);
            sseService.broadcastActivity(saved);

            log.debug("Logged system activity: {}", actionType);
        } catch (Exception e) {
            log.error("Error logging system activity: {}", e.getMessage(), e);
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û)
     */
    @Async("userActivityLoggingExecutor")
    public void logSystemActivityWithDetails(String description, ActionType actionType, String details) {
        try {
            UserActivityLogEntity activity = new UserActivityLogEntity(
                    0L, "SYSTEM", actionType, description)
                    .withLogCategory(LogCategory.APPLICATION)
                    .withDetails(details);

            UserActivityLogEntity saved = activityLogRepository.save(activity);
            sseService.addToRecentActivities(saved);
            sseService.broadcastActivity(saved);

            log.debug("Logged system activity with details: {}", actionType);
        } catch (Exception e) {
            log.error("Error logging system activity with details: {}", e.getMessage(), e);
        }
    }

    /**
     * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û)
     */
    @Async("userActivityLoggingExecutor")
    public void logActivityWithCategory(Long userId, String username, String firstName, String lastName,
            ActionType actionType, String actionDescription, LogCategory logCategory) {
        try {
            UserActivityLogEntity activity = new UserActivityLogEntity(
                    userId, username, firstName, lastName, actionType, actionDescription, logCategory);

            UserActivityLogEntity saved = activityLogRepository.save(activity);
            sseService.addToRecentActivities(saved);
            sseService.broadcastActivity(saved);

            log.debug("Logged {} activity: {} for user {}", logCategory, actionType, username);
        } catch (Exception e) {
            log.error("Error logging categorized activity: {}", e.getMessage(), e);
        }
    }

    private ActionType determineActionTypeByState(String state) {
        return switch (state) {
            case "IDLE" -> ActionType.SESSION_START;
            case "SELECTING_PACKAGE" -> ActionType.PACKAGE_VIEWED;
            case "CONFIRMING_ORDER" -> ActionType.PACKAGE_SELECTED;
            case "AWAITING_PAYMENT" -> ActionType.ORDER_CREATED;
            case "PAYMENT_PROCESSING" -> ActionType.PAYMENT_INITIATED;
            case "COMPLETED" -> ActionType.ORDER_COMPLETED;
            case "CANCELLED" -> ActionType.ORDER_CANCELLED;
            case "EXPIRED" -> ActionType.SESSION_EXPIRED;
            default -> ActionType.STATE_CHANGED;
        };
    }
}