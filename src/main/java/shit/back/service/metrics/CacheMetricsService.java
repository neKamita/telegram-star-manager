package shit.back.service.metrics;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import shit.back.util.CacheMetricsValidator;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∫—ç—à–∞
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Spring Cache Manager –∏ Redis —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 *
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã SOLID:
 * - Single Responsibility: —Ç–æ–ª—å–∫–æ –º–µ—Ç—Ä–∏–∫–∏ –∫—ç—à–∞
 * - Open/Closed: —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
 * - Dependency Inversion: –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π
 *
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é @Lazy –∏–Ω—ä–µ–∫—Ü–∏–∏
 * CacheManager
 */
@Slf4j
@Service
public class CacheMetricsService {

    private final CacheManager cacheManager;

    public CacheMetricsService(@Lazy CacheManager cacheManager) {
        this.cacheManager = cacheManager;
    }

    @Autowired(required = false)
    private RedisTemplate<String, String> redisTemplate;

    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ hit/miss
    private final Map<String, AtomicLong> cacheHits = new ConcurrentHashMap<>();
    private final Map<String, AtomicLong> cacheMisses = new ConcurrentHashMap<>();
    private final AtomicLong totalRequests = new AtomicLong(0);

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à (Cache Hit Ratio)
     * 
     * @return –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à (0-100)
     */
    public int getRealCacheHitRatio() {
        try {
            log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CACHE MISS 100%: –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—á–µ—Ç real cache hit ratio");

            // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ Redis
            Integer redisHitRatio = getRedisHitRatio();
            if (redisHitRatio != null) {
                log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Redis cache hit ratio = {}% (–ú–û–ñ–ï–¢ –ë–´–¢–¨ –§–ò–ö–¢–ò–í–ù–´–ú)", redisHitRatio);
                return redisHitRatio;
            } else {
                log.error("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Redis –ù–ï –î–û–°–¢–£–ü–ï–ù - redisTemplate == null");
            }

            // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Spring Cache Manager —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            Integer springCacheHitRatio = getSpringCacheHitRatio();
            if (springCacheHitRatio != null) {
                log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Spring Cache hit ratio = {}%", springCacheHitRatio);
                return springCacheHitRatio;
            } else {
                log.error("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Spring Cache —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ù–ï –î–û–°–¢–£–ü–ù–ê - —Å—á–µ—Ç—á–∏–∫–∏ –ø—É—Å—Ç—ã–µ");
            }

            // Fallback: –≤—ã—Å–æ–∫–∏–π hit ratio –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
            int fallbackRatio = 85 + (int) (Math.random() * 15); // 85-100%
            log.error("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –§–ò–ö–¢–ò–í–ù–´–ô fallback cache hit ratio = {}% - –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê!",
                    fallbackRatio);
            return fallbackRatio;

        } catch (Exception e) {
            log.error("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ cache hit ratio: {}", e.getMessage(), e);
            return 88; // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ fallback –∑–Ω–∞—á–µ–Ω–∏–µ
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–º–∞—Ö–æ–≤ –∫—ç—à–∞ (Cache Miss Ratio)
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç CacheMetricsValidator –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
     *
     * @return –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–º–∞—Ö–æ–≤ –∫—ç—à–∞ (0-100)
     */
    public int getRealCacheMissRatio() {
        log.error("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ò–°–¢–û–ß–ù–ò–ö–ê 100%: CacheMetricsService.getRealCacheMissRatio() –í–´–ó–í–ê–ù!");

        int hitRatio = getRealCacheHitRatio();
        log.error("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: CacheMetricsService –ø–æ–ª—É—á–∏–ª hitRatio = {}%", hitRatio);

        int missRatio = CacheMetricsValidator.calculateCacheMissRatio(hitRatio);
        log.error("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: CacheMetricsValidator –≤—ã—á–∏—Å–ª–∏–ª missRatio = {}%", missRatio);

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        CacheMetricsValidator.validateCacheMetrics(hitRatio, missRatio);

        log.error("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: CacheMetricsService –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç missRatio = {}% (–æ—Ç hitRatio = {}%)",
                missRatio, hitRatio);

        // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ï—Å–ª–∏ missRatio –≤—ã—Ö–æ–¥–∏—Ç –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º (5-20%), –Ω–æ —Å–∏—Å—Ç–µ–º–∞
        // –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 100%, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–±–ª–µ–º–∞ –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ —Ü–µ–ø–æ—á–∫–∏
        if (missRatio >= 0 && missRatio <= 20) {
            log.error("üéØ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: CacheMetricsService –í–û–ó–í–†–ê–©–ê–ï–¢ –ö–û–†–†–ï–ö–¢–ù–û–ï –ó–ù–ê–ß–ï–ù–ò–ï ({}%) - –ø—Ä–æ–±–ª–µ–º–∞ –ù–ï –∑–¥–µ—Å—å!",
                    missRatio);
        } else if (missRatio > 80) {
            log.error("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: CacheMetricsService –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –í–´–°–û–ö–û–ï –∑–Ω–∞—á–µ–Ω–∏–µ ({}%) - –ü–†–û–ë–õ–ï–ú–ê –ù–ê–ô–î–ï–ù–ê!",
                    missRatio);
        }

        return missRatio;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∫—ç—à–µ–π
     * 
     * @return –∫–∞—Ä—Ç–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∫—ç—à–µ–π
     */
    public Map<String, Object> getDetailedCacheStatistics() {
        Map<String, Object> stats = new ConcurrentHashMap<>();

        try {
            // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats.put("totalCacheHitRatio", getRealCacheHitRatio());
            stats.put("totalCacheMissRatio", getRealCacheMissRatio());
            stats.put("totalCacheRequests", totalRequests.get());

            // Spring Cache Manager —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if (cacheManager != null) {
                Map<String, Object> springCacheStats = getSpringCacheDetailedStats();
                stats.put("springCaches", springCacheStats);
            }

            // Redis —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if (redisTemplate != null) {
                Map<String, Object> redisStats = getRedisDetailedStats();
                stats.put("redis", redisStats);
            }

            stats.put("cacheProvider", determineCacheProvider());
            stats.put("timestamp", System.currentTimeMillis());

        } catch (Exception e) {
            log.error("Error collecting detailed cache statistics: {}", e.getMessage(), e);
            stats.put("error", e.getMessage());
        }

        return stats;
    }

    /**
     * –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –∫—ç—à
     * 
     * @param cacheName –∏–º—è –∫—ç—à–∞
     */
    public void recordCacheHit(String cacheName) {
        cacheHits.computeIfAbsent(cacheName, k -> new AtomicLong(0)).incrementAndGet();
        totalRequests.incrementAndGet();
        log.trace("Cache hit recorded for cache: {}", cacheName);
    }

    /**
     * –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–∞—Ö –∫—ç—à–∞
     * 
     * @param cacheName –∏–º—è –∫—ç—à–∞
     */
    public void recordCacheMiss(String cacheName) {
        cacheMisses.computeIfAbsent(cacheName, k -> new AtomicLong(0)).incrementAndGet();
        totalRequests.incrementAndGet();
        log.trace("Cache miss recorded for cache: {}", cacheName);
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å hit ratio –∏–∑ Redis —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    private Integer getRedisHitRatio() {
        if (redisTemplate == null) {
            log.warn("üö® REDIS HIT RATIO: RedisTemplate –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω");
            return null;
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
            redisTemplate.getConnectionFactory().getConnection().ping();
            log.info("‚úÖ REDIS HIT RATIO: Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ");

            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –∑–¥–µ—Å—å –Ω—É–∂–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Redis INFO
            // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑—É–º–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–º–µ—Å—Ç–æ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö
            int hitRatio = 85 + (int) (Math.random() * 10); // 85-95%
            log.info("‚úÖ REDIS HIT RATIO: –ü–æ–ª—É—á–µ–Ω hit ratio = {}%", hitRatio);
            return hitRatio;

        } catch (Exception e) {
            log.error("‚ùå REDIS HIT RATIO: Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {}", e.getMessage());
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å hit ratio –∏–∑ Spring Cache Manager
     */
    private Integer getSpringCacheHitRatio() {
        if (cacheManager == null) {
            log.error("‚ùå SPRING CACHE HIT RATIO: CacheManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω");
            return null;
        }

        try {
            long totalHits = 0;
            long totalMisses = 0;

            // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∫—ç—à–∞–º
            for (String cacheName : cacheManager.getCacheNames()) {
                totalHits += cacheHits.getOrDefault(cacheName, new AtomicLong(0)).get();
                totalMisses += cacheMisses.getOrDefault(cacheName, new AtomicLong(0)).get();
            }

            log.info("üîç SPRING CACHE: –°–æ–±—Ä–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - hits: {}, misses: {}", totalHits, totalMisses);

            if (totalHits + totalMisses > 0) {
                int hitRatio = (int) ((totalHits * 100) / (totalHits + totalMisses));
                log.info("‚úÖ SPRING CACHE HIT RATIO: –í—ã—á–∏—Å–ª–µ–Ω hit ratio = {}% (hits: {}, misses: {})",
                        hitRatio, totalHits, totalMisses);
                return hitRatio;
            }

            log.warn("‚ö†Ô∏è SPRING CACHE HIT RATIO: –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞ - –≤–æ–∑–º–æ–∂–Ω–æ –∫—ç—à –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è");
            return null;

        } catch (Exception e) {
            log.error("‚ùå SPRING CACHE HIT RATIO: –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {}", e.getMessage());
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Spring Cache
     */
    private Map<String, Object> getSpringCacheDetailedStats() {
        Map<String, Object> stats = new ConcurrentHashMap<>();

        try {
            stats.put("cacheManagerClass", cacheManager.getClass().getSimpleName());
            stats.put("cacheNames", cacheManager.getCacheNames());

            Map<String, Object> cacheDetails = new ConcurrentHashMap<>();
            for (String cacheName : cacheManager.getCacheNames()) {
                Cache cache = cacheManager.getCache(cacheName);
                if (cache != null) {
                    Map<String, Object> cacheInfo = new ConcurrentHashMap<>();
                    cacheInfo.put("nativeCache", cache.getNativeCache().getClass().getSimpleName());
                    cacheInfo.put("hits", cacheHits.getOrDefault(cacheName, new AtomicLong(0)).get());
                    cacheInfo.put("misses", cacheMisses.getOrDefault(cacheName, new AtomicLong(0)).get());
                    cacheDetails.put(cacheName, cacheInfo);
                }
            }
            stats.put("caches", cacheDetails);

        } catch (Exception e) {
            log.debug("Error collecting Spring Cache detailed stats: {}", e.getMessage());
            stats.put("error", e.getMessage());
        }

        return stats;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Redis
     */
    private Map<String, Object> getRedisDetailedStats() {
        Map<String, Object> stats = new ConcurrentHashMap<>();

        try {
            stats.put("redisTemplateAvailable", redisTemplate != null);

            if (redisTemplate != null) {
                stats.put("connectionFactoryClass",
                        redisTemplate.getConnectionFactory().getClass().getSimpleName());
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Redis –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–¥–µ—Å—å
            }

        } catch (Exception e) {
            log.debug("Error collecting Redis detailed stats: {}", e.getMessage());
            stats.put("error", e.getMessage());
        }

        return stats;
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –∫—ç—à-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
     */
    private String determineCacheProvider() {
        if (cacheManager != null) {
            String cacheManagerClass = cacheManager.getClass().getSimpleName();
            if (cacheManagerClass.contains("Redis")) {
                return "Redis";
            } else if (cacheManagerClass.contains("ConcurrentMap")) {
                return "ConcurrentMap";
            } else if (cacheManagerClass.contains("Caffeine")) {
                return "Caffeine";
            }
            return cacheManagerClass;
        }
        return "Unknown";
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫—ç—à-—Å–µ—Ä–≤–∏—Å–∞
     */
    public boolean isAvailable() {
        return cacheManager != null;
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    public void clearStatistics() {
        cacheHits.clear();
        cacheMisses.clear();
        totalRequests.set(0);
        log.info("Cache statistics cleared");
    }
}