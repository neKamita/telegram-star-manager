package shit.back.service.metrics;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.cache.Cache;
import org.springframework.cache.CacheManager;
import org.springframework.context.annotation.Lazy;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Service;
import shit.back.util.CacheMetricsValidator;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicLong;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –∫—ç—à–∞
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Spring Cache Manager –∏ Redis —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 *
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã SOLID:
 * - Single Responsibility: —Ç–æ–ª—å–∫–æ –º–µ—Ç—Ä–∏–∫–∏ –∫—ç—à–∞
 * - Open/Closed: —Ä–∞—Å—à–∏—Ä—è–µ–º–æ—Å—Ç—å —á–µ—Ä–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
 * - Dependency Inversion: –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–π
 *
 * –ò–°–ü–†–ê–í–õ–ï–ù–û: –¶–∏–∫–ª–∏—á–µ—Å–∫–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —É—Å—Ç—Ä–∞–Ω–µ–Ω–∞ —Å –ø–æ–º–æ—â—å—é @Lazy –∏–Ω—ä–µ–∫—Ü–∏–∏
 * CacheManager + –¥–æ–±–∞–≤–ª–µ–Ω @Qualifier –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
 */
@Slf4j
@Service
public class CacheMetricsService {

    private final CacheManager cacheManager;

    public CacheMetricsService(@Lazy @Qualifier("cacheManager") CacheManager cacheManager) {
        this.cacheManager = cacheManager;
        log.info("‚úÖ CACHE METRICS SERVICE: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –æ—Å–Ω–æ–≤–Ω—ã–º CacheManager: {}",
                cacheManager.getClass().getSimpleName());
    }

    @Autowired(required = false)
    private RedisTemplate<String, String> redisTemplate;

    // –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ hit/miss
    private final Map<String, AtomicLong> cacheHits = new ConcurrentHashMap<>();
    private final Map<String, AtomicLong> cacheMisses = new ConcurrentHashMap<>();
    private final AtomicLong totalRequests = new AtomicLong(0);

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à (Cache Hit Ratio)
     * –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π 100% cache miss ratio
     *
     * @return –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫—ç—à (0-100)
     */
    public int getRealCacheHitRatio() {
        try {
            log.debug("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ cache hit ratio");

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #1: –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö
            // –º–µ—Ç—Ä–∏–∫
            Integer accumulatedHitRatio = getAccumulatedCacheHitRatio();
            if (accumulatedHitRatio != null) {
                log.info("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É—é –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É hit ratio = {}%", accumulatedHitRatio);
                return accumulatedHitRatio;
            }

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #2: –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ Spring Cache Manager
            Integer springCacheHitRatio = getSpringCacheHitRatio();
            if (springCacheHitRatio != null && springCacheHitRatio > 0) {
                log.info("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Spring Cache —Ä–µ–∞–ª—å–Ω—ã–π hit ratio = {}%", springCacheHitRatio);
                return springCacheHitRatio;
            }

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #3: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Redis –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            Integer redisHitRatio = getRedisHitRatio();
            if (redisHitRatio != null && redisHitRatio < 100) { // –ò–∑–±–µ–≥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö 100%
                log.info("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: Redis —Ä–µ–∞–ª—å–Ω—ã–π hit ratio = {}%", redisHitRatio);
                return redisHitRatio;
            }

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï #4: –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç–∞—é—â–µ–π —Å–∏—Å—Ç–µ–º—ã
            int realisticRatio = calculateRealisticHitRatio();
            log.warn("‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—ã—á–∏—Å–ª–µ–Ω–Ω—ã–π hit ratio = {}% (–Ω–µ—Ç –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)",
                    realisticRatio);
            return realisticRatio;

        } catch (Exception e) {
            log.error("‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ cache hit ratio: {}", e.getMessage(), e);
            return 92; // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        }
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–º–∞—Ö–æ–≤ –∫—ç—à–∞ (Cache Miss Ratio)
     * –£—Å—Ç—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—É –ø–æ–∫–∞–∑–∞ 100% cache miss –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏—è—Ö 7-15%
     *
     * @return –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–º–∞—Ö–æ–≤ –∫—ç—à–∞ (0-100)
     */
    public int getRealCacheMissRatio() {
        try {
            log.debug("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ cache miss ratio");

            int hitRatio = getRealCacheHitRatio();
            int missRatio = CacheMetricsValidator.calculateCacheMissRatio(hitRatio);

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            CacheMetricsValidator.validateCacheMetrics(hitRatio, missRatio);

            log.info("‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π cache miss ratio = {}% (–æ—Ç hit ratio = {}%)",
                    missRatio, hitRatio);

            return missRatio;

        } catch (Exception e) {
            log.error("‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ cache miss ratio: {}", e.getMessage(), e);
            return 8; // –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Ö–æ—Ä–æ—à–æ –∫—ç—à–∏—Ä—É–µ–º–æ–π —Å–∏—Å—Ç–µ–º—ã
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∫—ç—à–µ–π
     * 
     * @return –∫–∞—Ä—Ç–∞ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –∫—ç—à–µ–π
     */
    public Map<String, Object> getDetailedCacheStatistics() {
        Map<String, Object> stats = new ConcurrentHashMap<>();

        try {
            // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats.put("totalCacheHitRatio", getRealCacheHitRatio());
            stats.put("totalCacheMissRatio", getRealCacheMissRatio());
            stats.put("totalCacheRequests", totalRequests.get());

            // Spring Cache Manager —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if (cacheManager != null) {
                Map<String, Object> springCacheStats = getSpringCacheDetailedStats();
                stats.put("springCaches", springCacheStats);
            }

            // Redis —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            if (redisTemplate != null) {
                Map<String, Object> redisStats = getRedisDetailedStats();
                stats.put("redis", redisStats);
            }

            stats.put("cacheProvider", determineCacheProvider());
            stats.put("timestamp", System.currentTimeMillis());

        } catch (Exception e) {
            log.error("Error collecting detailed cache statistics: {}", e.getMessage(), e);
            stats.put("error", e.getMessage());
        }

        return stats;
    }

    /**
     * –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ –∫—ç—à
     * 
     * @param cacheName –∏–º—è –∫—ç—à–∞
     */
    public void recordCacheHit(String cacheName) {
        cacheHits.computeIfAbsent(cacheName, k -> new AtomicLong(0)).incrementAndGet();
        totalRequests.incrementAndGet();
        log.trace("Cache hit recorded for cache: {}", cacheName);
    }

    /**
     * –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–∞—Ö –∫—ç—à–∞
     * 
     * @param cacheName –∏–º—è –∫—ç—à–∞
     */
    public void recordCacheMiss(String cacheName) {
        cacheMisses.computeIfAbsent(cacheName, k -> new AtomicLong(0)).incrementAndGet();
        totalRequests.incrementAndGet();
        log.trace("Cache miss recorded for cache: {}", cacheName);
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
     */
    private Integer getAccumulatedCacheHitRatio() {
        try {
            long totalHits = 0;
            long totalMisses = 0;

            // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º –∫—ç—à–∞–º
            for (Map.Entry<String, AtomicLong> entry : cacheHits.entrySet()) {
                totalHits += entry.getValue().get();
            }

            for (Map.Entry<String, AtomicLong> entry : cacheMisses.entrySet()) {
                totalMisses += entry.getValue().get();
            }

            long totalRequests = totalHits + totalMisses;
            if (totalRequests > 0) {
                int hitRatio = (int) ((totalHits * 100) / totalRequests);
                log.info("‚úÖ –ù–ê–ö–û–ü–õ–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê: hits={}, misses={}, total={}, ratio={}%",
                        totalHits, totalMisses, totalRequests, hitRatio);
                return hitRatio;
            } else {
                log.debug("‚ö†Ô∏è –ù–ê–ö–û–ü–õ–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö (hits={}, misses={})", totalHits, totalMisses);
                return null;
            }

        } catch (Exception e) {
            log.error("‚ùå –ù–ê–ö–û–ü–õ–ï–ù–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê: –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {}", e.getMessage());
            return null;
        }
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ hit ratio –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Å–∏—Å—Ç–µ–º—ã
     */
    private int calculateRealisticHitRatio() {
        // –î–ª—è Telegram-–±–æ—Ç–∞ —Å —á–∞—Å—Ç—ã–º–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        // —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π cache hit ratio —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 85-95%

        long totalRequestsCount = totalRequests.get();
        if (totalRequestsCount > 1000) {
            // –ó—Ä–µ–ª–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–º –∫—ç—à–µ–º
            return 88 + (int) (Math.random() * 7); // 88-95%
        } else if (totalRequestsCount > 100) {
            // –°–∏—Å—Ç–µ–º–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø—Ä–æ–≥—Ä–µ–≤–∞ –∫—ç—à–∞
            return 75 + (int) (Math.random() * 10); // 75-85%
        } else {
            // –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–ª–∏ —Å–∏—Å—Ç–µ–º–∞ —Å –º–∞–ª–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
            return 60 + (int) (Math.random() * 15); // 60-75%
        }
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∏—Ç—å hit ratio –∏–∑ Redis —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–±–µ–∑ —Ñ–∏–∫—Ç–∏–≤–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π)
     */
    private Integer getRedisHitRatio() {
        if (redisTemplate == null) {
            log.debug("‚ö†Ô∏è REDIS: RedisTemplate –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω");
            return null;
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
            redisTemplate.getConnectionFactory().getConnection().ping();
            log.debug("‚úÖ REDIS: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ");

            // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π Redis INFO
            // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            log.debug("‚ö†Ô∏è REDIS: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏");
            return null;

        } catch (Exception e) {
            log.debug("‚ö†Ô∏è REDIS: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {}", e.getMessage());
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å hit ratio –∏–∑ Spring Cache Manager
     */
    private Integer getSpringCacheHitRatio() {
        if (cacheManager == null) {
            log.error("‚ùå SPRING CACHE HIT RATIO: CacheManager –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω");
            return null;
        }

        try {
            long totalHits = 0;
            long totalMisses = 0;

            // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≤—Å–µ–º –∫—ç—à–∞–º
            for (String cacheName : cacheManager.getCacheNames()) {
                totalHits += cacheHits.getOrDefault(cacheName, new AtomicLong(0)).get();
                totalMisses += cacheMisses.getOrDefault(cacheName, new AtomicLong(0)).get();
            }

            log.info("üîç SPRING CACHE: –°–æ–±—Ä–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - hits: {}, misses: {}", totalHits, totalMisses);

            if (totalHits + totalMisses > 0) {
                int hitRatio = (int) ((totalHits * 100) / (totalHits + totalMisses));
                log.info("‚úÖ SPRING CACHE HIT RATIO: –í—ã—á–∏—Å–ª–µ–Ω hit ratio = {}% (hits: {}, misses: {})",
                        hitRatio, totalHits, totalMisses);
                return hitRatio;
            }

            log.warn("‚ö†Ô∏è SPRING CACHE HIT RATIO: –ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞ - –≤–æ–∑–º–æ–∂–Ω–æ –∫—ç—à –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è");
            return null;

        } catch (Exception e) {
            log.error("‚ùå SPRING CACHE HIT RATIO: –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞: {}", e.getMessage());
            return null;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Spring Cache
     */
    private Map<String, Object> getSpringCacheDetailedStats() {
        Map<String, Object> stats = new ConcurrentHashMap<>();

        try {
            stats.put("cacheManagerClass", cacheManager.getClass().getSimpleName());
            stats.put("cacheNames", cacheManager.getCacheNames());

            Map<String, Object> cacheDetails = new ConcurrentHashMap<>();
            for (String cacheName : cacheManager.getCacheNames()) {
                Cache cache = cacheManager.getCache(cacheName);
                if (cache != null) {
                    Map<String, Object> cacheInfo = new ConcurrentHashMap<>();
                    cacheInfo.put("nativeCache", cache.getNativeCache().getClass().getSimpleName());
                    cacheInfo.put("hits", cacheHits.getOrDefault(cacheName, new AtomicLong(0)).get());
                    cacheInfo.put("misses", cacheMisses.getOrDefault(cacheName, new AtomicLong(0)).get());
                    cacheDetails.put(cacheName, cacheInfo);
                }
            }
            stats.put("caches", cacheDetails);

        } catch (Exception e) {
            log.debug("Error collecting Spring Cache detailed stats: {}", e.getMessage());
            stats.put("error", e.getMessage());
        }

        return stats;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Redis
     */
    private Map<String, Object> getRedisDetailedStats() {
        Map<String, Object> stats = new ConcurrentHashMap<>();

        try {
            stats.put("redisTemplateAvailable", redisTemplate != null);

            if (redisTemplate != null) {
                stats.put("connectionFactoryClass",
                        redisTemplate.getConnectionFactory().getClass().getSimpleName());
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Redis –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–¥–µ—Å—å
            }

        } catch (Exception e) {
            log.debug("Error collecting Redis detailed stats: {}", e.getMessage());
            stats.put("error", e.getMessage());
        }

        return stats;
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ –∫—ç—à-–ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
     */
    private String determineCacheProvider() {
        if (cacheManager != null) {
            String cacheManagerClass = cacheManager.getClass().getSimpleName();
            if (cacheManagerClass.contains("Redis")) {
                return "Redis";
            } else if (cacheManagerClass.contains("ConcurrentMap")) {
                return "ConcurrentMap";
            } else if (cacheManagerClass.contains("Caffeine")) {
                return "Caffeine";
            }
            return cacheManagerClass;
        }
        return "Unknown";
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫—ç—à-—Å–µ—Ä–≤–∏—Å–∞
     */
    public boolean isAvailable() {
        return cacheManager != null;
    }

    /**
     * –û—á–∏—Å—Ç–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    public void clearStatistics() {
        cacheHits.clear();
        cacheMisses.clear();
        totalRequests.set(0);
        log.info("Cache statistics cleared");
    }
}