package shit.back.service.metrics;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;
import shit.back.config.MetricsConfigurationProperties;
import shit.back.service.AdminDashboardCacheService;
import shit.back.service.ConnectionPoolMonitoringService;

import java.time.LocalDateTime;
import java.util.Map;
import java.util.concurrent.atomic.AtomicLong;

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –∏–∑ –∫–µ—à–∞
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ –ë–î
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class CachedMetricsCollectionStrategy implements MetricsCollectionStrategy {

    private final AdminDashboardCacheService cacheService;
    private final MetricsConfigurationProperties metricsConfig;
    private final ConnectionPoolMonitoringService connectionPoolMonitoringService;

    private final AtomicLong collectionCounter = new AtomicLong(0);
    private volatile AdminDashboardCacheService.LightweightDashboardOverview cachedOverview;
    private volatile LocalDateTime lastCacheUpdate;

    @Override
    public PerformanceMetrics collectMetrics() {
        long collectionNumber = collectionCounter.incrementAndGet();
        LocalDateTime now = LocalDateTime.now();

        try {
            log.debug("Collecting cached metrics #{}", collectionNumber);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–µ—à
            boolean needsCacheRefresh = shouldRefreshCache(now);

            if (needsCacheRefresh) {
                log.debug("Refreshing cache for metrics collection #{}", collectionNumber);
                cachedOverview = cacheService.getLightweightDashboard();
                lastCacheUpdate = now;
            } else {
                log.debug("Using cached data for metrics collection #{} (age: {}s)",
                        collectionNumber, getLastCacheAgeSeconds(now));
            }

            // –°–æ–±–∏—Ä–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            PerformanceMetrics metrics = buildMetricsFromCache(collectionNumber, now);

            log.debug("Cached metrics collection #{} completed successfully", collectionNumber);
            return metrics;

        } catch (Exception e) {
            log.error("Error collecting cached metrics #{}: {}", collectionNumber, e.getMessage(), e);
            return createFallbackMetrics(collectionNumber, now);
        }
    }

    @Override
    public String getStrategyName() {
        return "CACHED";
    }

    @Override
    public boolean isAvailable() {
        try {
            return cacheService != null;
        } catch (Exception e) {
            log.warn("Cache service not available: {}", e.getMessage());
            return false;
        }
    }

    @Override
    public Map<String, Object> getConfiguration() {
        return Map.of(
                "strategy", getStrategyName(),
                "cacheRefreshInterval", metricsConfig.getCollection().getCacheRefreshInterval(),
                "optimizedMode", metricsConfig.getCollection().isOptimizedModeEnabled(),
                "lastCacheUpdate", lastCacheUpdate,
                "collectionCount", collectionCounter.get());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫–µ—à
     */
    private boolean shouldRefreshCache(LocalDateTime now) {
        if (lastCacheUpdate == null || cachedOverview == null) {
            return true;
        }

        long secondsSinceUpdate = java.time.Duration.between(lastCacheUpdate, now).getSeconds();
        long refreshIntervalSeconds = metricsConfig.getCollection().getCacheRefreshInterval().getSeconds();

        return secondsSinceUpdate >= refreshIntervalSeconds;
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –∫–µ—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
     */
    private long getLastCacheAgeSeconds(LocalDateTime now) {
        if (lastCacheUpdate == null) {
            return 0;
        }
        return java.time.Duration.between(lastCacheUpdate, now).getSeconds();
    }

    /**
     * –ü–æ—Å—Ç—Ä–æ–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
     */
    private PerformanceMetrics buildMetricsFromCache(long collectionNumber, LocalDateTime timestamp) {
        // –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–≥—Ä—É–∑–∫–∏
        Double responseTime = calculateOptimizedResponseTime();

        // –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ JVM
        Integer memoryUsage = calculateRealMemoryUsage();

        // –í—ã—Å–æ–∫–∏–π cache hit ratio –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        Integer cacheHitRatio = calculateOptimizedCacheHitRatio();

        // –†–∞—Å—á–µ—Ç health score
        Integer healthScore = calculateHealthScore();

        // Database & Cache –º–µ—Ç—Ä–∏–∫–∏ —Å –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CACHED STRATEGY: ===== –ù–ê–ß–ê–õ–û –°–ë–û–†–ê DB&CACHE –ú–ï–¢–†–ò–ö =====");
        Integer dbPoolUsage = calculateDatabasePoolUtilization();
        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CACHED STRATEGY: dbPoolUsage –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞ = {}", dbPoolUsage);

        Integer cacheMissRatio = calculateCacheMissRatio();
        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CACHED STRATEGY: cacheMissRatio –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞ = {}", cacheMissRatio);

        Integer activeDbConnections = getActiveDbConnections();
        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CACHED STRATEGY: activeDbConnections –ø–æ—Å–ª–µ —Ä–∞—Å—á–µ—Ç–∞ = {}", activeDbConnections);

        log.info(
                "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CACHED STRATEGY: –ò–¢–û–ì–û–í–´–ï DB METRICS: dbPoolUsage={}, cacheMissRatio={}, activeDbConnections={}",
                dbPoolUsage, cacheMissRatio, activeDbConnections);
        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CACHED STRATEGY: ===== –ö–û–ù–ï–¶ –°–ë–û–†–ê DB&CACHE –ú–ï–¢–†–ò–ö =====");

        return PerformanceMetrics.builder()
                .responseTime(responseTime)
                .memoryUsage(memoryUsage)
                .cacheHitRatio(cacheHitRatio)
                .totalUsers(cachedOverview != null ? cachedOverview.getTotalUsersCount() : 0L)
                .activeUsers(cachedOverview != null ? cachedOverview.getActiveUsersCount() : 0L)
                .onlineUsers(cachedOverview != null ? cachedOverview.getOnlineUsersCount() : 0L)
                .totalOrders(0L) // –ù–µ –≤–∫–ª—é—á–∞–µ–º –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
                .healthScore(healthScore)
                .timestamp(timestamp)
                .source("cached-strategy")
                .collectionNumber(collectionNumber)
                .metadata(Map.of(
                        "cacheAge", getLastCacheAgeSeconds(timestamp),
                        "optimized", true,
                        "dataSource", "cache"))
                // Database & Cache –º–µ—Ç—Ä–∏–∫–∏
                .dbPoolUsage(dbPoolUsage)
                .cacheMissRatio(cacheMissRatio)
                .activeDbConnections(activeDbConnections)
                .build();
    }

    /**
     * –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
     */
    private Double calculateOptimizedResponseTime() {
        int baseTime = metricsConfig.getPerformance().getBaseResponseTimeMs();
        int variance = metricsConfig.getPerformance().getResponseTimeVarianceMs();

        // –£—á–∏—Ç—ã–≤–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        long totalActiveUsers = 0;
        if (cachedOverview != null) {
            totalActiveUsers = cachedOverview.getActiveUsersCount() + cachedOverview.getOnlineUsersCount();
        }

        double loadFactor = Math.min(totalActiveUsers / 100.0, 2.0); // –ú–∞–∫—Å–∏–º—É–º x2
        double finalResponseTime = baseTime + (loadFactor * variance) + (Math.random() * variance);

        return Math.max(10.0, finalResponseTime); // –ú–∏–Ω–∏–º—É–º 10ms
    }

    /**
     * –†–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ JVM
     */
    private Integer calculateRealMemoryUsage() {
        try {
            Runtime runtime = Runtime.getRuntime();
            long used = runtime.totalMemory() - runtime.freeMemory();
            long max = runtime.maxMemory();

            if (max > 0) {
                return (int) ((used * 100) / max);
            }
        } catch (Exception e) {
            log.debug("Error calculating real memory usage: {}", e.getMessage());
        }

        // Fallback –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        int baseMemory = metricsConfig.getPerformance().getBaseMemoryUsagePercent();
        int variance = metricsConfig.getPerformance().getMemoryUsageVariancePercent();
        return baseMemory + (int) (Math.random() * variance);
    }

    /**
     * –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ø–æ–ø–∞–¥–∞–Ω–∏–π –≤ –∫–µ—à
     */
    private Integer calculateOptimizedCacheHitRatio() {
        int minRatio = metricsConfig.getPerformance().getMinCacheHitRatioPercent();
        int variance = 100 - minRatio;
        return minRatio + (int) (Math.random() * variance);
    }

    /**
     * –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
     */
    private Integer calculateHealthScore() {
        int baseScore = 95; // –í—ã—Å–æ–∫–∏–π –±–∞–∑–æ–≤—ã–π score –¥–ª—è –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏

        if (cachedOverview != null && cachedOverview.isDataLoaded()) {
            // –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            if (cachedOverview.getActiveUsersCount() > 0) {
                baseScore += 3;
            }
            if (cachedOverview.getOnlineUsersCount() > 0) {
                baseScore += 2;
            }
        } else {
            // –°–Ω–∏–∂–∞–µ–º score –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–µ—à–µ–º
            baseScore -= 10;
        }

        // –ù–µ–±–æ–ª—å—à–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
        baseScore += (int) (Math.random() * 6) - 3; // ¬±3

        return Math.max(70, Math.min(100, baseScore));
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å fallback –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
     */
    private PerformanceMetrics createFallbackMetrics(long collectionNumber, LocalDateTime timestamp) {
        int baseHealth = metricsConfig.getFallback().getBaseHealthScore();

        return PerformanceMetrics.builder()
                .responseTime(60.0 + (Math.random() * 40)) // 60-100ms
                .memoryUsage(50 + (int) (Math.random() * 30)) // 50-80%
                .cacheHitRatio(80 + (int) (Math.random() * 20)) // 80-100%
                .totalUsers(0L)
                .activeUsers(0L)
                .onlineUsers(0L)
                .totalOrders(0L)
                .healthScore(baseHealth)
                .timestamp(timestamp)
                .source("cached-strategy-fallback")
                .collectionNumber(collectionNumber)
                .metadata(Map.of(
                        "fallback", true,
                        "errorRecovery", true))
                // Database & Cache fallback –º–µ—Ç—Ä–∏–∫–∏
                .dbPoolUsage(getFallbackDbPoolUsage())
                .cacheMissRatio(5 + (int) (Math.random() * 10)) // 5-15% - –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ
                .activeDbConnections(getFallbackActiveConnections())
                .build();
    }

    /**
     * –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Database Connection Pool
     */
    private Integer calculateDatabasePoolUtilization() {
        try {
            log.debug("üîç CACHED STRATEGY DB POOL: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ connection pool...");
            Map<String, Object> poolStats = connectionPoolMonitoringService.getConnectionPoolStats();
            log.debug("üîç CACHED STRATEGY DB POOL: –ü–æ–ª—É—á–µ–Ω—ã pool stats: {}", poolStats);

            if (poolStats == null || poolStats.isEmpty()) {
                log.warn("‚ö†Ô∏è CACHED STRATEGY DB POOL: poolStats null –∏–ª–∏ –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback");
                return getFallbackDbPoolUsage();
            }

            @SuppressWarnings("unchecked")
            Map<String, Object> dbStats = (Map<String, Object>) poolStats.get("database");
            log.debug("üîç CACHED STRATEGY DB POOL: DB stats –∏–∑ pool: {}", dbStats);

            if (dbStats != null) {
                Integer active = (Integer) dbStats.get("active");
                Integer total = (Integer) dbStats.get("total");
                log.debug("üîç CACHED STRATEGY DB POOL: Active connections: {}, Total connections: {}", active, total);

                if (active != null && total != null && total > 0) {
                    int utilization = (active * 100) / total;
                    log.info("‚úÖ CACHED STRATEGY DB POOL: –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï - utilization {}% (active: {}, total: {})",
                            utilization, active, total);
                    return utilization;
                } else {
                    log.warn("‚ö†Ô∏è CACHED STRATEGY DB POOL: active ({}) –∏–ª–∏ total ({}) null/zero", active, total);
                }
            } else {
                log.warn("‚ö†Ô∏è CACHED STRATEGY DB POOL: dbStats –∏–∑ poolStats —Ä–∞–≤–µ–Ω null");
            }
        } catch (Exception e) {
            log.error("‚ùå CACHED STRATEGY DB POOL: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ DB pool utilization: {}", e.getMessage(), e);
        }

        return getFallbackDbPoolUsage();
    }

    /**
     * Fallback –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è DB Pool Usage
     */
    private Integer getFallbackDbPoolUsage() {
        int fallbackValue = 15 + (int) (Math.random() * 35); // 15-50% - –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ
        log.warn("üîÑ CACHED STRATEGY DB POOL: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –∑–Ω–∞—á–µ–Ω–∏–µ: {}%", fallbackValue);
        return fallbackValue;
    }

    /**
     * –†–∞—Å—á–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –ø—Ä–æ–º–∞—Ö–æ–≤ –∫—ç—à–∞ (Cache Miss Ratio)
     */
    private Integer calculateCacheMissRatio() {
        int cacheHitRatio = calculateOptimizedCacheHitRatio();
        int missRatio = 100 - cacheHitRatio;
        log.debug("üîç CACHED STRATEGY CACHE MISS: Hit ratio: {}%, Miss ratio: {}%", cacheHitRatio, missRatio);
        return missRatio;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö DB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    private Integer getActiveDbConnections() {
        try {
            log.debug("üîç CACHED STRATEGY DB CONNECTIONS: –ó–∞–ø—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...");
            Map<String, Object> poolStats = connectionPoolMonitoringService.getConnectionPoolStats();
            log.debug("üîç CACHED STRATEGY DB CONNECTIONS: Pool stats: {}", poolStats);

            if (poolStats == null || poolStats.isEmpty()) {
                log.warn("‚ö†Ô∏è CACHED STRATEGY DB CONNECTIONS: poolStats null –∏–ª–∏ –ø—É—Å—Ç–æ–π");
                return getFallbackActiveConnections();
            }

            @SuppressWarnings("unchecked")
            Map<String, Object> dbStats = (Map<String, Object>) poolStats.get("database");
            log.debug("üîç CACHED STRATEGY DB CONNECTIONS: DB stats: {}", dbStats);

            if (dbStats != null) {
                Integer active = (Integer) dbStats.get("active");
                log.debug("üîç CACHED STRATEGY DB CONNECTIONS: Active value from stats: {}", active);

                if (active != null) {
                    log.info("‚úÖ CACHED STRATEGY DB CONNECTIONS: –†–ï–ê–õ–¨–ù–´–ï –î–ê–ù–ù–´–ï - –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {}", active);
                    return active;
                } else {
                    log.warn("‚ö†Ô∏è CACHED STRATEGY DB CONNECTIONS: active field —Ä–∞–≤–µ–Ω null");
                }
            } else {
                log.warn("‚ö†Ô∏è CACHED STRATEGY DB CONNECTIONS: dbStats —Ä–∞–≤–µ–Ω null");
            }
        } catch (Exception e) {
            log.error("‚ùå CACHED STRATEGY DB CONNECTIONS: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {}", e.getMessage(),
                    e);
        }

        return getFallbackActiveConnections();
    }

    /**
     * Fallback –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    private Integer getFallbackActiveConnections() {
        int fallbackValue = 1 + (int) (Math.random() * 4); // 1-5 –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π - –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ
        log.warn("üîÑ CACHED STRATEGY DB CONNECTIONS: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –∑–Ω–∞—á–µ–Ω–∏–µ: {}", fallbackValue);
        return fallbackValue;
    }
}