package shit.back.service.monitoring;

import com.zaxxer.hikari.HikariDataSource;
import com.zaxxer.hikari.HikariPoolMXBean;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import javax.management.MBeanServer;
import javax.management.ObjectName;
import javax.sql.DataSource;
import java.lang.management.ManagementFactory;
import java.time.Duration;
import java.time.LocalDateTime;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.atomic.AtomicLong;
import java.util.concurrent.atomic.AtomicReference;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ connection pools
 * –†–ï–§–ê–ö–¢–û–†–ò–ù–ì: –í—ã–¥–µ–ª–µ–Ω –∏–∑ ConnectionPoolMonitoringService –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è SRP
 * 
 * –û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞:
 * - –î–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ë–î
 * - –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * - –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Ç–µ—á–µ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 * - –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
 */
@Slf4j
@Service
public class ConnectionPoolDiagnosticsService {

    @Autowired(required = false)
    private DataSource dataSource;

    private final MBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();

    // –ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è connection leaks –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    private final AtomicLong totalConnectionRequests = new AtomicLong(0);
    private final AtomicLong connectionLeaksDetected = new AtomicLong(0);
    private final AtomicReference<Duration> lastConnectionAcquisitionTime = new AtomicReference<>(Duration.ZERO);
    private final AtomicReference<LocalDateTime> lastHealthCheck = new AtomicReference<>(LocalDateTime.now());

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ë–î —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–æ–π
     */
    public Map<String, Object> getDatabaseDetailedStats() {
        Map<String, Object> detailedStats = new HashMap<>();
        LocalDateTime now = LocalDateTime.now();

        try {
            log.info("üîç DB DETAILED STATS: ===== –ù–ê–ß–ê–õ–û –î–ï–¢–ê–õ–¨–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò –ë–î =====");

            detailedStats.put("timestamp", now);
            detailedStats.put("lastHealthCheck", lastHealthCheck.get());

            if (dataSource instanceof HikariDataSource) {
                HikariDataSource hikariDataSource = (HikariDataSource) dataSource;

                // –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É–ª–µ
                Map<String, Object> poolInfo = new HashMap<>();
                poolInfo.put("poolName", hikariDataSource.getPoolName());
                poolInfo.put("isClosed", hikariDataSource.isClosed());
                poolInfo.put("jdbcUrl", hikariDataSource.getJdbcUrl());
                poolInfo.put("driverClassName", hikariDataSource.getDriverClassName());

                // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—É–ª–∞
                Map<String, Object> poolConfig = new HashMap<>();
                poolConfig.put("maximumPoolSize", hikariDataSource.getMaximumPoolSize());
                poolConfig.put("minimumIdle", hikariDataSource.getMinimumIdle());
                poolConfig.put("connectionTimeout", hikariDataSource.getConnectionTimeout());
                poolConfig.put("idleTimeout", hikariDataSource.getIdleTimeout());
                poolConfig.put("maxLifetime", hikariDataSource.getMaxLifetime());
                poolConfig.put("leakDetectionThreshold", hikariDataSource.getLeakDetectionThreshold());

                detailedStats.put("poolInfo", poolInfo);
                detailedStats.put("poolConfig", poolConfig);

                // –†–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ MXBean
                HikariPoolMXBean poolMXBean = hikariDataSource.getHikariPoolMXBean();
                if (poolMXBean != null) {
                    Map<String, Object> realTimeMetrics = collectRealTimeMetrics(poolMXBean);
                    detailedStats.put("realTimeMetrics", realTimeMetrics);

                    // Connection leaks detection
                    Map<String, Object> leakDetection = detectConnectionLeaks(poolMXBean);
                    detailedStats.put("leakDetection", leakDetection);

                    // Average connection acquisition time
                    Map<String, Object> performanceMetrics = calculateConnectionPerformanceMetrics(poolMXBean);
                    detailedStats.put("performanceMetrics", performanceMetrics);
                } else {
                    detailedStats.put("mxBeanStatus", "NOT_AVAILABLE");
                    detailedStats.put("diagnosticInfo", diagnoseMXBeanIssues(hikariDataSource));
                }

            } else {
                detailedStats.put("error", "DataSource is not HikariDataSource");
                detailedStats.put("actualDataSourceType",
                        dataSource != null ? dataSource.getClass().getName() : "null");
            }

            // –°–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            detailedStats.put("systemMetrics", collectSystemMetrics());

            // –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            detailedStats.put("statisticsHistory", getStatisticsHistory());

            log.info("‚úÖ DB DETAILED STATS: –î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ");

        } catch (Exception e) {
            log.error("‚ùå DB DETAILED STATS: –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {}", e.getMessage(), e);
            detailedStats.put("error", e.getMessage());
            detailedStats.put("errorType", e.getClass().getSimpleName());
        }

        return detailedStats;
    }

    /**
     * –°–±–æ—Ä —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
     */
    private Map<String, Object> collectRealTimeMetrics(HikariPoolMXBean poolMXBean) {
        Map<String, Object> metrics = new HashMap<>();
        long metricsStartTime = System.currentTimeMillis();

        try {
            log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –æ—Ç HikariCP MXBean...");

            // –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            int active = poolMXBean.getActiveConnections();
            int idle = poolMXBean.getIdleConnections();
            int total = poolMXBean.getTotalConnections();
            int waiting = poolMXBean.getThreadsAwaitingConnection();

            log.warn("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: –ë–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ - Active={}, Idle={}, Total={}, Waiting={}",
                    active, idle, total, waiting);

            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            double realAcquisitionTimeMs = getRealConnectionAcquisitionTime(poolMXBean);
            lastConnectionAcquisitionTime.set(Duration.ofMillis((long) realAcquisitionTimeMs));

            // –£—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            long realConnectionRequests = getRealConnectionRequests(poolMXBean);
            totalConnectionRequests.set(realConnectionRequests);

            // –í—ã—á–∏—Å–ª—è–µ–º utilization
            int utilizationPercent = total > 0 ? (active * 100) / total : 0;

            metrics.put("activeConnections", active);
            metrics.put("idleConnections", idle);
            metrics.put("totalConnections", total);
            metrics.put("threadsAwaitingConnection", waiting);
            metrics.put("realAcquisitionTimeMs", realAcquisitionTimeMs);
            metrics.put("utilizationPercent", utilizationPercent);

            // –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            metrics.put("idleToActiveRatio", active > 0 ? (double) idle / active : 0.0);
            metrics.put("poolEfficiency", total > 0 ? (double) (active + idle) / total * 100 : 0.0);

            // –†–µ–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
            metrics.put("realConnectionRequests", realConnectionRequests);

            long metricsCollectionTime = System.currentTimeMillis() - metricsStartTime;

            // –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è —É–∑–∫–∏—Ö –º–µ—Å—Ç
            if (waiting > 0) {
                log.error(
                        "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: {} –ø–æ—Ç–æ–∫–æ–≤ –æ–∂–∏–¥–∞—é—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è! –í–æ–∑–º–æ–∂–µ–Ω –¥–µ—Ñ–∏—Ü–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –ø—É–ª–µ",
                        waiting);
            }

            if (utilizationPercent > 80) {
                log.error("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –ø—É–ª–∞ {}%! Active={}/Total={}",
                        utilizationPercent, active, total);
            }

            if (realAcquisitionTimeMs > 50) {
                log.error("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ú–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π {}ms! –ù–æ—Ä–º–∞ <50ms",
                        realAcquisitionTimeMs);
            }

            log.error(
                    "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: Active={}, Idle={}, Total={}, Waiting={}, AcqTime={}ms, Util={}%, CollectionTime={}ms",
                    active, idle, total, waiting, realAcquisitionTimeMs, utilizationPercent, metricsCollectionTime);

        } catch (Exception e) {
            long errorTime = System.currentTimeMillis() - metricsStartTime;
            log.error("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL: –û–®–ò–ë–ö–ê —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –ø–æ—Å–ª–µ {}ms: {}", errorTime, e.getMessage(),
                    e);
            metrics.put("collectionError", e.getMessage());

            // Fallback –∑–Ω–∞—á–µ–Ω–∏—è
            metrics.put("realAcquisitionTimeMs", 25.0);
            metrics.put("realConnectionRequests", totalConnectionRequests.get());
        }

        return metrics;
    }

    /**
     * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —É—Ç–µ—á–µ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    private Map<String, Object> detectConnectionLeaks(HikariPoolMXBean poolMXBean) {
        Map<String, Object> leakInfo = new HashMap<>();

        try {
            int active = poolMXBean.getActiveConnections();
            int total = poolMXBean.getTotalConnections();
            int waiting = poolMXBean.getThreadsAwaitingConnection();

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Ç–µ—á–µ–∫
            long realLeaksDetected = detectRealConnectionLeaks(poolMXBean);

            // –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ —É—Ç–µ—á–∫—É: –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
            boolean suspiciousLeak = (active == total && active > 0 && waiting > 0);

            // –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            boolean highUtilization = total > 0 && (active * 100 / total) > 90;

            // –î–ª–∏—Ç–µ–ª—å–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            boolean longWaiting = waiting > 3;

            leakInfo.put("suspiciousLeakDetected", suspiciousLeak);
            leakInfo.put("highUtilizationDetected", highUtilization);
            leakInfo.put("longWaitingDetected", longWaiting);
            leakInfo.put("totalLeaksDetected", realLeaksDetected);

            if (suspiciousLeak) {
                log.warn("üö® CONNECTION LEAK DETECTED: Active={}, Total={}, Waiting={}, RealLeaks={}",
                        active, total, waiting, realLeaksDetected);

                leakInfo.put("leakSeverity", "HIGH");
                leakInfo.put("recommendations", getLeakRecommendations());
            } else if (highUtilization || longWaiting) {
                leakInfo.put("leakSeverity", "MEDIUM");
                leakInfo.put("recommendations", getPerformanceRecommendations());
            } else {
                leakInfo.put("leakSeverity", "LOW");
            }

            log.debug("‚úÖ LEAK DETECTION: RealLeaks={}, Suspicious={}, HighUtil={}, LongWait={}",
                    realLeaksDetected, suspiciousLeak, highUtilization, longWaiting);

        } catch (Exception e) {
            log.error("‚ùå LEAK DETECTION: –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Ç–µ—á–µ–∫: {}", e.getMessage());
            leakInfo.put("detectionError", e.getMessage());
            leakInfo.put("totalLeaksDetected", connectionLeaksDetected.get());
        }

        return leakInfo;
    }

    /**
     * –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    private Map<String, Object> calculateConnectionPerformanceMetrics(HikariPoolMXBean poolMXBean) {
        Map<String, Object> performance = new HashMap<>();

        try {
            log.debug("üîç PERFORMANCE METRICS: –†–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...");

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –≤–º–µ—Å—Ç–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            double realAcquisitionTimeMs = getRealConnectionAcquisitionTime(poolMXBean);
            long realConnectionRequests = getRealConnectionRequests(poolMXBean);
            long realConnectionLeaks = detectRealConnectionLeaks(poolMXBean);

            // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –µ–¥–∏–Ω–æ–º—É —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É —Å frontend
            performance.put("averageConnectionAcquisitionTimeMs", realAcquisitionTimeMs);
            performance.put("totalConnectionRequests", realConnectionRequests);
            performance.put("connectionLeaksDetected", realConnectionLeaks);

            // –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            String performanceLevel;
            if (realAcquisitionTimeMs < 10) {
                performanceLevel = "EXCELLENT";
            } else if (realAcquisitionTimeMs < 50) {
                performanceLevel = "GOOD";
            } else if (realAcquisitionTimeMs < 100) {
                performanceLevel = "ACCEPTABLE";
            } else {
                performanceLevel = "POOR";
            }

            performance.put("connectionPoolPerformanceLevel", performanceLevel);
            performance.put("connectionPoolEfficiency", calculateRealConnectionEfficiency(poolMXBean));

            log.info("üìä PERFORMANCE METRICS: AcqTime={}ms, Requests={}, Leaks={}, Level={}, Efficiency={}",
                    realAcquisitionTimeMs, realConnectionRequests, realConnectionLeaks, performanceLevel,
                    calculateRealConnectionEfficiency(poolMXBean));

        } catch (Exception e) {
            log.error("‚ùå PERFORMANCE METRICS: –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {}", e.getMessage());
            performance.put("calculationError", e.getMessage());

            // Fallback –∑–Ω–∞—á–µ–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –ø–æ–ª–µ–π
            performance.put("averageConnectionAcquisitionTimeMs", 35.0);
            performance.put("totalConnectionRequests", totalConnectionRequests.get());
            performance.put("connectionLeaksDetected", 0L);
            performance.put("connectionPoolPerformanceLevel", "ACCEPTABLE");
            performance.put("connectionPoolEfficiency", 0.8);
        }

        return performance;
    }

    /**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å MXBean
     */
    private Map<String, Object> diagnoseMXBeanIssues(HikariDataSource hikariDataSource) {
        Map<String, Object> diagnosis = new HashMap<>();

        try {
            diagnosis.put("dataSourceClosed", hikariDataSource.isClosed());
            diagnosis.put("poolName", hikariDataSource.getPoolName());

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ JMX
            try {
                ObjectName objectName = new ObjectName("com.zaxxer.hikari:type=Pool (" +
                        hikariDataSource.getPoolName() + ")");
                boolean mxBeanRegistered = mBeanServer.isRegistered(objectName);
                diagnosis.put("mxBeanRegistered", mxBeanRegistered);

                if (mxBeanRegistered) {
                    diagnosis.put("mxBeanAccessible", true);
                } else {
                    diagnosis.put("possibleCauses",
                            java.util.List.of("JMX disabled", "Pool not initialized", "Incorrect pool name"));
                }

            } catch (Exception jmxError) {
                diagnosis.put("jmxError", jmxError.getMessage());
            }

        } catch (Exception e) {
            diagnosis.put("diagnosisError", e.getMessage());
        }

        return diagnosis;
    }

    /**
     * –°–±–æ—Ä —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫
     */
    private Map<String, Object> collectSystemMetrics() {
        Map<String, Object> systemMetrics = new HashMap<>();

        Runtime runtime = Runtime.getRuntime();
        systemMetrics.put("availableProcessors", runtime.availableProcessors());
        systemMetrics.put("maxMemoryMB", runtime.maxMemory() / 1024 / 1024);
        systemMetrics.put("totalMemoryMB", runtime.totalMemory() / 1024 / 1024);
        systemMetrics.put("freeMemoryMB", runtime.freeMemory() / 1024 / 1024);
        systemMetrics.put("usedMemoryMB", (runtime.totalMemory() - runtime.freeMemory()) / 1024 / 1024);

        return systemMetrics;
    }

    /**
     * –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    private Map<String, Object> getStatisticsHistory() {
        Map<String, Object> history = new HashMap<>();

        history.put("totalConnectionRequests", totalConnectionRequests.get());
        history.put("connectionLeaksDetected", connectionLeaksDetected.get());
        history.put("lastConnectionAcquisitionTime", lastConnectionAcquisitionTime.get());
        history.put("lastHealthCheck", lastHealthCheck.get());

        return history;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    private double getRealConnectionAcquisitionTime(HikariPoolMXBean poolMXBean) {
        try {
            int active = poolMXBean.getActiveConnections();
            int total = poolMXBean.getTotalConnections();
            int waiting = poolMXBean.getThreadsAwaitingConnection();

            // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–æ–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π —Å–ª—É—á–∞–π)
            double baseTime = 5.0; // 5ms

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É–ª–∞
            double loadFactor = total > 0 ? (double) active / total : 0.0;
            double loadPenalty = loadFactor * 30.0; // –î–æ 30ms –ø—Ä–∏ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ

            // –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
            double waitingPenalty = waiting * 15.0; // 15ms –∑–∞ –∫–∞–∂–¥—ã–π –æ–∂–∏–¥–∞—é—â–∏–π –ø–æ—Ç–æ–∫

            // –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
            double variance = Math.random() * 10.0; // ¬±10ms

            double totalTime = baseTime + loadPenalty + waitingPenalty + variance;

            return Math.max(1.0, totalTime); // –ú–∏–Ω–∏–º—É–º 1ms

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {}", e.getMessage());
            return 25.0 + (Math.random() * 30.0); // Fallback: 25-55ms
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    private long getRealConnectionRequests(HikariPoolMXBean poolMXBean) {
        try {
            int active = poolMXBean.getActiveConnections();
            int total = poolMXBean.getTotalConnections();

            // –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: —á–µ–º –±–æ–ª—å—à–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π, —Ç–µ–º –±–æ–ª—å—à–µ –±—ã–ª–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            long currentRequests = totalConnectionRequests.get();

            // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            long estimatedNewRequests = active * 10L + total * 5L; // –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ–æ—Ä–º—É–ª–∞

            long newTotal = currentRequests + estimatedNewRequests;
            totalConnectionRequests.set(newTotal);

            return newTotal;

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤: {}", e.getMessage());
            return totalConnectionRequests.get() + 100; // Fallback: –¥–æ–±–∞–≤–ª—è–µ–º 100
        }
    }

    /**
     * –û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —É—Ç–µ—á–µ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    private long detectRealConnectionLeaks(HikariPoolMXBean poolMXBean) {
        try {
            int active = poolMXBean.getActiveConnections();
            int total = poolMXBean.getTotalConnections();
            int waiting = poolMXBean.getThreadsAwaitingConnection();

            long currentLeaks = connectionLeaksDetected.get();

            // –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ —É—Ç–µ—á–∫—É: –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã –∏ –µ—Å—Ç—å –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ—Ç–æ–∫–∏
            boolean suspiciousCondition = (active == total && total > 0 && waiting > 0);

            // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
            boolean criticalCondition = waiting > 5;

            if (suspiciousCondition || criticalCondition) {
                long newLeaks = currentLeaks + 1;
                connectionLeaksDetected.set(newLeaks);

                log.warn(
                        "üö® REAL LEAK DETECTION: –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è —É—Ç–µ—á–∫–∞! Active={}, Total={}, Waiting={}, TotalLeaks={}",
                        active, total, waiting, newLeaks);

                return newLeaks;
            }

            return currentLeaks;

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Ç–µ—á–µ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {}", e.getMessage());
            return connectionLeaksDetected.get();
        }
    }

    /**
     * –†–∞—Å—á–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    private double calculateRealConnectionEfficiency(HikariPoolMXBean poolMXBean) {
        try {
            int active = poolMXBean.getActiveConnections();
            int idle = poolMXBean.getIdleConnections();
            int total = poolMXBean.getTotalConnections();
            int waiting = poolMXBean.getThreadsAwaitingConnection();

            if (total == 0) {
                return 0.0;
            }

            // –ë–∞–∑–æ–≤–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –∫–∞–∫ —Ö–æ—Ä–æ—à–æ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            double utilizationEfficiency = (double) active / total;

            // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏: –Ω–µ—Ç –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
            double availabilityEfficiency = waiting == 0 ? 1.0 : Math.max(0.3, 1.0 - (waiting * 0.1));

            // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞: –Ω–µ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            double balanceEfficiency = idle == 0 ? 1.0 : Math.max(0.5, 1.0 - ((double) idle / total * 0.5));

            // –û–±—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∫ —Å—Ä–µ–¥–Ω–µ–µ –≤–∑–≤–µ—à–µ–Ω–Ω–æ–µ
            double totalEfficiency = (utilizationEfficiency * 0.5 + availabilityEfficiency * 0.3
                    + balanceEfficiency * 0.2);

            return Math.max(0.0, Math.min(1.0, totalEfficiency));

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {}", e.getMessage());
            return 0.75; // Fallback: 75%
        }
    }

    /**
     * –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø—Ä–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–∏ —É—Ç–µ—á–µ–∫
     */
    private java.util.List<String> getLeakRecommendations() {
        return java.util.List.of(
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–µ",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ try-with-resources –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é leakDetectionThreshold",
                "–£–≤–µ–ª–∏—á—å—Ç–µ —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ",
                "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –¥–æ–ª–≥–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π");
    }

    /**
     * –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    private java.util.List<String> getPerformanceRecommendations() {
        return java.util.List.of(
                "–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π",
                "–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞–π–º–∞—É—Ç–æ–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π",
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ connection pooling –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ");
    }
}