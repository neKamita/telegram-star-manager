package shit.back.service.monitoring;

import com.zaxxer.hikari.HikariDataSource;
import com.zaxxer.hikari.HikariPoolMXBean;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.connection.RedisConnectionFactory;
import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import javax.sql.DataSource;

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è connection pools
 * –†–ï–§–ê–ö–¢–û–†–ò–ù–ì: –í—ã–¥–µ–ª–µ–Ω –∏–∑ ConnectionPoolMonitoringService –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è SRP
 * 
 * –û—Ç–≤–µ—á–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∑–∞:
 * - –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
 * - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
 * - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤
 */
@Slf4j
@Service
public class ConnectionPoolLoggingService {

    @Autowired(required = false)
    private DataSource dataSource;

    @Autowired(required = false)
    private RedisConnectionFactory redisConnectionFactory;

    /**
     * –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ connection pools –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
     */
    @Scheduled(fixedRate = 300000) // 5 –º–∏–Ω—É—Ç
    public void monitorConnectionPools() {
        try {
            logDatabasePoolStatus();
            logRedisPoolStatus();
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ connection pools: {}", e.getMessage());
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è database connection pool
     */
    private void logDatabasePoolStatus() {
        if (dataSource instanceof HikariDataSource) {
            HikariDataSource hikariDataSource = (HikariDataSource) dataSource;
            HikariPoolMXBean poolMXBean = hikariDataSource.getHikariPoolMXBean();

            if (poolMXBean != null) {
                int activeConnections = poolMXBean.getActiveConnections();
                int idleConnections = poolMXBean.getIdleConnections();
                int totalConnections = poolMXBean.getTotalConnections();
                int threadsAwaitingConnection = poolMXBean.getThreadsAwaitingConnection();

                log.info("üìä Database Pool Status:");
                log.info("  üîπ Active: {}", activeConnections);
                log.info("  üîπ Idle: {}", idleConnections);
                log.info("  üîπ Total: {}", totalConnections);
                log.info("  üîπ Waiting: {}", threadsAwaitingConnection);

                // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö
                if (activeConnections >= totalConnections * 0.8) {
                    log.warn("‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ DB pool: {}/{}", activeConnections, totalConnections);
                }

                if (threadsAwaitingConnection > 0) {
                    log.warn("‚ö†Ô∏è –ü–æ—Ç–æ–∫–∏ –æ–∂–∏–¥–∞—é—Ç DB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {}", threadsAwaitingConnection);
                }
            }
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è Redis connection pool
     */
    private void logRedisPoolStatus() {
        if (redisConnectionFactory instanceof LettuceConnectionFactory) {
            LettuceConnectionFactory lettuceFactory = (LettuceConnectionFactory) redisConnectionFactory;

            try {
                // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
                var connection = lettuceFactory.getConnection();
                boolean isConnected = !connection.isClosed();
                connection.close();

                log.info("üìä Redis Pool Status:");
                log.info("  üîπ Connected: {}", isConnected);
                log.info("  üîπ Host: {}:{}", lettuceFactory.getHostName(), lettuceFactory.getPort());

            } catch (Exception e) {
                log.warn("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å Redis —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º: {}", e.getMessage());
            }
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º —Å –ø—É–ª–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
     */
    public void logCriticalIssues() {
        if (dataSource instanceof HikariDataSource) {
            HikariDataSource hikariDataSource = (HikariDataSource) dataSource;
            HikariPoolMXBean poolMXBean = hikariDataSource.getHikariPoolMXBean();

            if (poolMXBean != null) {
                int activeConnections = poolMXBean.getActiveConnections();
                int totalConnections = poolMXBean.getTotalConnections();
                int threadsAwaitingConnection = poolMXBean.getThreadsAwaitingConnection();

                // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª–æ–≤–∏—è
                if (activeConnections >= totalConnections && threadsAwaitingConnection > 5) {
                    log.error("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–Ω—è—Ç—ã, {} –ø–æ—Ç–æ–∫–æ–≤ –æ–∂–∏–¥–∞—é—Ç!",
                            threadsAwaitingConnection);
                    log.error("üö® –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
                    log.error("   - –£—Ç–µ—á–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ –∫–æ–¥–µ");
                    log.error("   - –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ä–∞–∑–º–µ—Ä –ø—É–ª–∞");
                    log.error("   - –î–æ–ª–≥–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");
                    log.error("   - –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö");
                }

                // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ
                if (activeConnections >= totalConnections * 0.9) {
                    log.warn("‚ö†Ô∏è –í–´–°–û–ö–ê–Ø –ù–ê–ì–†–£–ó–ö–ê: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {}/{} —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π ({}%)",
                            activeConnections, totalConnections, (activeConnections * 100) / totalConnections);
                }
            }
        }
    }

    /**
     * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
     */
    public void logDetailedDiagnostics() {
        if (dataSource instanceof HikariDataSource) {
            HikariDataSource hikariDataSource = (HikariDataSource) dataSource;

            log.info("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê CONNECTION POOL:");
            log.info("  üìã Pool Name: {}", hikariDataSource.getPoolName());
            log.info("  üìã JDBC URL: {}", hikariDataSource.getJdbcUrl());
            log.info("  üìã Driver: {}", hikariDataSource.getDriverClassName());
            log.info("  üìã Max Pool Size: {}", hikariDataSource.getMaximumPoolSize());
            log.info("  üìã Min Idle: {}", hikariDataSource.getMinimumIdle());
            log.info("  üìã Connection Timeout: {}ms", hikariDataSource.getConnectionTimeout());
            log.info("  üìã Idle Timeout: {}ms", hikariDataSource.getIdleTimeout());
            log.info("  üìã Max Lifetime: {}ms", hikariDataSource.getMaxLifetime());
            log.info("  üìã Leak Detection Threshold: {}ms", hikariDataSource.getLeakDetectionThreshold());

            HikariPoolMXBean poolMXBean = hikariDataSource.getHikariPoolMXBean();
            if (poolMXBean != null) {
                log.info("  üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:");
                log.info("    - Active: {}", poolMXBean.getActiveConnections());
                log.info("    - Idle: {}", poolMXBean.getIdleConnections());
                log.info("    - Total: {}", poolMXBean.getTotalConnections());
                log.info("    - Waiting: {}", poolMXBean.getThreadsAwaitingConnection());
            }
        }

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ JVM
        Runtime runtime = Runtime.getRuntime();
        long usedMemory = (runtime.totalMemory() - runtime.freeMemory()) / 1024 / 1024;
        long maxMemory = runtime.maxMemory() / 1024 / 1024;
        double memoryUsagePercent = (double) usedMemory / maxMemory * 100;

        log.info("üñ•Ô∏è JVM MEMORY:");
        log.info("  üìä Used: {}MB / {}MB ({}%)", usedMemory, maxMemory, String.format("%.1f", memoryUsagePercent));
        log.info("  üìä Available Processors: {}", runtime.availableProcessors());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—É–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
     */
    public void logStartupPoolStatus() {
        log.info("üöÄ –ü–†–û–í–ï–†–ö–ê CONNECTION POOL –ü–†–ò –ó–ê–ü–£–°–ö–ï:");

        if (dataSource instanceof HikariDataSource) {
            HikariDataSource hikariDataSource = (HikariDataSource) dataSource;
            log.info("‚úÖ HikariCP DataSource –æ–±–Ω–∞—Ä—É–∂–µ–Ω: {}", hikariDataSource.getPoolName());

            if (!hikariDataSource.isClosed()) {
                log.info("‚úÖ Connection pool –∞–∫—Ç–∏–≤–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
                logDatabasePoolStatus();
            } else {
                log.error("‚ùå Connection pool –∑–∞–∫—Ä—ã—Ç!");
            }
        } else {
            log.warn("‚ö†Ô∏è DataSource –Ω–µ —è–≤–ª—è–µ—Ç—Å—è HikariDataSource –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
        }

        if (redisConnectionFactory != null) {
            log.info("‚úÖ Redis ConnectionFactory –æ–±–Ω–∞—Ä—É–∂–µ–Ω");
            logRedisPoolStatus();
        } else {
            log.warn("‚ö†Ô∏è Redis ConnectionFactory –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
        }
    }
}