package shit.back.service.monitoring;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;
import shit.back.service.activity.HighPerformanceUserActivityService;
import shit.back.service.OptimizedUserSessionService;
import shit.back.application.balance.service.HighPerformanceBalanceService;

import java.util.concurrent.atomic.AtomicInteger;
import java.util.concurrent.atomic.AtomicLong;

/**
 * –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–´–ô —Å–µ—Ä–≤–∏—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ë–î
 * 
 * –§–£–ù–ö–¶–ò–ò –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê:
 * 1. –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è DB –æ–ø–µ—Ä–∞—Ü–∏–π
 * 2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ cache hit ratio –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
 * 3. –í—ã—è–≤–ª–µ–Ω–∏–µ –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (>50ms)
 * 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ batch –æ–ø–µ—Ä–∞—Ü–∏–π –∏ –∏—Ö —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 * 5. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
 * 
 * –¶–ï–õ–ï–í–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:
 * - DB –æ–ø–µ—Ä–∞—Ü–∏–∏: <50ms (—Ü–µ–ª—å <30ms –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö)
 * - Cache hit ratio: >90%
 * - Batch throughput: +300% –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å single –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
 * - Alert threshold: >100ms –¥–ª—è –ª—é–±–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
 * 
 * –ü—Ä–∏–Ω—Ü–∏–ø—ã: SOLID, DRY, Clean Code, KISS, Fail-Fast, YAGNI
 */
@Slf4j
@Service
public class DatabasePerformanceMonitoringService {

    @Autowired(required = false)
    private HighPerformanceUserActivityService activityService;

    @Autowired(required = false)
    private OptimizedUserSessionService sessionService;

    @Autowired(required = false)
    private HighPerformanceBalanceService balanceService;

    // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    private final AtomicLong totalDbOperations = new AtomicLong(0);
    private final AtomicLong totalDbTime = new AtomicLong(0);
    private final AtomicInteger slowOperationsCount = new AtomicInteger(0);
    private final AtomicInteger criticalOperationsCount = new AtomicInteger(0);

    // –ü–æ—Ä–æ–≥–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    private static final long SLOW_OPERATION_THRESHOLD_MS = 50;
    private static final long CRITICAL_OPERATION_THRESHOLD_MS = 100;
    private static final long TARGET_OPERATION_THRESHOLD_MS = 30;
    private static final double TARGET_CACHE_HIT_RATIO = 90.0;

    /**
     * –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    @Scheduled(fixedRate = 60000) // –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    public void monitorDatabasePerformance() {
        try {
            long startTime = System.currentTimeMillis();

            log.info("üîç === –ú–û–ù–ò–¢–û–†–ò–ù–ì –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ë–î ===");

            // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if (activityService != null) {
                monitorActivityServicePerformance();
            }

            // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–∞ —Å–µ—Å—Å–∏–π
            if (sessionService != null) {
                monitorSessionServicePerformance();
            }

            // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–∏—Å–∞ –±–∞–ª–∞–Ω—Å–∞
            if (balanceService != null) {
                monitorBalanceServicePerformance();
            }

            // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            logOverallPerformanceStats();

            long monitoringDuration = System.currentTimeMillis() - startTime;
            log.debug("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {}ms", monitoringDuration);

        } catch (Exception e) {
            log.error("üö® –û–®–ò–ë–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê: {}", e.getMessage(), e);
        }
    }

    /**
     * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    private void monitorActivityServicePerformance() {
        try {
            var metrics = activityService.getPerformanceMetrics();

            log.info("üìä ACTIVITY SERVICE:");
            log.info("   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {}", metrics.totalProcessed);
            log.info("   Batch –æ–ø–µ—Ä–∞—Ü–∏–π: {}", metrics.batchCount);
            log.info("   –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: {}/{}", metrics.currentBufferSize, metrics.maxBufferSize);
            log.info("   –ü–æ—Ä–æ–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {}ms", metrics.performanceThresholdMs);

            // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if (metrics.currentBufferSize > metrics.maxBufferSize * 0.8) {
                log.warn("‚ö†Ô∏è ACTIVITY: –ë—É—Ñ–µ—Ä –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ {}%",
                        (double) metrics.currentBufferSize / metrics.maxBufferSize * 100);
            }

            // –†–∞—Å—á–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ batch –æ–ø–µ—Ä–∞—Ü–∏–π
            if (metrics.batchCount > 0) {
                double avgBatchSize = (double) metrics.totalProcessed / metrics.batchCount;
                log.info("   –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä batch: {:.1f}", avgBatchSize);

                if (avgBatchSize < metrics.optimalBatchSize * 0.5) {
                    log.warn("‚ö†Ô∏è ACTIVITY: –ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å batch –æ–ø–µ—Ä–∞—Ü–∏–π (avg={:.1f}, optimal={})",
                            avgBatchSize, metrics.optimalBatchSize);
                }
            }

        } catch (Exception e) {
            log.error("üö® ACTIVITY MONITORING ERROR: {}", e.getMessage(), e);
        }
    }

    /**
     * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ —Å–µ—Å—Å–∏–π
     */
    private void monitorSessionServicePerformance() {
        try {
            var metrics = sessionService.getPerformanceMetrics();

            log.info("üìä SESSION SERVICE:");
            log.info("   Cache hits: {}", metrics.cacheHits);
            log.info("   Cache misses: {}", metrics.cacheMisses);
            log.info("   Hit ratio: {:.1f}%", metrics.hitRatio);
            log.info("   Cache —Ä–∞–∑–º–µ—Ä: {}/{}", metrics.cacheSize, metrics.maxCacheSize);
            log.info("   DB –æ–ø–µ—Ä–∞—Ü–∏–π: {}", metrics.dbOperations);

            // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if (metrics.hitRatio < TARGET_CACHE_HIT_RATIO) {
                log.error("üö® SESSION: –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ù–ò–ó–ö–ò–ô hit ratio {:.1f}% (—Ü–µ–ª—å: >{}%)",
                        metrics.hitRatio, TARGET_CACHE_HIT_RATIO);
            }

            if (metrics.cacheSize > metrics.maxCacheSize * 0.9) {
                log.warn("‚ö†Ô∏è SESSION: Cache –ø–æ—á—Ç–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ {}%",
                        (double) metrics.cacheSize / metrics.maxCacheSize * 100);
            }

        } catch (Exception e) {
            log.error("üö® SESSION MONITORING ERROR: {}", e.getMessage(), e);
        }
    }

    /**
     * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ –±–∞–ª–∞–Ω—Å–∞
     */
    private void monitorBalanceServicePerformance() {
        try {
            var metrics = balanceService.getPerformanceMetrics();

            log.info("üìä BALANCE SERVICE:");
            log.info("   Cache hits: {}", metrics.cacheHits);
            log.info("   Cache misses: {}", metrics.cacheMisses);
            log.info("   Hit ratio: {:.1f}%", metrics.hitRatio);
            log.info("   Cache —Ä–∞–∑–º–µ—Ä: {}/{}", metrics.cacheSize, metrics.maxCacheSize);
            log.info("   DB –∑–∞–ø—Ä–æ—Å–æ–≤: {}", metrics.dbQueries);
            log.info("   –í—Å–µ–≥–æ –æ–ø–µ—Ä–∞—Ü–∏–π: {}", metrics.totalOperations);
            log.info("   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {:.1f}ms", metrics.avgResponseTime);

            // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            if (metrics.hitRatio < TARGET_CACHE_HIT_RATIO) {
                log.error("üö® BALANCE: –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ù–ò–ó–ö–ò–ô hit ratio {:.1f}% (—Ü–µ–ª—å: >{}%)",
                        metrics.hitRatio, TARGET_CACHE_HIT_RATIO);
            }

            if (metrics.avgResponseTime > TARGET_OPERATION_THRESHOLD_MS) {
                log.warn("‚ö†Ô∏è BALANCE: –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ {:.1f}ms –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ü–µ–ª—å {}ms",
                        metrics.avgResponseTime, TARGET_OPERATION_THRESHOLD_MS);
            }

            if (metrics.avgResponseTime > CRITICAL_OPERATION_THRESHOLD_MS) {
                log.error("üö® BALANCE: –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ú–ï–î–õ–ï–ù–ù–´–ï –æ–ø–µ—Ä–∞—Ü–∏–∏! –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è: {:.1f}ms",
                        metrics.avgResponseTime);
                criticalOperationsCount.incrementAndGet();
            }

        } catch (Exception e) {
            log.error("üö® BALANCE MONITORING ERROR: {}", e.getMessage(), e);
        }
    }

    /**
     * –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    private void logOverallPerformanceStats() {
        long totalOps = totalDbOperations.get();
        long totalTime = totalDbTime.get();
        int slowOps = slowOperationsCount.get();
        int criticalOps = criticalOperationsCount.get();

        double avgTime = totalOps > 0 ? (double) totalTime / totalOps : 0;
        double slowOpsPercent = totalOps > 0 ? (double) slowOps / totalOps * 100 : 0;
        double criticalOpsPercent = totalOps > 0 ? (double) criticalOps / totalOps * 100 : 0;

        log.info("üìä === –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò ===");
        log.info("   –í—Å–µ–≥–æ DB –æ–ø–µ—Ä–∞—Ü–∏–π: {}", totalOps);
        log.info("   –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏: {:.1f}ms", avgTime);
        log.info("   –ú–µ–¥–ª–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (>{}ms): {} ({:.1f}%)",
                SLOW_OPERATION_THRESHOLD_MS, slowOps, slowOpsPercent);
        log.info("   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π (>{}ms): {} ({:.1f}%)",
                CRITICAL_OPERATION_THRESHOLD_MS, criticalOps, criticalOpsPercent);

        // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if (avgTime > TARGET_OPERATION_THRESHOLD_MS) {
            log.warn("‚ö†Ô∏è –û–ë–©–ï–ï: –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–π {:.1f}ms –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ü–µ–ª—å {}ms",
                    avgTime, TARGET_OPERATION_THRESHOLD_MS);
        }

        if (criticalOpsPercent > 5.0) {
            log.error("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: {}% –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–µ–≤—ã—à–∞—é—Ç {}ms!",
                    criticalOpsPercent, CRITICAL_OPERATION_THRESHOLD_MS);
        }

        // –£—Å–ø–µ—à–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if (avgTime <= TARGET_OPERATION_THRESHOLD_MS && criticalOpsPercent < 1.0) {
            log.info("‚úÖ –û–¢–õ–ò–ß–ù–ê–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨: –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è {:.1f}ms, –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π {:.1f}%",
                    avgTime, criticalOpsPercent);
        }
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –ë–î –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    public void recordDatabaseOperation(long durationMs) {
        totalDbOperations.incrementAndGet();
        totalDbTime.addAndGet(durationMs);

        if (durationMs > SLOW_OPERATION_THRESHOLD_MS) {
            slowOperationsCount.incrementAndGet();
            log.warn("‚ö†Ô∏è –ú–ï–î–õ–ï–ù–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø: {}ms (–ø–æ—Ä–æ–≥: {}ms)", durationMs, SLOW_OPERATION_THRESHOLD_MS);
        }

        if (durationMs > CRITICAL_OPERATION_THRESHOLD_MS) {
            criticalOperationsCount.incrementAndGet();
            log.error("üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò –ú–ï–î–õ–ï–ù–ù–ê–Ø –û–ü–ï–†–ê–¶–ò–Ø: {}ms (–ø–æ—Ä–æ–≥: {}ms)",
                    durationMs, CRITICAL_OPERATION_THRESHOLD_MS);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    public OverallPerformanceMetrics getOverallMetrics() {
        long totalOps = totalDbOperations.get();
        long totalTime = totalDbTime.get();

        double avgTime = totalOps > 0 ? (double) totalTime / totalOps : 0;
        double slowOpsPercent = totalOps > 0 ? (double) slowOperationsCount.get() / totalOps * 100 : 0;
        double criticalOpsPercent = totalOps > 0 ? (double) criticalOperationsCount.get() / totalOps * 100 : 0;

        return new OverallPerformanceMetrics(
                totalOps, avgTime,
                slowOperationsCount.get(), slowOpsPercent,
                criticalOperationsCount.get(), criticalOpsPercent,
                TARGET_OPERATION_THRESHOLD_MS, CRITICAL_OPERATION_THRESHOLD_MS);
    }

    /**
     * –°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
     */
    public void resetStatistics() {
        totalDbOperations.set(0);
        totalDbTime.set(0);
        slowOperationsCount.set(0);
        criticalOperationsCount.set(0);
        log.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ë–†–û–®–ï–ù–ê");
    }

    /**
     * –ú–µ—Ç—Ä–∏–∫–∏ –æ–±—â–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    public static class OverallPerformanceMetrics {
        public final long totalOperations;
        public final double avgResponseTime;
        public final int slowOperations;
        public final double slowOperationsPercent;
        public final int criticalOperations;
        public final double criticalOperationsPercent;
        public final long targetThresholdMs;
        public final long criticalThresholdMs;

        public OverallPerformanceMetrics(long totalOperations, double avgResponseTime,
                int slowOperations, double slowOperationsPercent,
                int criticalOperations, double criticalOperationsPercent,
                long targetThresholdMs, long criticalThresholdMs) {
            this.totalOperations = totalOperations;
            this.avgResponseTime = avgResponseTime;
            this.slowOperations = slowOperations;
            this.slowOperationsPercent = slowOperationsPercent;
            this.criticalOperations = criticalOperations;
            this.criticalOperationsPercent = criticalOperationsPercent;
            this.targetThresholdMs = targetThresholdMs;
            this.criticalThresholdMs = criticalThresholdMs;
        }

        @Override
        public String toString() {
            return String.format(
                    "OverallMetrics{ops=%d, avgTime=%.1fms, slow=%d(%.1f%%), critical=%d(%.1f%%), target=%dms, criticalThreshold=%dms}",
                    totalOperations, avgResponseTime, slowOperations, slowOperationsPercent,
                    criticalOperations, criticalOperationsPercent, targetThresholdMs, criticalThresholdMs);
        }
    }
}