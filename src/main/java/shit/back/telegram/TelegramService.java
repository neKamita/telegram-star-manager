package shit.back.telegram;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import shit.back.telegram.commands.TelegramCommand;
import shit.back.telegram.commands.TelegramCommandHandler;
import shit.back.telegram.dto.TelegramRequest;
import shit.back.telegram.dto.TelegramResponse;
import shit.back.telegram.queries.TelegramQuery;
import shit.back.telegram.queries.TelegramQueryHandler;
import shit.back.telegram.ui.TelegramUIFactory;

import jakarta.annotation.PostConstruct;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * –ï–¥–∏–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –≤—Å–µ—Ö Telegram –æ–ø–µ—Ä–∞—Ü–∏–π
 * 
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞—Ä—ã—Ö TelegramApplicationService,
 * TelegramPresentationService –∏ —á–∞—Å—Ç–∏ TelegramInfrastructureService
 * –≤ –ø—Ä–æ—Å—Ç–æ–π –∏ —É–¥–æ–±–Ω—ã–π API
 */
@Service
@Transactional
@Slf4j
public class TelegramService {

    @Autowired
    private ApplicationContext applicationContext;

    @Autowired
    private TelegramUIFactory uiFactory;

    // –†–µ–µ—Å—Ç—Ä—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    private final Map<Class<? extends TelegramCommand>, TelegramCommandHandler<?>> commandHandlers = new ConcurrentHashMap<>();
    private final Map<Class<? extends TelegramQuery>, TelegramQueryHandler<?>> queryHandlers = new ConcurrentHashMap<>();

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    private long totalCommandsProcessed = 0;
    private long totalQueriesProcessed = 0;
    private long totalErrors = 0;

    /**
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
     */
    @PostConstruct
    public void initializeHandlers() {
        log.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TelegramService - –µ–¥–∏–Ω–æ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–∞ Telegram –æ–ø–µ—Ä–∞—Ü–∏–π");

        registerCommandHandlers();
        registerQueryHandlers();

        log.info("‚úÖ TelegramService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {} CommandHandlers, {} QueryHandlers",
                commandHandlers.size(), queryHandlers.size());
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã (CQRS Write Side)
     */
    @SuppressWarnings("unchecked")
    public TelegramResponse executeCommand(TelegramCommand command) {
        log.info("‚ö° –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}",
                command.getCommandType(), command.getUserId());

        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
            command.validate();

            // –ü–æ–∏—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            TelegramCommandHandler<TelegramCommand> handler = (TelegramCommandHandler<TelegramCommand>) commandHandlers
                    .get(command.getClass());

            if (handler == null || !handler.isEnabled()) {
                String error = "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω: " + command.getCommandType();
                log.error("‚ùå {}", error);
                totalErrors++;
                return TelegramResponse.error(error);
            }

            // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
            TelegramResponse response = handler.handle(command);

            if (response.isSuccessful()) {
                log.info("‚úÖ –ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}",
                        command.getCommandType(), command.getUserId());
                totalCommandsProcessed++;
            } else {
                log.warn("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–æ–π: {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {} - {}",
                        command.getCommandType(), command.getUserId(), response.getErrorMessage());
                totalErrors++;
            }

            return response;

        } catch (Exception e) {
            String error = "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã " + command.getCommandType() + ": " + e.getMessage();
            log.error("‚ùå {}", error, e);
            totalErrors++;
            return TelegramResponse.error(error);
        }
    }

    /**
     * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ (CQRS Read Side)
     */
    @SuppressWarnings("unchecked")
    @Transactional(readOnly = true)
    public TelegramResponse executeQuery(TelegramQuery query) {
        log.debug("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞: {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}",
                query.getQueryType(), query.getUserId());
        log.info("üü¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: TelegramService.executeQuery() –≤—ã–∑–≤–∞–Ω - —ç—Ç–æ –ü–†–ê–í–ò–õ–¨–ù–´–ô –ø—É—Ç—å —Å UI!");
        log.info("üü¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ò—â–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π handler –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {}", query.getQueryType());

        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
            query.validate();

            // –ü–æ–∏—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            TelegramQueryHandler<TelegramQuery> handler = (TelegramQueryHandler<TelegramQuery>) queryHandlers
                    .get(query.getClass());

            if (handler == null || !handler.isEnabled()) {
                String error = "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω: " + query.getQueryType();
                log.error("‚ùå {}", error);
                log.error("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–ï –ù–ê–ô–î–ï–ù handler –¥–ª—è {} - –¥–æ—Å—Ç—É–ø–Ω—ã–µ handlers: {}",
                        query.getQueryType(), queryHandlers.keySet());
                totalErrors++;
                return TelegramResponse.error(error);
            }

            log.info("üü¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–ê–ô–î–ï–ù handler {} –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ {}", handler.getClass().getSimpleName(),
                    query.getQueryType());

            // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
            TelegramResponse response = handler.handle(query);

            if (response.isSuccessful()) {
                log.debug("‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω: {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}",
                        query.getQueryType(), query.getUserId());
                log.info("üü¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: Handler –≤–µ—Ä–Ω—É–ª —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å UI –¥–∞–Ω–Ω—ã–º–∏!");
                totalQueriesProcessed++;
            } else {
                log.warn("‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —Å –æ—à–∏–±–∫–æ–π: {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {} - {}",
                        query.getQueryType(), query.getUserId(), response.getErrorMessage());
                totalErrors++;
            }

            return response;

        } catch (Exception e) {
            String error = "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ " + query.getQueryType() + ": " + e.getMessage();
            log.error("‚ùå {}", error, e);
            totalErrors++;
            return TelegramResponse.error(error);
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞)
     */
    public TelegramResponse processRequest(TelegramRequest request) {
        log.info("üì® –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}",
                request.getRequestType(), request.getUserId());

        try {
            if (request.isCommand()) {
                // TODO: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è TelegramRequest –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É
                log.warn("‚ö†Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è TelegramRequest –≤ –∫–æ–º–∞–Ω–¥—É –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞");
                return TelegramResponse.error("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ TelegramRequest –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
            } else {
                // TODO: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è TelegramRequest –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
                log.warn("‚ö†Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è TelegramRequest –≤ –∑–∞–ø—Ä–æ—Å –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞");
                return TelegramResponse.error("–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —á–µ—Ä–µ–∑ TelegramRequest –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è");
            }
        } catch (Exception e) {
            String error = "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: " + e.getMessage();
            log.error("‚ùå {}", error, e);
            totalErrors++;
            return TelegramResponse.error(error);
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å UI Factory –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
     */
    public TelegramUIFactory ui() {
        return uiFactory;
    }

    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç —Å UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
     */
    public TelegramResponse execute(TelegramCommand command) {
        return executeCommand(command);
    }

    /**
     * –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç —Å UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
     */
    public TelegramResponse execute(TelegramQuery query) {
        return executeQuery(query);
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è CommandHandlers
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
    private void registerCommandHandlers() {
        Map<String, TelegramCommandHandler> handlers = applicationContext.getBeansOfType(TelegramCommandHandler.class);

        log.info("üìù –ù–∞–π–¥–µ–Ω–æ CommandHandlers: {}", handlers.size());
        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ö–û–ù–§–õ–ò–ö–¢–û–í (TelegramService): –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö CommandHandlers:");
        handlers.forEach((beanName, handler) -> {
            log.info("   ‚Ä¢ Bean: '{}' -> –ö–ª–∞—Å—Å: {} (–ü–∞–∫–µ—Ç: {})",
                    beanName,
                    handler.getClass().getSimpleName(),
                    handler.getClass().getPackage().getName());
        });

        for (Map.Entry<String, TelegramCommandHandler> entry : handlers.entrySet()) {
            try {
                TelegramCommandHandler handler = entry.getValue();
                commandHandlers.put(handler.getCommandType(), handler);

                log.debug("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω CommandHandler: {} -> {}",
                        entry.getKey(), handler.getCommandType().getSimpleName());

            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ CommandHandler {}: {}",
                        entry.getKey(), e.getMessage(), e);
            }
        }
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è QueryHandlers
     */
    @SuppressWarnings({ "unchecked", "rawtypes" })
    private void registerQueryHandlers() {
        Map<String, TelegramQueryHandler> handlers = applicationContext.getBeansOfType(TelegramQueryHandler.class);

        log.info("üìä –ù–∞–π–¥–µ–Ω–æ QueryHandlers: {}", handlers.size());

        for (Map.Entry<String, TelegramQueryHandler> entry : handlers.entrySet()) {
            try {
                TelegramQueryHandler handler = entry.getValue();
                queryHandlers.put(handler.getQueryType(), handler);

                log.debug("‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω QueryHandler: {} -> {}",
                        entry.getKey(), handler.getQueryType().getSimpleName());

            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ QueryHandler {}: {}",
                        entry.getKey(), e.getMessage(), e);
            }
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
     */
    @Transactional(readOnly = true)
    public TelegramServiceStats getStats() {
        return new TelegramServiceStats(
                commandHandlers.size(),
                queryHandlers.size(),
                totalCommandsProcessed,
                totalQueriesProcessed,
                totalErrors,
                commandHandlers.keySet().stream().map(Class::getSimpleName).sorted().toList(),
                queryHandlers.keySet().stream().map(Class::getSimpleName).sorted().toList());
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
     */
    @Transactional(readOnly = true)
    public TelegramServiceHealth getHealth() {
        boolean isHealthy = commandHandlers.size() > 0 || queryHandlers.size() > 0;
        String status = isHealthy ? "HEALTHY" : "UNHEALTHY";

        return new TelegramServiceHealth(
                status,
                isHealthy,
                commandHandlers.size(),
                queryHandlers.size(),
                totalCommandsProcessed + totalQueriesProcessed,
                totalErrors);
    }

    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ TelegramService
     */
    public record TelegramServiceStats(
            int commandHandlersCount,
            int queryHandlersCount,
            long totalCommandsProcessed,
            long totalQueriesProcessed,
            long totalErrors,
            java.util.List<String> registeredCommands,
            java.util.List<String> registeredQueries) {
    }

    /**
     * –ó–¥–æ—Ä–æ–≤—å–µ TelegramService
     */
    public record TelegramServiceHealth(
            String status,
            boolean healthy,
            int commandHandlersCount,
            int queryHandlersCount,
            long totalRequestsProcessed,
            long totalErrors) {
    }
}