package shit.back.telegram.commands.handlers;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import shit.back.application.balance.service.BalanceApplicationFacade;
import shit.back.application.balance.dto.response.SimpleBalanceResponse;
import shit.back.application.balance.mapper.BalanceResponseMapper;
import shit.back.config.StarPriceConstants;
import shit.back.domain.balance.valueobjects.Money;
import shit.back.service.StarPurchaseService;
import shit.back.service.UserSessionUnifiedService;
import shit.back.telegram.commands.InitiateStarPurchaseCommand;
import shit.back.telegram.commands.TelegramCommandHandler;
import shit.back.telegram.dto.TelegramResponse;
import shit.back.telegram.ui.strategy.SimplifiedStarPurchaseStrategy;
import shit.back.telegram.ui.builder.TelegramKeyboardBuilder;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –±–µ–∑ legacy –∫–æ–¥–∞.
 * –ü—Ä–∏–º–µ–Ω—è–µ—Ç –ø—Ä–∏–Ω—Ü–∏–ø—ã SOLID, DRY, Clean Code, KISS.
 */
@Component
@Slf4j
public class InitiateStarPurchaseCommandHandler implements TelegramCommandHandler<InitiateStarPurchaseCommand> {

    @Autowired
    private BalanceApplicationFacade balanceApplicationFacade;

    @Autowired
    private SimplifiedStarPurchaseStrategy simplifiedStarPurchaseStrategy;

    @Autowired
    private StarPurchaseService starPurchaseService;

    @Autowired
    private UserSessionUnifiedService sessionService;

    @Override
    @Transactional
    public TelegramResponse handle(InitiateStarPurchaseCommand command) throws Exception {
        log.info("‚≠ê –ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥: userId={}, stars={}, amount={}, confirm={}",
                command.getUserId(), command.getStarCount(), command.getCustomAmount(), command.isConfirmPurchase());

        try {
            command.validate();

            SimpleBalanceResponse balance = getSimpleBalance(command.getUserId());
            if (balance == null) {
                return TelegramResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ");
            }

            // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –õ–æ–≥–∏—Ä—É–µ–º —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            String operationType = command.getOperationType();
            log.info(
                    "üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–ª—É—á–µ–Ω —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ '{}' –¥–ª—è –∫–æ–º–∞–Ω–¥—ã: userId={}, starCount={}, customAmount={}, confirmPurchase={}",
                    operationType, command.getUserId(), command.getStarCount(), command.getCustomAmount(),
                    command.isConfirmPurchase());

            return switch (operationType) {
                case "PURCHASE_CONFIRMATION" -> handlePurchaseConfirmation(command, balance);
                case "PURCHASE_INTERFACE" -> handlePurchaseInterface(balance);
                default -> {
                    log.error("‚ùå –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ '{}' –¥–ª—è –∫–æ–º–∞–Ω–¥—ã: {}", operationType,
                            command);
                    yield TelegramResponse.error("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏: " + operationType);
                }
            };

        } catch (IllegalArgumentException e) {
            log.warn("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    command.getUserId(), e.getMessage());
            return TelegramResponse.error("‚ùå " + e.getMessage());

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    command.getUserId(), e.getMessage(), e);
            return TelegramResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∫—É–ø–∫—É –∑–≤–µ–∑–¥: " + e.getMessage());
        }
    }

    @Override
    public Class<InitiateStarPurchaseCommand> getCommandType() {
        return InitiateStarPurchaseCommand.class;
    }

    @Override
    public int getHandlerPriority() {
        return 5;
    }

    @Override
    public String getDescription() {
        return "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π";
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
     */
    private TelegramResponse handlePurchaseConfirmation(InitiateStarPurchaseCommand command,
            SimpleBalanceResponse balance) throws Exception {
        log.info("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥: userId={}, stars={}",
                command.getUserId(), command.getEffectiveStarCount());

        Money requiredAmount = getRequiredAmount(command);
        Integer starCount = command.getEffectiveStarCount();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
        if (!balance.hasSufficientFunds(requiredAmount)) {
            return createInsufficientFundsResponse(command, balance, requiredAmount, starCount);
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É —á–µ—Ä–µ–∑ StarPurchaseService
        var purchaseResult = starPurchaseService.purchaseStars(command.getUserId(), starCount, requiredAmount);

        if (purchaseResult.isSuccess()) {
            log.info("‚úÖ –ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ —É—Å–ø–µ—à–Ω–∞: userId={}, stars={}, transactionId={}",
                    command.getUserId(), starCount, purchaseResult.getTransactionId());

            return createSuccessResponse(starCount, requiredAmount, balance, purchaseResult);
        } else {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: {}", purchaseResult.getErrorMessage());
            return TelegramResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—É: " + purchaseResult.getErrorMessage());
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–∫—É–ø–∫–∏
     */
    private TelegramResponse handlePurchaseInterface(SimpleBalanceResponse balance) {
        try {
            updateSessionState(balance.getUserId(), "STAR_PURCHASE_INTERFACE");

            var uiResponse = simplifiedStarPurchaseStrategy.createStarPurchaseFlow(balance);

            return TelegramResponse.builder()
                    .successful(true)
                    .message(uiResponse.getMessageText())
                    .uiType("PURCHASE_INTERFACE")
                    .uiData(balance)
                    .data(uiResponse.getKeyboard())
                    .build();

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–∫—É–ø–∫–∏: {}", e.getMessage(), e);
            return TelegramResponse.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–∫—É–ø–∫–∏: " + e.getMessage());
        }
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–µ–±—É–µ–º–æ–π —Å—É–º–º—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏
     */
    private Money getRequiredAmount(InitiateStarPurchaseCommand command) {
        if (command.getCustomAmount() != null) {
            return command.getCustomAmount();
        }

        Integer starCount = command.getEffectiveStarCount();
        if (StarPriceConstants.isSupportedStarCount(starCount)) {
            return StarPriceConstants.getPriceForStars(starCount);
        }

        throw new IllegalArgumentException("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: " + starCount);
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private SimpleBalanceResponse getSimpleBalance(Long userId) {
        try {
            var balanceResult = balanceApplicationFacade.getBalance(userId);

            if (balanceResult != null && balanceResult.isSuccess()) {
                log.debug("üí∞ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", userId);

                if (balanceResult.getValue() instanceof shit.back.application.balance.dto.response.BalanceResponse) {
                    var balanceResponse = (shit.back.application.balance.dto.response.BalanceResponse) balanceResult
                            .getValue();
                    return BalanceResponseMapper.toSimpleBalanceResponse(balanceResponse);
                }
            }

            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", userId);
            return BalanceResponseMapper.createEmptyBalance(userId);

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage(), e);
            return BalanceResponseMapper.createEmptyBalance(userId);
        }
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤
     */
    private TelegramResponse createInsufficientFundsResponse(InitiateStarPurchaseCommand command,
            SimpleBalanceResponse balance, Money required, Integer starCount) {
        log.warn("üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥: userId={}, required={}, available={}",
                command.getUserId(), required, balance.getCurrentBalance());

        String currencySymbol = balance.getCurrency().getSymbol();
        Money shortfall = required.subtract(balance.getCurrentBalance());

        String message = String.format("""
                ‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>

                ‚≠ê <b>–ó–∞–ø—Ä–æ—à–µ–Ω–æ:</b> %d –∑–≤–µ–∑–¥
                üí∞ <b>–¢—Ä–µ–±—É–µ—Ç—Å—è:</b> %s %s
                üíº <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> %s
                üí∏ <b>–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç:</b> %s %s

                üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å!
                """, starCount, required.getFormattedAmount(), currencySymbol,
                balance.getFormattedBalance(), shortfall.getFormattedAmount(), currencySymbol);

        var keyboard = new TelegramKeyboardBuilder()
                .addButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å " + shortfall.getFormattedAmount(),
                        "topup_amount_" + shortfall.getFormattedAmount())
                .newRow()
                .addButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "topup_balance")
                .addButton("üîô –ù–∞–∑–∞–¥", "show_balance")
                .build();

        return TelegramResponse.builder()
                .successful(true)
                .message(message)
                .uiType("INSUFFICIENT_FUNDS")
                .data(keyboard)
                .build();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–∫—É–ø–∫–µ
     */
    private TelegramResponse createSuccessResponse(Integer starCount, Money amount,
            SimpleBalanceResponse balance, Object purchaseResult) {
        String currencySymbol = balance.getCurrency().getSymbol();

        String successMessage = String.format("""
                üåü <b>–ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>

                ‚≠ê –ö—É–ø–ª–µ–Ω–æ –∑–≤–µ–∑–¥: <b>%d</b>
                üí∞ –°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞: <b>%s %s</b>

                ‚úÖ –ó–≤–µ–∑–¥—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç Telegram!
                """, starCount, amount.getFormattedAmount(), currencySymbol);

        var keyboard = new TelegramKeyboardBuilder()
                .addButton("üí∞ –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å", "show_balance")
                .addButton("üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫", "purchase_history")
                .newRow()
                .addButton("üåü –ö—É–ø–∏—Ç—å –µ—â–µ", "buy_stars")
                .build();

        return TelegramResponse.builder()
                .successful(true)
                .message(successMessage)
                .uiType("PURCHASE_SUCCESS")
                .uiData(purchaseResult)
                .data(keyboard)
                .build();
    }

    /**
     * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private void updateSessionState(Long userId, String state) {
        try {
            log.debug("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏: userId={}, state={}", userId, state);
            sessionService.getOrCreateSession(userId, "TelegramBot", "star_purchase", state);
        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage());
        }
    }
}