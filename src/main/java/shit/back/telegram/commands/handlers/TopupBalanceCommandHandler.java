package shit.back.telegram.commands.handlers;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import shit.back.application.balance.service.BalanceApplicationFacade;
import shit.back.service.UserSessionUnifiedService;
import shit.back.telegram.commands.TelegramCommandHandler;
import shit.back.telegram.commands.TopupBalanceCommand;
import shit.back.telegram.dto.TelegramResponse;
import shit.back.telegram.ui.builder.TelegramKeyboardBuilder;

import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
 * 
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏ –±–∞–ª–∞–Ω—Å–∞
 */
@Component
@Slf4j
public class TopupBalanceCommandHandler implements TelegramCommandHandler<TopupBalanceCommand> {

    static {
        System.err.println("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê TM: TopupBalanceCommandHandler –∫–ª–∞—Å—Å –∑–∞–≥—Ä—É–∂–µ–Ω");
    }

    @Autowired
    private BalanceApplicationFacade balanceApplicationFacade;

    @Autowired
    private UserSessionUnifiedService sessionService;

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π
    // –∫ –ë–î
    private final ConcurrentMap<Long, CachedUserState> stateCache = new ConcurrentHashMap<>();
    private static final long CACHE_TTL_MS = 30000; // 30 —Å–µ–∫—É–Ω–¥

    @Override
    @Transactional
    public TelegramResponse handle(TopupBalanceCommand command) throws Exception {
        log.info("üí≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: userId={}, amount={}, method={}",
                command.getUserId(), command.getAmount(), command.getPaymentMethod());

        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
            command.validate();

            if (!command.hasAmount()) {
                // –ö–æ–º–∞–Ω–¥–∞ "–Ω–∞—á–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
                return handleTopupStart(command);
            } else {
                // –ö–æ–º–∞–Ω–¥–∞ —Å —Å—É–º–º–æ–π - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ
                return handleTopupWithAmount(command);
            }

        } catch (IllegalArgumentException e) {
            log.warn("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    command.getUserId(), e.getMessage());
            return TelegramResponse.error("‚ùå " + e.getMessage());

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    command.getUserId(), e.getMessage(), e);
            return TelegramResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: " + e.getMessage());
        }
    }

    @Override
    public Class<TopupBalanceCommand> getCommandType() {
        return TopupBalanceCommand.class;
    }

    @Override
    public int getHandlerPriority() {
        return 30; // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–∞–Ω—Å–æ–º
    }

    @Override
    public String getDescription() {
        return "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–ª–∞—Ç–µ–∂–∞";
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–Ω–∞—á–∞—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"
     */
    private TelegramResponse handleTopupStart(TopupBalanceCommand command) {
        try {
            log.info("üîç –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}, —Å–ø–æ—Å–æ–±: {}",
                    command.getUserId(), command.getPaymentMethod());

            if (command.getPaymentMethod() == null || "DEFAULT".equals(command.getPaymentMethod())) {
                // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ #2: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –°–ù–ê–ß–ê–õ–ê
                return showPaymentMethods(command.getUserId());
            } else {
                // –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —É–∂–µ –≤—ã–±—Ä–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—É–º–º—ã
                return showAmountSelection(command);
            }

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–∞—á–∞–ª–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    command.getUserId(), e.getMessage());
            return TelegramResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è");
        }
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ #1 –∏ #2: –ü–æ–∫–∞–∑ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã —Å user-friendly —Ç–µ–∫—Å—Ç–∞–º–∏
     */
    private TelegramResponse showPaymentMethods(Long userId) {
        log.info("üí≥ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", userId);

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        sessionService.updateSessionState(userId,
                shit.back.model.UserSession.SessionState.SELECTING_PAYMENT_TYPE);

        String message = """
                üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>

                üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:
                """;

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å user-friendly —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã
        var keyboard = new TelegramKeyboardBuilder()
                .addButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", "payment_crypto")
                .newRow()
                .addButton("üí≥ YooMoney", "payment_yoomoney")
                .newRow()
                .addButton("üí≥ UZS –∫–∞—Ä—Ç–∞", "payment_uzs")
                .newRow()
                .addButton(" –ù–∞–∑–∞–¥", "show_balance")
                .build();

        return TelegramResponse.builder()
                .successful(true)
                .message(message)
                .uiType("PAYMENT_METHOD_SELECTION")
                .data(keyboard)
                .build();
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ #1: –ü–æ–∫–∞–∑ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
     */
    private TelegramResponse showAmountSelection(TopupBalanceCommand command) {
        log.info("üí∞ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—É–º–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}, —Å–ø–æ—Å–æ–±: {}",
                command.getUserId(), command.getPaymentMethod());

        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ #2: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –≤ —Å–µ—Å—Å–∏–∏
        savePaymentMethodToSession(command.getUserId(), command.getPaymentMethod());

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        sessionService.updateSessionState(command.getUserId(),
                shit.back.model.UserSession.SessionState.TOPPING_UP_BALANCE);

        String message = String.format("""
                üí∞ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>

                üí≥ <b>–°–ø–æ—Å–æ–±:</b> %s

                üí∏ <b>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é —Å—É–º–º—É:</b>
                """, getPaymentMethodDisplayName(command.getPaymentMethod()));

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏
        var keyboard = new TelegramKeyboardBuilder()
                .addButton("üíµ 10", "topup_amount_10")
                .addButton("üíµ 25", "topup_amount_25")
                .addButton("üíµ 50", "topup_amount_50")
                .newRow()
                .addButton("üíµ 100", "topup_amount_100")
                .addButton("üíµ 250", "topup_amount_250")
                .addButton("üíµ 500", "topup_amount_500")
                .newRow()
                .addButton("‚úèÔ∏è –°–≤–æ—é —Å—É–º–º—É", "custom_amount")
                .addButton("üîô –ù–∞–∑–∞–¥", "topup_balance")
                .build();

        return TelegramResponse.builder()
                .successful(true)
                .message(message)
                .uiType("TOPUP_AMOUNT_INPUT")
                .uiData(command.getPaymentMethod())
                .data(keyboard)
                .build();
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ #2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–ø–æ—Å–æ–±–∞
     * –æ–ø–ª–∞—Ç—ã
     */
    private TelegramResponse handleTopupWithAmount(TopupBalanceCommand command) throws Exception {
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ #2: –ï—Å–ª–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –∏–∑ —Å–µ—Å—Å–∏–∏
        String paymentMethod = command.getPaymentMethod();
        if (paymentMethod == null || "DEFAULT".equals(paymentMethod)) {
            paymentMethod = getPaymentMethodFromSession(command.getUserId());
        }

        // –ï—Å–ª–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
        if (paymentMethod == null) {
            log.warn("‚ö†Ô∏è –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ –≤—ã–±–æ—Ä—É", command.getUserId());
            return showPaymentMethods(command.getUserId());
        }

        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–ª–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –≤
        // TelegramHandlerFacade)
        return showTopupConfirmation(command, paymentMethod);
    }

    /**
     * –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
     */
    private TelegramResponse showTopupConfirmation(TopupBalanceCommand command, String paymentMethod) {
        String message = String.format("""
                ‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è</b>

                üí∞ <b>–°—É–º–º–∞:</b> %s USD
                üí≥ <b>–°–ø–æ—Å–æ–±:</b> %s

                üí° –ù–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                """,
                command.getAmount(),
                getPaymentMethodDisplayName(paymentMethod));

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        sessionService.updateSessionState(command.getUserId(),
                shit.back.model.UserSession.SessionState.TOPPING_UP_BALANCE);

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        var keyboard = new TelegramKeyboardBuilder()
                .addButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "confirm_topup_" + command.getAmount())
                .addButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—É–º–º—É", "topup_balance")
                .newRow()
                .addButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_topup")
                .addButton("üîô –ù–∞–∑–∞–¥", "show_balance")
                .build();

        return TelegramResponse.builder()
                .successful(true)
                .message(message)
                .uiType("TOPUP_CONFIRMATION")
                .uiData(command)
                .data(keyboard)
                .build();
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –∏–∑ —Å–µ—Å—Å–∏–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
     */
    private String getPaymentMethodFromSession(Long userId) {
        try {
            log.debug("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            Optional<CachedUserState> cachedOpt = getCachedState(userId);
            if (cachedOpt.isPresent()) {
                String paymentMethod = cachedOpt.get().paymentMethod;
                if (paymentMethod != null && !paymentMethod.trim().isEmpty() && !"DEFAULT".equals(paymentMethod)) {
                    log.debug("üéØ –ù–∞–π–¥–µ–Ω –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", paymentMethod, userId);
                    return paymentMethod;
                }
            }

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –Ω–µ –≤ –∫—ç—à–µ, –ø–æ–ª—É—á–∞–µ–º –∏–∑ —Å–µ—Å—Å–∏–∏
            Optional<shit.back.model.UserSession> sessionOpt = sessionService.getSession(userId);
            if (sessionOpt.isPresent()) {
                shit.back.model.UserSession session = sessionOpt.get();
                String paymentType = session.getPaymentType();

                if (paymentType != null && !paymentType.trim().isEmpty() && !"DEFAULT".equals(paymentType)) {
                    String normalizedMethod = normalizePaymentMethod(paymentType);

                    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö—ç—à–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    cacheUserState(userId, normalizedMethod, session.getState());

                    log.debug("‚úÖ –ù–∞–π–¥–µ–Ω —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", normalizedMethod, userId);
                    return normalizedMethod;
                }
            }

            log.debug("‚ö†Ô∏è –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);
            return null;
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –∏–∑ —Å–µ—Å—Å–∏–∏: {}", e.getMessage(), e);
            return null;
        }
    }

    /**
     * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è callback –¥–∞–Ω–Ω—ã—Ö –∫ –ø—Ä–æ—Å—Ç–æ–º—É —Ñ–æ—Ä–º–∞—Ç—É —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
     */
    private String normalizePaymentMethod(String paymentMethod) {
        if (paymentMethod == null) {
            return null;
        }

        return switch (paymentMethod.toLowerCase()) {
            case "payment_crypto" -> "crypto";
            case "payment_yoomoney" -> "yoomoney";
            case "payment_uzs" -> "uzs";
            default -> paymentMethod;
        };
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ #4: User-friendly –Ω–∞–∑–≤–∞–Ω–∏—è —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
     */
    private String getPaymentMethodDisplayName(String paymentMethod) {
        if (paymentMethod == null) {
            return "–ù–µ –≤—ã–±—Ä–∞–Ω";
        }

        // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –õ–û–ì #1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–ø–ø–∏–Ω–≥ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ú–ê–ü–ü–ò–ù–ì: –í—Ö–æ–¥–Ω–æ–π paymentMethod='{}', –ø—Ä–∏–≤–µ–¥–µ–Ω–Ω—ã–π –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É='{}'",
                paymentMethod, paymentMethod.toLowerCase());

        String result = switch (paymentMethod.toLowerCase()) {
            case "yoomoney", "payment_yoomoney" -> "üí≥ YooMoney";
            case "crypto", "payment_crypto" -> "‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞";
            case "uzs", "payment_uzs" -> "üí≥ UZS –∫–∞—Ä—Ç–∞";
            case "uzs_payment" -> { // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π case
                log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ú–ê–ü–ü–ò–ù–ì: –ù–∞–π–¥–µ–Ω UZS_PAYMENT - —ç—Ç–æ –±—ã–ª–∞ –ü–†–û–ë–õ–ï–ú–ê #1!");
                yield "üí≥ UZS –∫–∞—Ä—Ç–∞";
            }
            case "ton" -> "‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞";
            case "yookassa" -> "üí≥ YooMoney";
            default -> {
                log.warn("üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ú–ê–ü–ü–ò–ù–ì: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã '{}' - –∏—Å–ø–æ–ª—å–∑—É–µ–º default –∑–Ω–∞—á–µ–Ω–∏–µ",
                        paymentMethod);
                yield "ÔøΩ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã";
            }
        };

        log.info("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ú–ê–ü–ü–ò–ù–ì: –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞–ø–ø–∏–Ω–≥–∞: '{}' -> '{}'", paymentMethod, result);
        return result;
    }

    /**
     * –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã –≤ —Å–µ—Å—Å–∏–∏ —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º
     * —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ PostgreSQL
     */
    private void savePaymentMethodToSession(Long userId, String paymentMethod) {
        try {
            log.info("üíæ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã '{}' –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", paymentMethod, userId);

            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ROOT CAUSE: –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            shit.back.model.UserSession session = sessionService.getOrCreateSession(userId, null, null, null);

            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–ï–†–ï–î –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º
            log.info("üíæ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–ï–†–ï–î –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º - PaymentType: '{}', State: {}",
                    session.getPaymentType(), session.getState());

            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
            String normalizedMethod = normalizePaymentMethod(paymentMethod);
            String finalPaymentMethod = normalizedMethod != null ? normalizedMethod : paymentMethod;

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ setPaymentType –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            // —Å–æ—Å—Ç–æ—è–Ω–∏—è
            session.setPaymentType(finalPaymentMethod);

            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ü–û–°–õ–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è
            log.info("üíæ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü–û–°–õ–ï –∏–∑–º–µ–Ω–µ–Ω–∏—è - PaymentType: '{}', State: {}",
                    session.getPaymentType(), session.getState());

            // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ PostgreSQL!
            sessionService.createOrUpdateSessionEntity(session);
            log.info("‚úÖ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ò–∑–º–µ–Ω–µ–Ω–∏—è PaymentType —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ PostgreSQL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", userId);

            log.debug("üíæ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {} ‚Üí {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}",
                    paymentMethod, finalPaymentMethod, userId);

        } catch (Exception e) {
            log.error("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    userId, e.getMessage(), e);
            throw new RuntimeException("Failed to save payment method to session", e);
        }
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–ª–∞—Å—Å –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    private static class CachedUserState {
        final String paymentMethod;
        final shit.back.model.UserSession.SessionState state;
        final long timestamp;

        CachedUserState(String paymentMethod, shit.back.model.UserSession.SessionState state) {
            this.paymentMethod = paymentMethod;
            this.state = state;
            this.timestamp = System.currentTimeMillis();
        }

        boolean isExpired(long ttlMs) {
            return (System.currentTimeMillis() - timestamp) > ttlMs;
        }
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private Optional<CachedUserState> getCachedState(Long userId) {
        CachedUserState cached = stateCache.get(userId);
        if (cached != null && !cached.isExpired(CACHE_TTL_MS)) {
            log.debug("üéØ –ü–æ–ª—É—á–µ–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, cached.paymentMethod);
            return Optional.of(cached);
        }

        if (cached != null) {
            stateCache.remove(userId); // –£–¥–∞–ª—è–µ–º —É—Å—Ç–∞—Ä–µ–≤—à—É—é –∑–∞–ø–∏—Å—å
        }
        return Optional.empty();
    }

    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private void cacheUserState(Long userId, String paymentMethod, shit.back.model.UserSession.SessionState state) {
        stateCache.put(userId, new CachedUserState(paymentMethod, state));
        log.debug("üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, paymentMethod);
    }
}