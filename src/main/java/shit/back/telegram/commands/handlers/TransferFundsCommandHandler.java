package shit.back.telegram.commands.handlers;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import shit.back.application.balance.dto.response.DualBalanceResponse;
import shit.back.application.balance.mapper.BalanceResponseMapper;
import shit.back.application.balance.service.BalanceApplicationServiceV2;
import shit.back.domain.balance.valueobjects.Money;
import shit.back.domain.dualBalance.DualBalanceAggregate;
import shit.back.domain.dualBalance.exceptions.BalanceTransferException;
import shit.back.domain.dualBalance.valueobjects.BalanceType;
import shit.back.service.UserSessionUnifiedService;
import shit.back.telegram.commands.TelegramCommandHandler;
import shit.back.telegram.commands.TransferFundsCommand;
import shit.back.telegram.dto.TelegramResponse;
import shit.back.telegram.ui.builder.TelegramKeyboardBuilder;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import java.math.BigDecimal;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –º–µ–∂–¥—É –±–∞–ª–∞–Ω—Å–∞–º–∏
 * 
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å
 * –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —á–µ—Ä–µ–∑ Fragment API
 */
@Component
@Slf4j
public class TransferFundsCommandHandler implements TelegramCommandHandler<TransferFundsCommand> {

    @Autowired
    private BalanceApplicationServiceV2 balanceApplicationService;

    @Autowired
    private UserSessionUnifiedService sessionService;

    @PersistenceContext
    private EntityManager entityManager;

    @Override
    @Transactional
    public TelegramResponse handle(TransferFundsCommand command) throws Exception {
        log.info("üí∏ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤: userId={}, amount={}, sourceType={}",
                command.getUserId(), command.getAmount(), command.getSourceBalanceType());

        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã
            command.validate();

            if (!command.hasAmount()) {
                // –ö–æ–º–∞–Ω–¥–∞ "–Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥" - –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
                return handleTransferStart(command);
            } else {
                // –ö–æ–º–∞–Ω–¥–∞ —Å —Å—É–º–º–æ–π - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥
                return handleTransferWithAmount(command);
            }

        } catch (IllegalArgumentException e) {
            log.warn("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    command.getUserId(), e.getMessage());
            return TelegramResponse.error("‚ùå " + e.getMessage());

        } catch (BalanceTransferException e) {
            log.warn("‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    command.getUserId(), e.getMessage());
            return TelegramResponse.error("‚ùå " + e.getMessage());

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    command.getUserId(), e.getMessage(), e);
            return TelegramResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤: " + e.getMessage());
        }
    }

    @Override
    public Class<TransferFundsCommand> getCommandType() {
        return TransferFundsCommand.class;
    }

    @Override
    public int getHandlerPriority() {
        return 25; // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å –±–∞–ª–∞–Ω—Å–æ–º
    }

    @Override
    public String getDescription() {
        return "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ –º–µ–∂–¥—É –±–∞–Ω–∫–æ–≤—Å–∫–∏–º –∏ –æ—Å–Ω–æ–≤–Ω—ã–º –±–∞–ª–∞–Ω—Å–∞–º–∏";
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–Ω–∞—á–∞—Ç—å –ø–µ—Ä–µ–≤–æ–¥"
     */
    private TelegramResponse handleTransferStart(TransferFundsCommand command) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            DualBalanceAggregate dualBalance = findOrCreateDualBalance(command.getUserId());

            if (!dualBalance.hasSufficientBankFunds(Money.of(new BigDecimal("0.01")))) {
                return TelegramResponse.error("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º –±–∞–ª–∞–Ω—Å–µ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞");
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            sessionService.updateSessionState(command.getUserId(),
                    shit.back.model.UserSession.SessionState.ENTERING_CUSTOM_AMOUNT);

            String message = String.format("""
                    üí∏ <b>–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>

                    <b>–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:</b>
                    üí≥ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –±–∞–ª–∞–Ω—Å: <b>%s</b>
                    üè¶ –û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å: <b>%s</b>

                    üí° –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: 100 –∏–ª–∏ 50.25)

                    ‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 0.01
                    üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: %s
                    """,
                    dualBalance.getBankBalance().getFormattedAmount(),
                    dualBalance.getMainBalance().getFormattedAmount(),
                    dualBalance.getBankBalance().getFormattedAmount());

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å—É–º–º–∞–º–∏
            var keyboardBuilder = new TelegramKeyboardBuilder();

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Å—É–º–º–∞–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
            Money bankBalance = dualBalance.getBankBalance();

            if (bankBalance.isGreaterThanOrEqual(Money.of(BigDecimal.TEN))) {
                keyboardBuilder.addButton("üí∏ 10", "transfer_amount_10");
            }
            if (bankBalance.isGreaterThanOrEqual(Money.of(new BigDecimal("25")))) {
                keyboardBuilder.addButton("üí∏ 25", "transfer_amount_25");
            }
            if (bankBalance.isGreaterThanOrEqual(Money.of(new BigDecimal("50")))) {
                keyboardBuilder.addButton("üí∏ 50", "transfer_amount_50");
            }

            keyboardBuilder.newRow();

            if (bankBalance.isGreaterThanOrEqual(Money.of(new BigDecimal("100")))) {
                keyboardBuilder.addButton("üí∏ 100", "transfer_amount_100");
            }
            if (bankBalance.isGreaterThanOrEqual(Money.of(new BigDecimal("250")))) {
                keyboardBuilder.addButton("üí∏ 250", "transfer_amount_250");
            }
            if (bankBalance.isGreaterThanOrEqual(Money.of(new BigDecimal("500")))) {
                keyboardBuilder.addButton("üí∏ 500", "transfer_amount_500");
            }

            keyboardBuilder.newRow()
                    .addButton("üí∏ –í–µ—Å—å –±–∞–ª–∞–Ω—Å", "transfer_amount_all")
                    .addButton("‚úèÔ∏è –°–≤–æ—é —Å—É–º–º—É", "custom_transfer_amount")
                    .newRow()
                    .addButton("üîô –ù–∞–∑–∞–¥", "show_balance");

            var keyboard = keyboardBuilder.build();

            return TelegramResponse.builder()
                    .successful(true)
                    .message(message)
                    .uiType("TRANSFER_AMOUNT_INPUT")
                    .uiData(command.getSourceBalanceType())
                    .data(keyboard)
                    .build();

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    command.getUserId(), e.getMessage());
            return TelegramResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤");
        }
    }

    /**
     * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–≤–æ–¥–∞ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º–æ–π
     */
    private TelegramResponse handleTransferWithAmount(TransferFundsCommand command) throws Exception {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        DualBalanceAggregate dualBalance = findOrCreateDualBalance(command.getUserId());
        Money transferAmount = Money.of(command.getAmount());

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
        if (!dualBalance.hasSufficientBankFunds(transferAmount)) {
            throw new BalanceTransferException("INSUFFICIENT_FUNDS",
                    String.format("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–º –±–∞–ª–∞–Ω—Å–µ. –î–æ—Å—Ç—É–ø–Ω–æ: %s, —Ç—Ä–µ–±—É–µ—Ç—Å—è: %s",
                            dualBalance.getBankBalance().getFormattedAmount(),
                            transferAmount.getFormattedAmount()));
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        String description = String.format("–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ —á–µ—Ä–µ–∑ Telegram Bot (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d)",
                command.getUserId());
        dualBalance.transferBankToMain(transferAmount, description);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        entityManager.merge(dualBalance);

        // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        sessionService.updateSessionState(command.getUserId(),
                shit.back.model.UserSession.SessionState.IDLE);

        String message = String.format("""
                ‚úÖ <b>–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>

                üí∏ <b>–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ:</b> %s
                üí≥ <b>–ë–∞–Ω–∫–æ–≤—Å–∫–∏–π –±–∞–ª–∞–Ω—Å:</b> %s
                üè¶ <b>–û—Å–Ω–æ–≤–Ω–æ–π –±–∞–ª–∞–Ω—Å:</b> %s
                üí∞ <b>–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:</b> %s

                üéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å –∑–≤–µ–∑–¥—ã —Å –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞!
                """,
                transferAmount.getFormattedAmount(),
                dualBalance.getBankBalance().getFormattedAmount(),
                dualBalance.getMainBalance().getFormattedAmount(),
                dualBalance.getTotalBalance().getFormattedAmount());

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞
        var keyboard = new TelegramKeyboardBuilder()
                .addButton("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", "buy_stars")
                .addButton("üí∏ –ï—â–µ –ø–µ—Ä–µ–≤–æ–¥", "transfer_funds")
                .newRow()
                .addButton("üí∞ –ë–∞–ª–∞–Ω—Å", "show_balance")
                .addButton("üìã –ò—Å—Ç–æ—Ä–∏—è", "show_history")
                .build();

        log.info("‚úÖ –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {} -> {}",
                command.getUserId(), transferAmount.getFormattedAmount(), description);

        return TelegramResponse.builder()
                .successful(true)
                .message(message)
                .uiType("TRANSFER_SUCCESS")
                .uiData(BalanceResponseMapper.fromDualBalance(dualBalance))
                .data(keyboard)
                .build();
    }

    /**
     * –ü–æ–∏—Å–∫ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ DualBalanceAggregate –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    private DualBalanceAggregate findOrCreateDualBalance(Long userId) {
        try {
            // –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π DualBalance
            DualBalanceAggregate existing = entityManager
                    .createQuery("SELECT db FROM DualBalanceAggregate db WHERE db.userId = :userId",
                            DualBalanceAggregate.class)
                    .setParameter("userId", userId)
                    .getResultStream()
                    .findFirst()
                    .orElse(null);

            if (existing != null) {
                return existing;
            }

            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π DualBalance –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
            log.info("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ DualBalance –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", userId);
            DualBalanceAggregate newDualBalance = new DualBalanceAggregate(userId, null);
            entityManager.persist(newDualBalance);
            entityManager.flush(); // –ü–æ–ª—É—á–∞–µ–º ID

            return newDualBalance;

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å DualBalance –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", userId, e.getMessage(), e);
            throw new BalanceTransferException("DUAL_BALANCE_ERROR",
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è");
        }
    }
}