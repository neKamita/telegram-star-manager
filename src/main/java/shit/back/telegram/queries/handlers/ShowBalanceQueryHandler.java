package shit.back.telegram.queries.handlers;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import shit.back.application.balance.dto.response.SimpleBalanceResponse;
import shit.back.application.balance.service.BalanceApplicationFacade;
import shit.back.application.balance.mapper.BalanceResponseMapper;
import shit.back.telegram.dto.TelegramResponse;
import shit.back.telegram.queries.ShowBalanceQuery;
import shit.back.telegram.queries.TelegramQueryHandler;
import shit.back.telegram.ui.strategy.BalanceDisplayStrategy;
import shit.back.telegram.ui.strategy.SimplifiedBalanceDisplayStrategy;
import shit.back.telegram.ui.builder.TelegramKeyboardBuilder;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞
 * 
 * –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω –∏–∑ application.telegram.handlers
 */
@Component
@Slf4j
public class ShowBalanceQueryHandler implements TelegramQueryHandler<ShowBalanceQuery> {

    @Autowired
    private BalanceApplicationFacade balanceApplicationFacade;

    @Autowired
    private BalanceDisplayStrategy balanceDisplayStrategy;

    @Autowired
    private SimplifiedBalanceDisplayStrategy simplifiedBalanceDisplayStrategy;

    @Override
    @Transactional(readOnly = true)
    public TelegramResponse handle(ShowBalanceQuery query) throws Exception {
        log.info("üí∞ –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞: userId={}, includeHistory={}, includeStatistics={}",
                query.getUserId(), query.isIncludeHistory(), query.isIncludeStatistics());

        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
            query.validate();

            // –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ
            var balanceResult = balanceApplicationFacade.getBalance(query.getUserId());

            if (!balanceResult.isSuccess()) {
                String errorCode = balanceResult.getError() != null
                        ? balanceResult.getError().getClass().getSimpleName()
                        : "UNKNOWN_ERROR";
                String errorMessage = balanceResult.getError() != null ? balanceResult.getError().getMessage()
                        : "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞";

                log.error("Balance retrieval failed for user {}", query.getUserId());

                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É
                String userFriendlyMessage = determineUserFriendlyErrorMessage(errorCode, errorMessage);
                return TelegramResponse.error(userFriendlyMessage);
            }

            // –§–ê–ó–ê 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
            boolean useSimplified = shouldUseSimplifiedDisplay(query);

            if (useSimplified) {
                log.info("üåü –§–ê–ó–ê2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", query.getUserId());
                return handleSimplifiedBalance(balanceResult, query);
            } else {
                log.info("üîÑ –§–ê–ó–ê2: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä–æ–π DualBalance –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}",
                        query.getUserId());
                return handleLegacyBalance(balanceResult, query);
            }

        } catch (Exception e) {
            log.error("Balance retrieval failed for user {}", query.getUserId());
            return TelegramResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ");
        }
    }

    @Override
    public Class<ShowBalanceQuery> getQueryType() {
        return ShowBalanceQuery.class;
    }

    @Override
    public int getHandlerPriority() {
        return 20; // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ
    }

    @Override
    public boolean supportsCaching() {
        return true; // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–∞–ª–∞–Ω—Å–∞
    }

    @Override
    public String getDescription() {
        return "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –±–∞–ª–∞–Ω—Å–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏";
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞
     */
    private String determineContentType(ShowBalanceQuery query) {
        if (query.isIncludeHistory() && query.isIncludeStatistics()) {
            return "BALANCE_DETAILS";
        } else if (query.isIncludeHistory() || query.isIncludeStatistics()) {
            return "DUAL_BALANCE_INFO";
        } else {
            return "BALANCE_SUMMARY";
        }
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç BalanceResponseMapper –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–∏–ø–æ–≤
     */
    private SimpleBalanceResponse extractBalanceData(Object balanceResult, Long userId) {
        try {
            // –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –õ–û–ì: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            log.debug("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–∞–ª–∞–Ω—Å–∞: {}",
                    balanceResult != null ? balanceResult.getClass().getSimpleName() : "null");

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —è–≤–ª—è–µ—Ç—Å—è Result<BalanceResponse>
            if (balanceResult instanceof shit.back.application.balance.common.Result) {
                var result = (shit.back.application.balance.common.Result<?>) balanceResult;

                if (result.isSuccess()
                        && result.getValue() instanceof shit.back.application.balance.dto.response.BalanceResponse) {
                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º BalanceResponse –≤ SimpleBalanceResponse —á–µ—Ä–µ–∑ –º–∞–ø–ø–µ—Ä
                    var balanceResponse = (shit.back.application.balance.dto.response.BalanceResponse) result
                            .getValue();

                    // –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –õ–û–ì: –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ BalanceResponse
                    log.debug("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: userId={}, BalanceResponse.currentBalance={}, currency={}",
                            userId,
                            balanceResponse.getCurrentBalance(),
                            balanceResponse.getCurrency());

                    SimpleBalanceResponse dualResponse = BalanceResponseMapper.toSimpleBalanceResponse(balanceResponse);

                    // –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô –õ–û–ì: –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞–ø–ø–∏–Ω–≥–∞
                    log.debug("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: userId={}, SimpleBalance –ø–æ—Å–ª–µ –º–∞–ø–ø–∏–Ω–≥–∞ - currentBalance={}",
                            userId,
                            dualResponse.getFormattedBalance());

                    return dualResponse;
                }
            }

            // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å SimpleBalanceResponse –Ω–∞–ø—Ä—è–º—É—é (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            if (balanceResult instanceof SimpleBalanceResponse) {
                return (SimpleBalanceResponse) balanceResult;
            }

            log.warn("‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–∞–ª–∞–Ω—Å–∞: {}, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}",
                    balanceResult != null ? balanceResult.getClass().getSimpleName() : "null", userId);

            // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            return BalanceResponseMapper.createEmptyBalance(userId);

        } catch (Exception e) {
            log.error("Balance data extraction failed for user {}", userId);
            // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –±–∞–ª–∞–Ω—Å
            return BalanceResponseMapper.createEmptyBalance(userId);
        }
    }

    /**
     * –§–ê–ó–ê 2: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É
     */
    private boolean shouldUseSimplifiedDisplay(ShowBalanceQuery query) {
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        return !query.isIncludeHistory() && !query.isIncludeStatistics();
    }

    /**
     * –§–ê–ó–ê 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
     */
    private TelegramResponse handleSimplifiedBalance(Object balanceResult, ShowBalanceQuery query) {
        try {
            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ SimpleBalanceResponse
            SimpleBalanceResponse simpleBalance = convertToSimpleBalance(balanceResult, query.getUserId());
            if (simpleBalance == null) {
                return TelegramResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ");
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            var uiResponse = simplifiedBalanceDisplayStrategy.createBalanceDisplay(simpleBalance);

            // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º TelegramUIResponse –≤ TelegramResponse
            return TelegramResponse.builder()
                    .successful(true)
                    .message(uiResponse.getMessageText())
                    .uiType("SIMPLE_BALANCE")
                    .uiData(simpleBalance)
                    .data(uiResponse.getKeyboard())
                    .build();

        } catch (Exception e) {
            log.error("Simplified balance processing failed for user {}", query.getUserId());
            return TelegramResponse.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞");
        }
    }

    /**
     * –§–ê–ó–ê 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Å–æ —Å—Ç–∞—Ä–æ–π DualBalance –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
     */
    private TelegramResponse handleLegacyBalance(Object balanceResult, ShowBalanceQuery query) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º SimpleBalanceResponse –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            SimpleBalanceResponse balanceData = extractBalanceData(balanceResult, query.getUserId());
            if (balanceData == null) {
                String error = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–∞–ª–∞–Ω—Å–∞";
                log.error("‚ùå {} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}", error, query.getUserId());
                return TelegramResponse.error(error);
            }

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            String contentType = determineContentType(query);
            String formattedMessage = balanceDisplayStrategy.formatContent(contentType, balanceData);

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π
            var keyboard = new TelegramKeyboardBuilder()
                    .addButton("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", "buy_stars")
                    .newRow()
                    .addButton("üìã –ò—Å—Ç–æ—Ä–∏—è", "show_history")
                    .addButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "topup_balance")
                    .newRow()
                    .addButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "refresh_balance")
                    .build();

            log.info("‚úÖ LEGACY: –ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", query.getUserId());

            return TelegramResponse.builder()
                    .successful(true)
                    .message(formattedMessage)
                    .uiType(contentType)
                    .uiData(balanceData)
                    .data(keyboard)
                    .build();

        } catch (Exception e) {
            log.error("Legacy balance processing failed for user {}", query.getUserId());
            return TelegramResponse.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞");
        }
    }

    /**
     * –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö
     * –¥–µ—Ç–∞–ª–µ–π
     */
    private String determineUserFriendlyErrorMessage(String errorCode, String errorMessage) {
        switch (errorCode) {
            case "InvalidTransactionException":
                if (errorMessage.contains("BALANCE_NOT_FOUND")) {
                    return "üö´ –ë–∞–ª–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å...";
                } else if (errorMessage.contains("BALANCE_RETRIEVAL_ERROR")) {
                    return "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
                }
                break;
            case "BalanceDomainException":
                return "üîß –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–∞–Ω—Å–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É";
            case "InsufficientFundsException":
                return "üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ";
            default:
                break;
        }

        // –û–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –æ—à–∏–±–æ–∫
        return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ";
    }

    /**
     * –§–ê–ó–ê 2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ SimpleBalanceResponse –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–∞–ª–∞–Ω—Å–∞
     */
    private SimpleBalanceResponse convertToSimpleBalance(Object balanceResult, Long userId) {
        try {
            if (balanceResult instanceof shit.back.application.balance.common.Result) {
                var result = (shit.back.application.balance.common.Result<?>) balanceResult;

                if (result.isSuccess()
                        && result.getValue() instanceof shit.back.application.balance.dto.response.BalanceResponse) {
                    var balanceResponse = (shit.back.application.balance.dto.response.BalanceResponse) result
                            .getValue();

                    log.debug("üåü –§–ê–ó–ê2: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è BalanceResponse –≤ SimpleBalance –¥–ª—è userId={}", userId);
                    return BalanceResponseMapper.toSimpleBalanceResponse(balanceResponse);
                }
            }

            log.warn("‚ö†Ô∏è –§–ê–ó–ê2: –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ SimpleBalance, —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –¥–ª—è userId={}", userId);
            return BalanceResponseMapper.createEmptyBalance(userId);

        } catch (Exception e) {
            log.error("SimpleBalance conversion failed for user {}", userId);
            return BalanceResponseMapper.createEmptyBalance(userId);
        }
    }

}