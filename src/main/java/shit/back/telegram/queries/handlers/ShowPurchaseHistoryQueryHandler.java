package shit.back.telegram.queries.handlers;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import shit.back.application.balance.dto.response.StarPurchaseResponse;
import shit.back.telegram.dto.TelegramResponse;
import shit.back.telegram.queries.ShowPurchaseHistoryQuery;
import shit.back.telegram.queries.TelegramQueryHandler;
import shit.back.telegram.ui.strategy.PurchaseHistoryStrategy;
import shit.back.telegram.ui.builder.TelegramKeyboardBuilder;

import java.util.Collections;
import java.util.List;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
 * 
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å PurchaseHistoryStrategy –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
 */
@Component
@Slf4j
public class ShowPurchaseHistoryQueryHandler implements TelegramQueryHandler<ShowPurchaseHistoryQuery> {

    @Autowired
    private PurchaseHistoryStrategy purchaseHistoryStrategy;

    // TODO: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫
    // @Autowired
    // private StarPurchaseApplicationService starPurchaseService;

    @Override
    @Transactional(readOnly = true)
    public TelegramResponse handle(ShowPurchaseHistoryQuery query) throws Exception {
        log.info("üìã –ó–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫: userId={}, page={}, limit={}, filter={}",
                query.getUserId(), query.getPage(), query.getLimit(), query.getFilterBy());

        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
            query.validate();

            // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫
            List<StarPurchaseResponse> purchaseHistory = getPurchaseHistory(query);

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            String contentType = query.getContentType();
            String formattedMessage = purchaseHistoryStrategy.formatContent(contentType, purchaseHistory);

            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (query.getPage() > 0 || purchaseHistory.size() == query.getLimit()) {
                formattedMessage = addPaginationInfo(formattedMessage, query, purchaseHistory.size());
            }

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
            var keyboardBuilder = new TelegramKeyboardBuilder();

            // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
            if (query.getPage() > 0) {
                keyboardBuilder.addButton("‚óÄÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è", "history_page_" + (query.getPage() - 1));
            }

            if (purchaseHistory.size() == query.getLimit()) {
                keyboardBuilder.addButton("–°–ª–µ–¥—É—é—â–∞—è ‚ñ∂Ô∏è", "history_page_" + (query.getPage() + 1));
            }

            keyboardBuilder.newRow();

            // –§–∏–ª—å—Ç—Ä—ã
            if (!query.getFilterBy().equals("ALL")) {
                keyboardBuilder.addButton("üîç –í—Å–µ", "history_filter_ALL");
            }
            if (!query.getFilterBy().equals("SUCCESSFUL")) {
                keyboardBuilder.addButton("‚úÖ –£—Å–ø–µ—à–Ω—ã–µ", "history_filter_SUCCESSFUL");
            }
            if (!query.getFilterBy().equals("FAILED")) {
                keyboardBuilder.addButton("‚ùå –ù–µ—É–¥–∞—á–Ω—ã–µ", "history_filter_FAILED");
            }

            keyboardBuilder.newRow()
                    .addButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "refresh_history")
                    .addButton("üîô –ù–∞–∑–∞–¥", "show_balance");

            var keyboard = keyboardBuilder.build();

            log.info("‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {} (–Ω–∞–π–¥–µ–Ω–æ: {})",
                    query.getUserId(), purchaseHistory.size());

            return TelegramResponse.builder()
                    .successful(true)
                    .message(formattedMessage)
                    .uiType(contentType)
                    .uiData(purchaseHistory)
                    .data(keyboard)
                    .build();

        } catch (IllegalArgumentException e) {
            log.warn("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", query.getUserId(), e.getMessage());
            return TelegramResponse.error("‚ùå " + e.getMessage());

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    query.getUserId(), e.getMessage(), e);
            return TelegramResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫: " + e.getMessage());
        }
    }

    @Override
    public Class<ShowPurchaseHistoryQuery> getQueryType() {
        return ShowPurchaseHistoryQuery.class;
    }

    @Override
    public int getHandlerPriority() {
        return 30; // –ù–æ—Ä–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
    }

    @Override
    public boolean supportsCaching() {
        return true; // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
    }

    @Override
    public String getDescription() {
        return "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π PurchaseHistoryStrategy";
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
     */
    private List<StarPurchaseResponse> getPurchaseHistory(ShowPurchaseHistoryQuery query) {
        try {
            // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
            // –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            log.info("üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {} (page={}, limit={}, filter={})",
                    query.getUserId(), query.getPage(), query.getLimit(), query.getFilterBy());

            // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç:
            // return starPurchaseService.getHistory(
            // query.getUserId(),
            // query.getOffset(),
            // query.getLimit(),
            // query.getStatusFilter()
            // );

            return Collections.emptyList();

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫: {}", e.getMessage(), e);
            return Collections.emptyList();
        }
    }

    /**
     * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
     */
    private String addPaginationInfo(String baseMessage, ShowPurchaseHistoryQuery query, int resultsCount) {
        StringBuilder enhanced = new StringBuilder(baseMessage);

        enhanced.append("\n\nüìÑ <b>–ù–∞–≤–∏–≥–∞—Ü–∏—è:</b>\n");

        if (query.getPage() > 0) {
            enhanced.append(String.format("‚óÄÔ∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ %d (–ø–æ–∫–∞–∑–∞–Ω–æ: %d)\n",
                    query.getPage() + 1, resultsCount));
        } else {
            enhanced.append(String.format("üìç –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ (–ø–æ–∫–∞–∑–∞–Ω–æ: %d)\n", resultsCount));
        }

        if (resultsCount == query.getLimit()) {
            enhanced.append("‚ñ∂Ô∏è –ï—Å—Ç—å –µ—â–µ –∑–∞–ø–∏—Å–∏\n");
        }

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ö
        if (!query.getFilterBy().equals("ALL")) {
            enhanced.append(String.format("üîç –§–∏–ª—å—Ç—Ä: %s\n", formatFilterName(query.getFilterBy())));
        }

        return enhanced.toString();
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
     */
    private String formatFilterName(String filterBy) {
        return switch (filterBy) {
            case "RECENT" -> "–ù–µ–¥–∞–≤–Ω–∏–µ";
            case "SUCCESSFUL" -> "–£—Å–ø–µ—à–Ω—ã–µ";
            case "FAILED" -> "–ù–µ—É–¥–∞—á–Ω—ã–µ";
            case "BY_STATUS" -> "–ü–æ —Å—Ç–∞—Ç—É—Å—É";
            default -> filterBy;
        };
    }
}