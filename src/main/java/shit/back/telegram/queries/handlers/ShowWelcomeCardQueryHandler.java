package shit.back.telegram.queries.handlers;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;
import shit.back.application.balance.dto.response.DualBalanceResponse;
import shit.back.application.balance.service.BalanceApplicationFacade;
import shit.back.telegram.dto.TelegramResponse;
import shit.back.telegram.queries.ShowWelcomeCardQuery;
import shit.back.telegram.queries.TelegramQueryHandler;
import shit.back.telegram.ui.strategy.WelcomeCardStrategy;
import shit.back.telegram.ui.builder.TelegramKeyboardBuilder;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
 * 
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å WelcomeCardStrategy –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
 */
@Component
@Slf4j
public class ShowWelcomeCardQueryHandler implements TelegramQueryHandler<ShowWelcomeCardQuery> {

    @Autowired
    private WelcomeCardStrategy welcomeCardStrategy;

    @Autowired
    private BalanceApplicationFacade balanceApplicationFacade;

    @Override
    @Transactional(readOnly = true)
    public TelegramResponse handle(ShowWelcomeCardQuery query) throws Exception {
        log.info("üëã –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏: userId={}, type={}, user={}, includeBalance={}",
                query.getUserId(), query.getCardType(), query.getUserName(), query.isIncludeBalance());

        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
            query.validate();

            // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
            Object strategyData = prepareStrategyData(query);

            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
            String formattedMessage = welcomeCardStrategy.formatContent(query.getCardType(), strategyData);

            // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
            var keyboardBuilder = new TelegramKeyboardBuilder();

            switch (query.getCardType()) {
                case "USER_WELCOME_CARD" -> {
                    keyboardBuilder
                            .addButton("üí∞ –ë–∞–ª–∞–Ω—Å", "show_balance")
                            .addButton("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", "buy_stars")
                            .newRow()
                            .addButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "topup_balance")
                            .addButton("üìã –ò—Å—Ç–æ—Ä–∏—è", "show_history")
                            .newRow()
                            .addButton("‚ùì –ü–æ–º–æ—â—å", "show_help");
                }
                case "PAYMENT_METHODS_CARD" -> {
                    keyboardBuilder
                            .addButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", "topup_balance")
                            .newRow()
                            .addButton("üîô –ù–∞–∑–∞–¥", "show_welcome");
                }
                case "ONBOARDING_CARD" -> {
                    keyboardBuilder
                            .addButton("üöÄ –ù–∞—á–∞—Ç—å", "show_welcome")
                            .addButton("‚ùì –ü–æ–º–æ—â—å", "show_help");
                }
            }

            var keyboard = keyboardBuilder.build();

            log.info("‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {}", query.getUserId());

            return TelegramResponse.builder()
                    .successful(true)
                    .message(formattedMessage)
                    .uiType(query.getCardType())
                    .uiData(strategyData)
                    .data(keyboard)
                    .build();

        } catch (IllegalArgumentException e) {
            log.warn("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    query.getUserId(), e.getMessage());
            return TelegramResponse.error("‚ùå " + e.getMessage());

        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}",
                    query.getUserId(), e.getMessage(), e);
            return TelegramResponse.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É: " + e.getMessage());
        }
    }

    @Override
    public Class<ShowWelcomeCardQuery> getQueryType() {
        return ShowWelcomeCardQuery.class;
    }

    @Override
    public int getHandlerPriority() {
        return 15; // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    }

    @Override
    public boolean supportsCaching() {
        return true; // –ö—ç—à–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏
    }

    @Override
    public String getDescription() {
        return "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π WelcomeCardStrategy";
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–∞—Ä—Ç–æ—á–∫–∏
     */
    private Object prepareStrategyData(ShowWelcomeCardQuery query) throws Exception {
        return switch (query.getCardType()) {
            case "USER_WELCOME_CARD" -> prepareUserWelcomeData(query);
            case "PAYMENT_METHODS_CARD" -> query.getCurrency();
            case "ONBOARDING_CARD" -> query.getUserName();
            default -> throw new IllegalArgumentException("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–∞—Ä—Ç–æ—á–∫–∏: " + query.getCardType());
        };
    }

    /**
     * –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
     */
    private WelcomeCardStrategy.WelcomeCardData prepareUserWelcomeData(ShowWelcomeCardQuery query) {
        DualBalanceResponse balanceData = null;

        if (query.isIncludeBalance()) {
            try {
                // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                var balanceResult = balanceApplicationFacade.getBalance(query.getUserId());

                if (balanceResult != null && balanceResult.isSuccess()) {
                    balanceData = extractBalanceData(balanceResult);
                }

                if (balanceData != null) {
                    log.debug("‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—É—á–µ–Ω –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏: userId={}", query.getUserId());
                } else {
                    log.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏: userId={}", query.getUserId());
                }

            } catch (Exception e) {
                log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏: userId={}, error={}",
                        query.getUserId(), e.getMessage());
                // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –±–∞–ª–∞–Ω—Å–∞
                balanceData = null;
            }
        }

        return new WelcomeCardStrategy.WelcomeCardData(query.getUserName(), balanceData);
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
     */
    private DualBalanceResponse extractBalanceData(Object balanceResult) {
        try {
            if (balanceResult instanceof DualBalanceResponse) {
                return (DualBalanceResponse) balanceResult;
            }

            // TODO: –î–æ–±–∞–≤–∏—Ç—å –º–∞–ø–ø–∏–Ω–≥ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
            log.debug("üîç –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏: {}",
                    balanceResult != null ? balanceResult.getClass().getSimpleName() : "null");
            return null;

        } catch (Exception e) {
            log.warn("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏: {}", e.getMessage());
            return null;
        }
    }
}