package shit.back.telegram.ui.builder;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import shit.back.config.PaymentConfigurationProperties;
import shit.back.domain.balance.valueobjects.Currency;
import shit.back.telegram.ui.CallbackDataConstants;
import shit.back.telegram.ui.strategy.utils.PaymentMethodsHelper;

import java.math.BigDecimal;
import java.util.List;

/**
 * –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –±–∏–ª–¥–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è Telegram –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
 * 
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
 * —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
 */
@Component
public class AdvancedKeyboardBuilder {

    @Autowired
    private PaymentConfigurationProperties paymentConfig;

    /**
     * –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π —Å –±–∞–ª–∞–Ω—Å–æ–º
     */
    public InlineKeyboardMarkup createBalanceActionsKeyboard(boolean hasMainFunds, boolean hasBankFunds) {
        TelegramKeyboardBuilder builder = new TelegramKeyboardBuilder();

        // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–ª–∞–Ω—Å–æ–º
        builder.addButton("üí∞ –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å", CallbackDataConstants.SHOW_BALANCE);
        builder.addButton("üìä –î–µ—Ç–∞–ª–∏", CallbackDataConstants.BALANCE_DETAILS);
        builder.newRow();

        // –î–µ–π—Å—Ç–≤–∏—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        builder.addButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", CallbackDataConstants.TOPUP_BALANCE);

        // –ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ)
        if (hasBankFunds) {
            builder.addButton("üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤ —Ä–∞–±–æ—Ç—É", CallbackDataConstants.TRANSFER_TO_MAIN);
        }
        builder.newRow();

        // –ü–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ä–∞–±–æ—á–µ–º –±–∞–ª–∞–Ω—Å–µ)
        if (hasMainFunds) {
            builder.addButton("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", CallbackDataConstants.BUY_STARS);
        } else {
            builder.addButton("‚≠ê –ó–≤–µ–∑–¥—ã (–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ)", "stars:unavailable");
        }
        builder.newRow();

        // –ò—Å—Ç–æ—Ä–∏—è –∏ –ø–æ–º–æ—â—å
        builder.addButton("üìà –ò—Å—Ç–æ—Ä–∏—è", CallbackDataConstants.BALANCE_HISTORY);
        builder.addButton("‚ùì –ü–æ–º–æ—â—å", CallbackDataConstants.HELP_BALANCE);
        builder.newRow();

        // –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        builder.addButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackDataConstants.MAIN_MENU);

        return builder.build();
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ)
     */
    public InlineKeyboardMarkup createPaymentMethodKeyboard(Currency currency) {
        TelegramKeyboardBuilder builder = new TelegramKeyboardBuilder();

        List<PaymentMethodsHelper.PaymentMethodInfo> methods = PaymentMethodsHelper.getDetailedPaymentMethods(currency,
                paymentConfig);

        if (methods.isEmpty()) {
            builder.addButton("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤", "payment:unavailable");
            builder.newRow();
            builder.addButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackDataConstants.MAIN_MENU);
            return builder.build();
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
        for (PaymentMethodsHelper.PaymentMethodInfo method : methods) {
            String callbackData = extractPaymentMethodCallback(method.getDisplayName());
            builder.addButton(method.getDisplayName(), callbackData);
            builder.newRow();
        }

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        builder.addButton("üîô –ù–∞–∑–∞–¥", CallbackDataConstants.BALANCE_MENU);
        builder.addButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackDataConstants.MAIN_MENU);

        return builder.build();
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∫–∏
     */
    public InlineKeyboardMarkup createPurchaseConfirmationKeyboard(String operationType, String operationId) {
        TelegramKeyboardBuilder builder = new TelegramKeyboardBuilder();

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–º–µ–Ω–∞
        builder.addButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                CallbackDataConstants.confirmOperation(operationType, operationId));
        builder.addButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", CallbackDataConstants.CANCEL_OPERATION);
        builder.newRow();

        // –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥
        builder.addButton("üîô –ù–∞–∑–∞–¥", getBackCallbackForOperation(operationType));

        return builder.build();
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏
     */
    public InlineKeyboardMarkup createHistoryNavigationKeyboard(String historyType, int currentPage,
            boolean hasNextPage, boolean hasPrevPage) {
        TelegramKeyboardBuilder builder = new TelegramKeyboardBuilder();

        // –¢–∏–ø—ã –∏—Å—Ç–æ—Ä–∏–∏
        if (!"purchases".equals(historyType)) {
            builder.addButton("‚≠ê –ü–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥", CallbackDataConstants.HISTORY_PURCHASES);
        }
        if (!"topups".equals(historyType)) {
            builder.addButton("üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏—è", CallbackDataConstants.HISTORY_TOPUPS);
        }
        if (!"transfers".equals(historyType)) {
            builder.addButton("üîÑ –ü–µ—Ä–µ–≤–æ–¥—ã", CallbackDataConstants.HISTORY_TRANSFERS);
        }

        if (!historyType.equals("purchases") || !historyType.equals("topups") || !historyType.equals("transfers")) {
            builder.newRow();
        }

        // –ü–∞–≥–∏–Ω–∞—Ü–∏—è
        if (hasPrevPage || hasNextPage) {
            if (hasPrevPage) {
                builder.addButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
                        CallbackDataConstants.historyPage(historyType, currentPage - 1));
            }

            builder.addButton(String.format("üìÑ %d", currentPage + 1), "page:current");

            if (hasNextPage) {
                builder.addButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è",
                        CallbackDataConstants.historyPage(historyType, currentPage + 1));
            }
            builder.newRow();
        }

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        builder.addButton("üîô –ö –±–∞–ª–∞–Ω—Å—É", CallbackDataConstants.BALANCE_MENU);
        builder.addButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackDataConstants.MAIN_MENU);

        return builder.build();
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –ø–∞–∫–µ—Ç–æ–≤ –∑–≤–µ–∑–¥
     */
    public InlineKeyboardMarkup createStarPackageKeyboard(Currency currency, boolean hasMainFunds) {
        TelegramKeyboardBuilder builder = new TelegramKeyboardBuilder();

        // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –∑–≤–µ–∑–¥ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Fragment –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
        int minStars = paymentConfig.getFragment().getMinStarsAmount();
        int maxStars = paymentConfig.getFragment().getMaxStarsAmount();

        // –ü—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –≤ —Ä–∞–º–∫–∞—Ö –ª–∏–º–∏—Ç–æ–≤
        int[] starPackages = { 100, 250, 500, 1000, 2500 };
        BigDecimal[] prices = {
                new BigDecimal("1.00"), new BigDecimal("2.50"),
                new BigDecimal("5.00"), new BigDecimal("10.00"), new BigDecimal("25.00")
        };

        boolean addedPackages = false;
        for (int i = 0; i < starPackages.length; i++) {
            int stars = starPackages[i];
            if (stars >= minStars && stars <= maxStars) {
                String statusIcon = hasMainFunds ? "‚≠ê" : "üîí";
                String buttonText = String.format("%s %d –∑–∞ %s %s",
                        statusIcon, stars, prices[i], currency.getSymbol());
                String callbackData = CallbackDataConstants.starsPackage(stars, prices[i].toString());

                builder.addButton(buttonText, callbackData);
                builder.newRow();
                addedPackages = true;
            }
        }

        if (!addedPackages) {
            builder.addButton("‚ùå –ü–∞–∫–µ—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã", "stars:unavailable");
            builder.newRow();
        }

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—É–º–º–∞
        if (hasMainFunds) {
            builder.addButton("‚úèÔ∏è –°–≤–æ—è —Å—É–º–º–∞", CallbackDataConstants.STARS_CUSTOM);
            builder.newRow();
        }

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        builder.addButton("üîô –ö –±–∞–ª–∞–Ω—Å—É", CallbackDataConstants.BALANCE_MENU);
        builder.addButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackDataConstants.MAIN_MENU);

        return builder.build();
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –±—ã—Å—Ç—Ä—ã—Ö —Å—É–º–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
     */
    public InlineKeyboardMarkup createTopupAmountKeyboard(Currency currency) {
        TelegramKeyboardBuilder builder = new TelegramKeyboardBuilder();

        // –ë—ã—Å—Ç—Ä—ã–µ —Å—É–º–º—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
        String[] amounts = getQuickAmounts(currency);
        String symbol = currency.getSymbol();

        // –î–æ–±–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ —Å—É–º–º—ã (–ø–æ 2 –≤ —Ä—è–¥)
        for (int i = 0; i < amounts.length; i += 2) {
            builder.addButton(symbol + " " + amounts[i],
                    CallbackDataConstants.topupAmount(amounts[i]));

            if (i + 1 < amounts.length) {
                builder.addButton(symbol + " " + amounts[i + 1],
                        CallbackDataConstants.topupAmount(amounts[i + 1]));
            }
            builder.newRow();
        }

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—É–º–º–∞
        builder.addButton("‚úèÔ∏è –°–≤–æ—è —Å—É–º–º–∞", CallbackDataConstants.TOPUP_CUSTOM);
        builder.newRow();

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è
        builder.addButton("üîô –ù–∞–∑–∞–¥", CallbackDataConstants.BALANCE_MENU);
        builder.addButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", CallbackDataConstants.MAIN_MENU);

        return builder.build();
    }

    /**
     * –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤
     */
    public InlineKeyboardMarkup createTransferConfirmationKeyboard(String amount) {
        TelegramKeyboardBuilder builder = new TelegramKeyboardBuilder();

        builder.addButton("‚úÖ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏",
                CallbackDataConstants.transferAmount(amount));
        builder.addButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", CallbackDataConstants.CANCEL_OPERATION);
        builder.newRow();

        builder.addButton("üîô –ö –±–∞–ª–∞–Ω—Å—É", CallbackDataConstants.BALANCE_MENU);

        return builder.build();
    }

    /**
     * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ callback data –¥–ª—è —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
     */
    private String extractPaymentMethodCallback(String displayName) {
        if (displayName.contains("TON")) {
            return CallbackDataConstants.PAYMENT_TON;
        } else if (displayName.contains("YooKassa")) {
            return CallbackDataConstants.PAYMENT_YOOKASSA;
        } else if (displayName.contains("UZS")) {
            return CallbackDataConstants.PAYMENT_UZS;
        }
        return CallbackDataConstants.PAYMENT_PREFIX + ":unknown";
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ callback –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞–∑–∞–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
     */
    private String getBackCallbackForOperation(String operationType) {
        return switch (operationType) {
            case "stars" -> CallbackDataConstants.STARS_MENU;
            case "topup" -> CallbackDataConstants.TOPUP_BALANCE;
            case "transfer" -> CallbackDataConstants.BALANCE_MENU;
            default -> CallbackDataConstants.MAIN_MENU;
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –±—ã—Å—Ç—Ä—ã—Ö —Å—É–º–º –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
     */
    private String[] getQuickAmounts(Currency currency) {
        if (currency.isUsd()) {
            return new String[] { "5", "10", "25", "50", "100", "250" };
        } else if (currency.isUzs()) {
            return new String[] { "50000", "100000", "250000", "500000", "1000000", "2500000" };
        }
        // –î–ª—è –¥—Ä—É–≥–∏—Ö –≤–∞–ª—é—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º USD —Å—É–º–º—ã
        return new String[] { "5", "10", "25", "50", "100", "250" };
    }
}