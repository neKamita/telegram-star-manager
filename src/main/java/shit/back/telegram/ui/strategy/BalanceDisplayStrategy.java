package shit.back.telegram.ui.strategy;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import shit.back.application.balance.dto.response.SimpleBalanceResponse;
import shit.back.config.PaymentConfigurationProperties;
import shit.back.domain.balance.valueobjects.Currency;
import shit.back.telegram.ui.strategy.utils.PaymentMethodsHelper;
import shit.back.telegram.ui.strategy.utils.StrategyConstants;

import java.util.List;

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 *
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ - —Ç–æ–ª—å–∫–æ –æ–±—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å.
 * –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ Bank/Main –±–∞–ª–∞–Ω—Å—ã —Å–∫—Ä—ã—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è
 * –ø—Ä–æ—Å—Ç–æ—Ç—ã.
 */
@Component
public class BalanceDisplayStrategy implements TelegramMessageStrategy {

    private static final String STRATEGY_TYPE = "BALANCE_DISPLAY";
    private static final String[] SUPPORTED_TYPES = {
            "DUAL_BALANCE_INFO", "BALANCE_SUMMARY", "BALANCE_DETAILS"
    };

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ StrategyConstants

    @Autowired
    private PaymentConfigurationProperties paymentConfig;

    @Override
    public String getStrategyType() {
        return STRATEGY_TYPE;
    }

    @Override
    public boolean canHandle(String contentType) {
        if (contentType == null)
            return false;
        for (String type : SUPPORTED_TYPES) {
            if (type.equals(contentType))
                return true;
        }
        return false;
    }

    @Override
    public String[] getSupportedContentTypes() {
        return SUPPORTED_TYPES.clone();
    }

    @Override
    public String formatContent(String contentType, Object data) {
        return switch (contentType) {
            case "DUAL_BALANCE_INFO" -> formatDualBalanceInfo(data);
            case "BALANCE_SUMMARY" -> formatBalanceSummary(data);
            case "BALANCE_DETAILS" -> formatBalanceDetails(data);
            default -> throw new IllegalArgumentException("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: " + contentType);
        };
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞–ª–∞–Ω—Å–µ
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–±—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –±–∞–ª–∞–Ω—Å –±–µ–∑ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –¥–µ—Ç–∞–ª–µ–π
     */
    private String formatDualBalanceInfo(Object data) {
        if (!(data instanceof SimpleBalanceResponse balance)) {
            throw new IllegalArgumentException("–û–∂–∏–¥–∞–ª—Å—è SimpleBalanceResponse –¥–ª—è DUAL_BALANCE_INFO");
        }

        String statusIcon = balance.isActive() ? "‚úÖ" : "‚ùå";
        String currencySymbol = balance.getCurrency().getSymbol();

        StringBuilder message = new StringBuilder();
        message.append(String.format("üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> %s\n\n",
                balance.getFormattedBalance()));

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª—é—Ç–µ –∏ —Å—Ç–∞—Ç—É—Å–µ
        message.append(String.format("üí± <b>–í–∞–ª—é—Ç–∞:</b> %s\n", balance.getCurrency().getFormattedName()));
        message.append(String.format("%s <b>–°—Ç–∞—Ç—É—Å:</b> %s\n", statusIcon,
                balance.isActive() ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–ù–µ–∞–∫—Ç–∏–≤–µ–Ω"));
        message.append(String.format("üïê <b>–û–±–Ω–æ–≤–ª–µ–Ω:</b> %s",
                balance.getLastUpdated().format(StrategyConstants.DATE_FORMATTER)));

        return message.toString();
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—Ä–∞—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏ –±–∞–ª–∞–Ω—Å–∞
     */
    private String formatBalanceSummary(Object data) {
        if (!(data instanceof SimpleBalanceResponse balance)) {
            throw new IllegalArgumentException("–û–∂–∏–¥–∞–ª—Å—è SimpleBalanceResponse –¥–ª—è BALANCE_SUMMARY");
        }

        String currencySymbol = balance.getCurrency().getSymbol();
        boolean hasAvailableFunds = balance.getCurrentBalance().isPositive();
        String fundsIcon = hasAvailableFunds ? "üíö" : "‚ö†Ô∏è";

        return String.format("""
                %s <b>–ë–∞–ª–∞–Ω—Å:</b> %s

                %s <i>–°—Ç–∞—Ç—É—Å: %s</i>
                """,
                fundsIcon, balance.getFormattedBalance(),
                balance.isActive() ? "‚úÖ" : "‚ùå",
                hasAvailableFunds ? "–ì–æ—Ç–æ–≤ –∫ –ø–æ–∫—É–ø–∫–∞–º" : "–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å");
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
     */
    private String formatBalanceDetails(Object data) {
        if (!(data instanceof SimpleBalanceResponse balance)) {
            throw new IllegalArgumentException("–û–∂–∏–¥–∞–ª—Å—è SimpleBalanceResponse –¥–ª—è BALANCE_DETAILS");
        }

        StringBuilder message = new StringBuilder();
        String currencySymbol = balance.getCurrency().getSymbol();
        boolean hasAvailableFunds = balance.getCurrentBalance().isPositive();

        message.append("üìã <b>–î–µ—Ç–∞–ª–∏ –±–∞–ª–∞–Ω—Å–∞</b>\n\n");

        // –û–±—â–∏–π –±–∞–ª–∞–Ω—Å
        message.append(String.format("üí∞ <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> %s\n\n",
                balance.getFormattedBalance()));

        if (hasAvailableFunds) {
            message.append("‚≠ê <i>–ì–æ—Ç–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥</i>\n\n");
        } else {
            message.append("‚ö†Ô∏è <i>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥</i>\n\n");
        }

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é
        message.append("üí° <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n");
        List<String> availableMethods = PaymentMethodsHelper.getAvailablePaymentMethods(balance.getCurrency(),
                paymentConfig);
        for (String method : availableMethods) {
            message.append(String.format("‚Ä¢ %s\n", method));
        }

        if (availableMethods.isEmpty()) {
            message.append("‚ö†Ô∏è <i>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç—ã</i>");
        }

        return message.toString();
    }
}