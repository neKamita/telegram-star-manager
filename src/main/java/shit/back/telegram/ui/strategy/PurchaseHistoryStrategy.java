package shit.back.telegram.ui.strategy;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;
import shit.back.entity.TransactionStatus;
import shit.back.domain.starPurchase.StarPurchaseAggregate;
import shit.back.application.balance.dto.response.StarPurchaseResponse;
import shit.back.domain.balance.valueobjects.Currency;
import shit.back.domain.balance.valueobjects.Money;
import shit.back.telegram.ui.strategy.utils.StrategyConstants;

import java.util.List;

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫ –∑–≤–µ–∑–¥
 * 
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∫—É–ø–æ–∫ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ç–æ–≥–æ, —á—Ç–æ –±–æ—Ç –ø–æ–∫—É–ø–∞–µ—Ç
 * –∑–≤–µ–∑–¥—ã –ó–ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Fragment API
 */
@Component
public class PurchaseHistoryStrategy implements TelegramMessageStrategy {

    private static final Logger logger = LoggerFactory.getLogger(PurchaseHistoryStrategy.class);

    private static final String STRATEGY_TYPE = "PURCHASE_HISTORY";
    private static final String[] SUPPORTED_TYPES = {
            "STAR_PURCHASE_HISTORY", "RECENT_PURCHASES", "PURCHASE_DETAILS"
    };

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ StrategyConstants

    @Override
    public String getStrategyType() {
        return STRATEGY_TYPE;
    }

    @Override
    public boolean canHandle(String contentType) {
        if (contentType == null)
            return false;
        for (String type : SUPPORTED_TYPES) {
            if (type.equals(contentType))
                return true;
        }
        return false;
    }

    @Override
    public String[] getSupportedContentTypes() {
        return SUPPORTED_TYPES.clone();
    }

    @Override
    public String formatContent(String contentType, Object data) {
        logger.debug("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Ç–∏–ø–∞: {}, –¥–∞–Ω–Ω—ã–µ: {}", contentType, data.getClass().getSimpleName());
        return switch (contentType) {
            case "STAR_PURCHASE_HISTORY" -> formatStarPurchaseHistory(data);
            case "RECENT_PURCHASES" -> formatRecentPurchases(data);
            case "PURCHASE_DETAILS" -> formatPurchaseDetails(data);
            default -> throw new IllegalArgumentException("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: " + contentType);
        };
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–∫—É–ø–æ–∫ –∑–≤–µ–∑–¥
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å List<StarPurchaseResponse> –≤–º–µ—Å—Ç–æ
     * List<StarPurchaseAggregate>
     */
    @SuppressWarnings("unchecked")
    private String formatStarPurchaseHistory(Object data) {
        if (!(data instanceof List<?> list)) {
            throw new IllegalArgumentException("–û–∂–∏–¥–∞–ª—Å—è List<StarPurchaseResponse> –¥–ª—è STAR_PURCHASE_HISTORY");
        }

        // –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞
        if (!list.isEmpty() && !(list.get(0) instanceof StarPurchaseResponse)) {
            throw new IllegalArgumentException("–û–∂–∏–¥–∞–ª—Å—è List<StarPurchaseResponse>, –ø–æ–ª—É—á–µ–Ω: " +
                    (list.get(0) != null ? list.get(0).getClass().getSimpleName() : "null"));
        }

        List<StarPurchaseResponse> purchases = (List<StarPurchaseResponse>) list;

        if (purchases.isEmpty()) {
            return """
                    üìã <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫</b>

                    üì≠ <i>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –ø—É—Å—Ç–∞</i>

                    üí° <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
                    ‚Ä¢ –í—ã –ø–æ–ø–æ–ª–Ω—è–µ—Ç–µ –±–∞–ª–∞–Ω—Å —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                    ‚Ä¢ –ë–æ—Ç –ø–æ–∫—É–ø–∞–µ—Ç –∑–≤–µ–∑–¥—ã –ó–ê –≤–∞—Å —á–µ—Ä–µ–∑ Telegram
                    ‚Ä¢ –ó–≤–µ–∑–¥—ã –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç

                    üöÄ <i>–ù–∞—á–Ω–∏—Ç–µ —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!</i>
                    """;
        }

        StringBuilder message = new StringBuilder();
        message.append("üìã <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∫—É–ø–æ–∫ –∑–≤–µ–∑–¥</b>\n\n");

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è StarPurchaseResponse
        int totalPurchases = purchases.size();
        int successfulPurchases = (int) purchases.stream().filter(StarPurchaseResponse::isSuccessful).count();
        int totalStars = purchases.stream()
                .filter(StarPurchaseResponse::isSuccessful)
                .mapToInt(p -> p.getStarCount() != null ? p.getStarCount() : 0)
                .sum();

        message.append("üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n");
        message.append(String.format("üõí –í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫: %d\n", totalPurchases));
        message.append(String.format("‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: %d\n", successfulPurchases));
        message.append(String.format("‚≠ê –ü–æ–ª—É—á–µ–Ω–æ –∑–≤–µ–∑–¥: %d\n\n", totalStars));

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –¥–ª—è StarPurchaseResponse
        message.append("üïê <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:</b>\n");
        purchases.stream()
                .limit(StrategyConstants.MAX_HISTORY_ITEMS)
                .forEach(purchase -> message.append(formatSinglePurchaseResponse(purchase)));

        if (purchases.size() > StrategyConstants.MAX_HISTORY_ITEMS) {
            message.append(String.format("\n<i>... –∏ –µ—â–µ %d –ø–æ–∫—É–ø–æ–∫</i>",
                    purchases.size() - StrategyConstants.MAX_HISTORY_ITEMS));
        }

        message.append("\nüí° <i>–ë–æ—Ç –ø–æ–∫—É–ø–∞–µ—Ç –∑–≤–µ–∑–¥—ã –ó–ê –≤–∞—Å —á–µ—Ä–µ–∑ Telegram Fragment</i>");

        return message.toString();
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–∫—É–ø–æ–∫ (–∫—Ä–∞—Ç–∫–∏–π —Ñ–æ—Ä–º–∞—Ç)
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å List<StarPurchaseResponse>
     */
    @SuppressWarnings("unchecked")
    private String formatRecentPurchases(Object data) {
        if (!(data instanceof List<?> list)) {
            throw new IllegalArgumentException("–û–∂–∏–¥–∞–ª—Å—è List<StarPurchaseResponse> –¥–ª—è RECENT_PURCHASES");
        }

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        if (!list.isEmpty() && !(list.get(0) instanceof StarPurchaseResponse)) {
            throw new IllegalArgumentException("–û–∂–∏–¥–∞–ª—Å—è List<StarPurchaseResponse>, –ø–æ–ª—É—á–µ–Ω: " +
                    (list.get(0) != null ? list.get(0).getClass().getSimpleName() : "null"));
        }

        List<StarPurchaseResponse> purchases = (List<StarPurchaseResponse>) list;

        if (purchases.isEmpty()) {
            return """
                    üïê <b>–ù–µ–¥–∞–≤–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</b>

                    üì≠ <i>–ù–µ–¥–∞–≤–Ω–∏—Ö –ø–æ–∫—É–ø–æ–∫ –Ω–µ—Ç</i>

                    üí´ <i>–ü–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</i>
                    """;
        }

        StringBuilder message = new StringBuilder();
        message.append("üïê <b>–ù–µ–¥–∞–≤–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</b>\n\n");

        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è StarPurchaseResponse
        purchases.stream()
                .limit(StrategyConstants.MAX_RECENT_PURCHASES)
                .forEach(purchase -> {
                    String statusIcon = getStatusIconFromString(purchase.getStatus());
                    String currencySymbol = getCurrencySymbol(purchase.getAmount());

                    message.append(String.format("%s %s ‚Ä¢ %s %s ‚Ä¢ %s\n",
                            statusIcon,
                            purchase.isSuccessful() ? String.format("‚≠ê%d", purchase.getStarCount())
                                    : String.format("‚≠ê%d", purchase.getStarCount()),
                            getFormattedAmount(purchase.getAmount()),
                            currencySymbol,
                            purchase.getCreatedAt().format(StrategyConstants.DATE_FORMATTER)));
                });

        message.append("\nü§ñ <i>–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞–µ—Ç –∑–≤–µ–∑–¥—ã —á–µ—Ä–µ–∑ Telegram</i>");

        return message.toString();
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –æ–¥–Ω–æ–π –ø–æ–∫—É–ø–∫–∏
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–∞–∫ StarPurchaseAggregate, —Ç–∞–∫ –∏
     * StarPurchaseResponse
     */
    private String formatPurchaseDetails(Object data) {
        StringBuilder message = new StringBuilder();
        message.append("üîç <b>–î–µ—Ç–∞–ª–∏ –ø–æ–∫—É–ø–∫–∏</b>\n\n");

        if (data instanceof StarPurchaseAggregate purchase) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ StarPurchaseAggregate (—Å—Ç–∞—Ä—ã–π –∫–æ–¥)
            String statusIcon = getStatusIcon(purchase.getStatus());
            String currencySymbol = purchase.getCurrency().getSymbol();

            message.append(String.format("üÜî <b>ID:</b> <code>%s</code>\n",
                    purchase.getStarPurchaseId().getShortValue()));
            message.append(String.format("%s <b>–°—Ç–∞—Ç—É—Å:</b> %s\n",
                    statusIcon, formatStatus(purchase.getStatus())));

            message.append(String.format("‚≠ê <b>–ó–∞–ø—Ä–æ—à–µ–Ω–æ:</b> %d –∑–≤–µ–∑–¥\n",
                    purchase.getRequestedStars()));
            if (purchase.isCompleted() && purchase.getActualStarsReceived() != null) {
                message.append(String.format("‚úÖ <b>–ü–æ–ª—É—á–µ–Ω–æ:</b> %d –∑–≤–µ–∑–¥\n",
                        purchase.getActualStarsReceived()));
            }

            message.append(String.format("üí∞ <b>–°—É–º–º–∞:</b> %s %s\n",
                    purchase.getPurchaseAmount().getFormattedAmount(), currencySymbol));
            message.append(String.format("üí± <b>–í–∞–ª—é—Ç–∞:</b> %s\n",
                    purchase.getCurrency().getFormattedName()));

            message.append(String.format("üïê <b>–°–æ–∑–¥–∞–Ω–æ:</b> %s\n",
                    purchase.getCreatedAt().format(StrategyConstants.DATE_FORMATTER)));
            if (purchase.getCompletedAt() != null) {
                message.append(String.format("‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</b> %s\n",
                        purchase.getCompletedAt().format(StrategyConstants.DATE_FORMATTER)));
            }

            if (purchase.hasFragmentTransaction()) {
                message.append(String.format("üîó <b>Fragment ID:</b> <code>%s</code>\n",
                        purchase.getFragmentTransactionId().getShortValue()));
            }

            if (purchase.getDescription() != null) {
                message.append(String.format("üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> %s\n", purchase.getDescription()));
            }
            if (!purchase.isCompleted() && purchase.getErrorMessage() != null) {
                message.append(String.format("‚ùå <b>–û—à–∏–±–∫–∞:</b> %s\n", purchase.getErrorMessage()));
            }

        } else if (data instanceof StarPurchaseResponse purchase) {
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ StarPurchaseResponse
            String statusIcon = getStatusIconFromString(purchase.getStatus());
            String currencySymbol = getCurrencySymbol(purchase.getAmount());

            message.append(String.format("üÜî <b>ID:</b> <code>%s</code>\n",
                    purchase.getTransactionId()));
            message.append(String.format("%s <b>–°—Ç–∞—Ç—É—Å:</b> %s\n",
                    statusIcon, formatStatusFromString(purchase.getStatus())));

            message.append(String.format("‚≠ê <b>–ó–≤–µ–∑–¥—ã:</b> %d\n",
                    purchase.getStarCount()));

            message.append(String.format("üí∞ <b>–°—É–º–º–∞:</b> %s %s\n",
                    getFormattedAmount(purchase.getAmount()), currencySymbol));

            message.append(String.format("üïê <b>–°–æ–∑–¥–∞–Ω–æ:</b> %s\n",
                    purchase.getCreatedAt().format(StrategyConstants.DATE_FORMATTER)));
            if (purchase.getCompletedAt() != null) {
                message.append(String.format("‚úÖ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ:</b> %s\n",
                        purchase.getCompletedAt().format(StrategyConstants.DATE_FORMATTER)));
            }

            if (purchase.getErrorMessage() != null) {
                message.append(String.format("‚ùå <b>–û—à–∏–±–∫–∞:</b> %s\n", purchase.getErrorMessage()));
            }

        } else {
            throw new IllegalArgumentException(
                    "–û–∂–∏–¥–∞–ª—Å—è StarPurchaseAggregate –∏–ª–∏ StarPurchaseResponse –¥–ª—è PURCHASE_DETAILS, –ø–æ–ª—É—á–µ–Ω: " +
                            (data != null ? data.getClass().getSimpleName() : "null"));
        }

        message.append("\nü§ñ <i>–ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –±–æ—Ç–æ–º —á–µ—Ä–µ–∑ Telegram Fragment API</i>");
        return message.toString();
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ (StarPurchaseAggregate)
     */
    private String formatSinglePurchase(StarPurchaseAggregate purchase) {
        String statusIcon = getStatusIcon(purchase.getStatus());
        String currencySymbol = purchase.getCurrency().getSymbol();

        StringBuilder item = new StringBuilder();
        item.append(String.format("‚Ä¢ %s ", statusIcon));

        if (purchase.isCompleted()) {
            item.append(String.format("‚≠ê<b>%d</b> –∑–∞ %s %s",
                    purchase.getActualStarsReceived(),
                    purchase.getPurchaseAmount().getFormattedAmount(),
                    currencySymbol));
        } else {
            item.append(String.format("‚ùå ‚≠ê%d –∑–∞ %s %s",
                    purchase.getRequestedStars(),
                    purchase.getPurchaseAmount().getFormattedAmount(),
                    currencySymbol));
        }

        item.append(String.format("\n   <i>%s</i>\n",
                purchase.getCreatedAt().format(StrategyConstants.DATE_FORMATTER)));

        if (!purchase.isCompleted() && purchase.getErrorMessage() != null) {
            item.append(String.format("   <i>%s</i>\n", purchase.getErrorMessage()));
        }

        return item.toString();
    }

    /**
     * –ù–û–í–´–ô –ú–ï–¢–û–î: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–π –ø–æ–∫—É–ø–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ (StarPurchaseResponse)
     */
    private String formatSinglePurchaseResponse(StarPurchaseResponse purchase) {
        String statusIcon = getStatusIconFromString(purchase.getStatus());
        String currencySymbol = getCurrencySymbol(purchase.getAmount());

        StringBuilder item = new StringBuilder();
        item.append(String.format("‚Ä¢ %s ", statusIcon));

        if (purchase.isSuccessful()) {
            item.append(String.format("‚≠ê<b>%d</b> –∑–∞ %s %s",
                    purchase.getStarCount(),
                    getFormattedAmount(purchase.getAmount()),
                    currencySymbol));
        } else {
            item.append(String.format("‚ùå ‚≠ê%d –∑–∞ %s %s",
                    purchase.getStarCount(),
                    getFormattedAmount(purchase.getAmount()),
                    currencySymbol));
        }

        item.append(String.format("\n   <i>%s</i>\n",
                purchase.getCreatedAt().format(StrategyConstants.DATE_FORMATTER)));

        if (!purchase.isSuccessful() && purchase.getErrorMessage() != null) {
            item.append(String.format("   <i>%s</i>\n", purchase.getErrorMessage()));
        }

        return item.toString();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
     */
    private String getStatusIcon(TransactionStatus status) {
        return switch (status) {
            case PENDING -> "üîÑ";
            case COMPLETED -> "‚úÖ";
            case FAILED -> "‚ùå";
            case CANCELLED -> "üö´";
            default -> "‚ùì";
        };
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     */
    private String formatStatus(TransactionStatus status) {
        return switch (status) {
            case PENDING -> "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ";
            case COMPLETED -> "–ó–∞–≤–µ—Ä—à–µ–Ω–∞";
            case FAILED -> "–ù–µ—É–¥–∞—á–Ω–æ";
            case CANCELLED -> "–û—Ç–º–µ–Ω–µ–Ω–∞";
            default -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        };
    }

    /**
     * –ù–û–í–´–ï –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å StarPurchaseResponse
     */

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
     */
    private String getStatusIconFromString(String status) {
        if (status == null)
            return "‚ùì";
        return switch (status.toUpperCase()) {
            case "PENDING", "PROCESSING" -> "üîÑ";
            case "COMPLETED", "SUCCESS" -> "‚úÖ";
            case "FAILED", "ERROR" -> "‚ùå";
            case "CANCELLED" -> "üö´";
            default -> "‚ùì";
        };
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ —Å—Ç—Ä–æ–∫–∏
     */
    private String formatStatusFromString(String status) {
        if (status == null)
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        return switch (status.toUpperCase()) {
            case "PENDING", "PROCESSING" -> "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ";
            case "COMPLETED", "SUCCESS" -> "–ó–∞–≤–µ—Ä—à–µ–Ω–∞";
            case "FAILED", "ERROR" -> "–ù–µ—É–¥–∞—á–Ω–æ";
            case "CANCELLED" -> "–û—Ç–º–µ–Ω–µ–Ω–∞";
            default -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –≤–∞–ª—é—Ç—ã –∏–∑ Money –æ–±—ä–µ–∫—Ç–∞
     */
    private String getCurrencySymbol(Money money) {
        if (money == null)
            return "$";
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É Money –µ—Å—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã
        // –ï—Å–ª–∏ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª
        return "$"; // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ –≤–∞–ª—é—Ç—ã –∏–∑ Money
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—É–º–º—ã –∏–∑ Money –æ–±—ä–µ–∫—Ç–∞
     */
    private String getFormattedAmount(Money money) {
        if (money == null)
            return "0.00";
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É Money –µ—Å—Ç—å –º–µ—Ç–æ–¥ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        // –ï—Å–ª–∏ –Ω–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º toString –∏–ª–∏ –¥—Ä—É–≥–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –º–µ—Ç–æ–¥
        return money.toString(); // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Money
    }
}