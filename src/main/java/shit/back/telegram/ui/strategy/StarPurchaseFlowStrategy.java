package shit.back.telegram.ui.strategy;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import shit.back.application.balance.dto.response.DualBalanceResponse;
import shit.back.config.PaymentConfigurationProperties;
import shit.back.domain.balance.valueobjects.Money;
import shit.back.telegram.ui.strategy.utils.PaymentMethodsHelper;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
 * 
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–ª–æ—É –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–∞–ª–∞–Ω—Å–∞ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
 * —á—Ç–æ –±–æ—Ç –ø–æ–∫—É–ø–∞–µ—Ç –∑–≤–µ–∑–¥—ã –ó–ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Fragment API
 */
@Component
public class StarPurchaseFlowStrategy implements TelegramMessageStrategy {

    private static final String STRATEGY_TYPE = "STAR_PURCHASE_FLOW";
    private static final String[] SUPPORTED_TYPES = {
            "PURCHASE_INTERFACE", "BALANCE_CHECK", "PURCHASE_CONFIRMATION", "INSUFFICIENT_FUNDS"
    };

    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –∑–≤–µ–∑–¥ —Å —Ü–µ–Ω–∞–º–∏ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –∫—É—Ä—Å—ã)
    private static final StarPackage[] STAR_PACKAGES = {
            new StarPackage(100, new BigDecimal("1.00")),
            new StarPackage(250, new BigDecimal("2.50")),
            new StarPackage(500, new BigDecimal("5.00")),
            new StarPackage(1000, new BigDecimal("10.00")),
            new StarPackage(2500, new BigDecimal("25.00"))
    };

    @Autowired
    private PaymentConfigurationProperties paymentConfig;

    @Override
    public String getStrategyType() {
        return STRATEGY_TYPE;
    }

    @Override
    public boolean canHandle(String contentType) {
        if (contentType == null)
            return false;
        for (String type : SUPPORTED_TYPES) {
            if (type.equals(contentType))
                return true;
        }
        return false;
    }

    @Override
    public String[] getSupportedContentTypes() {
        return SUPPORTED_TYPES.clone();
    }

    @Override
    public String formatContent(String contentType, Object data) {
        return switch (contentType) {
            case "PURCHASE_INTERFACE" -> formatPurchaseInterface(data);
            case "BALANCE_CHECK" -> formatBalanceCheck(data);
            case "PURCHASE_CONFIRMATION" -> formatPurchaseConfirmation(data);
            case "INSUFFICIENT_FUNDS" -> formatInsufficientFunds(data);
            default -> throw new IllegalArgumentException("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: " + contentType);
        };
    }

    /**
     * –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥
     */
    private String formatPurchaseInterface(Object data) {
        if (!(data instanceof DualBalanceResponse balance)) {
            throw new IllegalArgumentException("–û–∂–∏–¥–∞–ª—Å—è DualBalanceResponse –¥–ª—è PURCHASE_INTERFACE");
        }

        StringBuilder message = new StringBuilder();
        String currencySymbol = balance.getCurrency().getSymbol();

        message.append("‚≠ê <b>–ü–æ–∫—É–ø–∫–∞ Telegram Stars</b>\n\n");

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        message.append("üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b>\n");
        message.append(String.format("üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–æ: %s %s\n",
                balance.getBankBalance().getFormattedAmount(), currencySymbol));
        message.append(String.format("üè¶ –í —Ä–∞–±–æ—Ç–µ: %s %s\n\n",
                balance.getMainBalance().getFormattedAmount(), currencySymbol));

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–µ
        if (!balance.hasMainFunds()) {
            if (balance.hasBankFunds()) {
                message.append("üí° <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n");
                message.append("–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ä–∞–±–æ—á–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥\n\n");
            } else {
                message.append("‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n");
                message.append("–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥\n\n");
            }
        } else {
            message.append("‚úÖ <b>–ì–æ—Ç–æ–≤–æ –∫ –ø–æ–∫—É–ø–∫–µ!</b>\n\n");
        }

        // –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –∑–≤–µ–∑–¥
        message.append("üì¶ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã:</b>\n");
        List<StarPackage> availablePackages = getAvailablePackages(balance);

        if (availablePackages.isEmpty()) {
            message.append("‚ùå <i>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥</i>\n\n");
        } else {
            for (StarPackage pkg : availablePackages) {
                boolean canAfford = balance.hasSufficientMainFunds(Money.of(pkg.price));
                String statusIcon = canAfford ? "‚úÖ" : "‚ùå";

                message.append(String.format("%s ‚≠ê<b>%d</b> –∑–∞ %s %s\n",
                        statusIcon, pkg.stars, pkg.price, currencySymbol));
            }
            message.append("\n");
        }

        // –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
        message.append("ü§ñ <b>–ö–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–∫—É–ø–∫–∞:</b>\n");
        message.append("1Ô∏è‚É£ –í—ã –≤—ã–±–∏—Ä–∞–µ—Ç–µ –ø–∞–∫–µ—Ç –∑–≤–µ–∑–¥\n");
        message.append("2Ô∏è‚É£ –ë–æ—Ç —Å–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –≤–∞—à–µ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞\n");
        message.append("3Ô∏è‚É£ –ë–æ—Ç –ø–æ–∫—É–ø–∞–µ—Ç –∑–≤–µ–∑–¥—ã\n");
        message.append("4Ô∏è‚É£ –ó–≤–µ–∑–¥—ã –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ –≤–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç\n\n");

        message.append("üí° <i>–ü–æ–∫—É–ø–∫–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç</i>");

        return message.toString();
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫—É–ø–∫–æ–π
     */
    private String formatBalanceCheck(Object data) {
        if (!(data instanceof BalanceCheckData checkData)) {
            throw new IllegalArgumentException("–û–∂–∏–¥–∞–ª—Å—è BalanceCheckData –¥–ª—è BALANCE_CHECK");
        }

        DualBalanceResponse balance = checkData.balance;
        int requestedStars = checkData.requestedStars;
        Money requiredAmount = checkData.requiredAmount;

        StringBuilder message = new StringBuilder();
        String currencySymbol = balance.getCurrency().getSymbol();

        message.append("üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞</b>\n\n");
        message.append(String.format("‚≠ê <b>–ó–∞–ø—Ä–æ—à–µ–Ω–æ:</b> %d –∑–≤–µ–∑–¥\n", requestedStars));
        message.append(String.format("üí∞ <b>–¢—Ä–µ–±—É–µ—Ç—Å—è:</b> %s %s\n\n",
                requiredAmount.getFormattedAmount(), currencySymbol));

        // –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤
        message.append("üí∞ <b>–°–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:</b>\n");
        message.append(String.format("üí≥ –ü–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π: %s %s\n",
                balance.getBankBalance().getFormattedAmount(), currencySymbol));
        message.append(String.format("üè¶ –†–∞–±–æ—á–∏–π: %s %s\n",
                balance.getMainBalance().getFormattedAmount(), currencySymbol));
        message.append(String.format("üìä –û–±—â–∏–π: %s %s\n\n",
                balance.getTotalBalance().getFormattedAmount(), currencySymbol));

        // –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏
        if (balance.hasSufficientMainFunds(requiredAmount)) {
            message.append("‚úÖ <b>–°—Ä–µ–¥—Å—Ç–≤ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ!</b>\n");
            message.append("–ü–æ–∫—É–ø–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ\n\n");

            Money remainingAfter = balance.getMainBalance().subtract(requiredAmount);
            message.append(String.format("üíº <b>–û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ –ø–æ–∫—É–ø–∫–∏:</b> %s %s\n",
                    remainingAfter.getFormattedAmount(), currencySymbol));
        } else if (balance.hasSufficientBankFunds(requiredAmount) ||
                balance.getTotalBalance().isGreaterThanOrEqual(requiredAmount)) {
            message.append("üîÑ <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤</b>\n");
            message.append("–°–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ä–∞–±–æ—á–∏–π –±–∞–ª–∞–Ω—Å\n\n");

            Money needToTransfer = requiredAmount.subtract(balance.getMainBalance());
            if (needToTransfer.isPositive()) {
                message.append(String.format("üí∏ <b>–ü–µ—Ä–µ–≤–µ—Å—Ç–∏:</b> %s %s\n",
                        needToTransfer.getFormattedAmount(), currencySymbol));
            }
        } else {
            message.append("‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n");
            Money shortfall = requiredAmount.subtract(balance.getTotalBalance());
            message.append(String.format("üí∏ <b>–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç:</b> %s %s\n",
                    shortfall.getFormattedAmount(), currencySymbol));
        }

        return message.toString();
    }

    /**
     * –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏
     */
    private String formatPurchaseConfirmation(Object data) {
        if (!(data instanceof PurchaseConfirmationData confirmData)) {
            throw new IllegalArgumentException("–û–∂–∏–¥–∞–ª—Å—è PurchaseConfirmationData –¥–ª—è PURCHASE_CONFIRMATION");
        }

        int stars = confirmData.stars;
        Money amount = confirmData.amount;
        String currencySymbol = confirmData.currencySymbol;

        return String.format("""
                ‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏</b>

                ‚≠ê <b>–ó–≤–µ–∑–¥:</b> %d
                üí∞ <b>–°—É–º–º–∞:</b> %s %s

                ü§ñ <b>–ß—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç:</b>
                ‚Ä¢ –°—Ä–µ–¥—Å—Ç–≤–∞ –±—É–¥—É—Ç —Å–ø–∏—Å–∞–Ω—ã —Å —Ä–∞–±–æ—á–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
                ‚Ä¢ –ë–æ—Ç –∫—É–ø–∏—Ç –∑–≤–µ–∑–¥—ã —á–µ—Ä–µ–∑ Telegram Fragment
                ‚Ä¢ –ó–≤–µ–∑–¥—ã –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç

                ‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –û–ø–µ—Ä–∞—Ü–∏—è –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞

                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
                """, stars, amount.getFormattedAmount(), currencySymbol);
    }

    /**
     * –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤
     */
    private String formatInsufficientFunds(Object data) {
        if (!(data instanceof InsufficientFundsData fundsData)) {
            throw new IllegalArgumentException("–û–∂–∏–¥–∞–ª—Å—è InsufficientFundsData –¥–ª—è INSUFFICIENT_FUNDS");
        }

        DualBalanceResponse balance = fundsData.balance;
        Money required = fundsData.required;
        int requestedStars = fundsData.requestedStars;

        StringBuilder message = new StringBuilder();
        String currencySymbol = balance.getCurrency().getSymbol();

        message.append("‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n");
        message.append(String.format("‚≠ê <b>–ó–∞–ø—Ä–æ—à–µ–Ω–æ:</b> %d –∑–≤–µ–∑–¥\n", requestedStars));
        message.append(String.format("üí∞ <b>–¢—Ä–µ–±—É–µ—Ç—Å—è:</b> %s %s\n",
                required.getFormattedAmount(), currencySymbol));
        message.append(String.format("üíº <b>–î–æ—Å—Ç—É–ø–Ω–æ:</b> %s %s\n\n",
                balance.getTotalBalance().getFormattedAmount(), currencySymbol));

        Money shortfall = required.subtract(balance.getTotalBalance());
        message.append(String.format("üí∏ <b>–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç:</b> %s %s\n\n",
                shortfall.getFormattedAmount(), currencySymbol));

        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—é
        message.append("üí° <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n");
        if (balance.hasBankFunds() && !balance.hasMainFunds()) {
            message.append("‚Ä¢ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –≤ —Ä–∞–±–æ—á–∏–π –±–∞–ª–∞–Ω—Å\n");
        }
        message.append("‚Ä¢ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –æ–¥–Ω–∏–º –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤:\n");

        List<String> paymentMethods = getAvailablePaymentMethods(balance);
        for (String method : paymentMethods) {
            message.append(String.format("  - %s\n", method));
        }

        if (paymentMethods.isEmpty()) {
            message.append("  - –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n");
        }

        message.append("\nü§ñ <i>–ü–æ—Å–ª–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ—Ç —Å–º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã –∑–∞ –≤–∞—Å</i>");

        return message.toString();
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –∑–≤–µ–∑–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–ª–∞–Ω—Å–∞
     */
    private List<StarPackage> getAvailablePackages(DualBalanceResponse balance) {
        List<StarPackage> available = new ArrayList<>();

        for (StarPackage pkg : STAR_PACKAGES) {
            Money packagePrice = Money.of(pkg.price);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –ø–∞–∫–µ—Ç—ã, –Ω–æ –ø–æ–º–µ—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
            if (pkg.stars >= paymentConfig.getFragment().getMinStarsAmount() &&
                    pkg.stars <= paymentConfig.getFragment().getMaxStarsAmount()) {
                available.add(pkg);
            }
        }

        return available;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã
     */
    private List<String> getAvailablePaymentMethods(DualBalanceResponse balance) {
        return PaymentMethodsHelper.getAvailablePaymentMethods(balance.getCurrency(), paymentConfig);
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö

    public static class BalanceCheckData {
        public final DualBalanceResponse balance;
        public final int requestedStars;
        public final Money requiredAmount;

        public BalanceCheckData(DualBalanceResponse balance, int requestedStars, Money requiredAmount) {
            this.balance = balance;
            this.requestedStars = requestedStars;
            this.requiredAmount = requiredAmount;
        }
    }

    public static class PurchaseConfirmationData {
        public final int stars;
        public final Money amount;
        public final String currencySymbol;

        public PurchaseConfirmationData(int stars, Money amount, String currencySymbol) {
            this.stars = stars;
            this.amount = amount;
            this.currencySymbol = currencySymbol;
        }
    }

    public static class InsufficientFundsData {
        public final DualBalanceResponse balance;
        public final Money required;
        public final int requestedStars;

        public InsufficientFundsData(DualBalanceResponse balance, Money required, int requestedStars) {
            this.balance = balance;
            this.required = required;
            this.requestedStars = requestedStars;
        }
    }

    /**
     * –ü–∞–∫–µ—Ç –∑–≤–µ–∑–¥ —Å —Ü–µ–Ω–æ–π
     */
    private static class StarPackage {
        public final int stars;
        public final BigDecimal price;

        public StarPackage(int stars, BigDecimal price) {
            this.stars = stars;
            this.price = price;
        }
    }
}