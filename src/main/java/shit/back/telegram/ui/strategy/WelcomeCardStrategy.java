package shit.back.telegram.ui.strategy;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import shit.back.application.balance.dto.response.DualBalanceResponse;
import shit.back.config.PaymentConfigurationProperties;
import shit.back.domain.balance.valueobjects.Currency;
import shit.back.telegram.ui.strategy.utils.PaymentMethodsHelper;

import java.util.List;

/**
 * –°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
 *
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —É–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –æ–±—â–∏–º –±–∞–ª–∞–Ω—Å–æ–º –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
 * –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.
 * –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è dual balance —Å–∫—Ä—ã—Ç–∞ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
 */
@Component
public class WelcomeCardStrategy implements TelegramMessageStrategy {

    private static final String STRATEGY_TYPE = "WELCOME_CARD";
    private static final String[] SUPPORTED_TYPES = {
            "USER_WELCOME_CARD", "PAYMENT_METHODS_CARD", "ONBOARDING_CARD"
    };

    @Autowired
    private PaymentConfigurationProperties paymentConfig;

    @Override
    public String getStrategyType() {
        return STRATEGY_TYPE;
    }

    @Override
    public boolean canHandle(String contentType) {
        if (contentType == null)
            return false;
        for (String type : SUPPORTED_TYPES) {
            if (type.equals(contentType))
                return true;
        }
        return false;
    }

    @Override
    public String[] getSupportedContentTypes() {
        return SUPPORTED_TYPES.clone();
    }

    @Override
    public String formatContent(String contentType, Object data) {
        return switch (contentType) {
            case "USER_WELCOME_CARD" -> formatUserWelcomeCard(data);
            case "PAYMENT_METHODS_CARD" -> formatPaymentMethodsCard(data);
            case "ONBOARDING_CARD" -> formatOnboardingCard(data);
            default -> throw new IllegalArgumentException("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞: " + contentType);
        };
    }

    /**
     * –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–∞–ª–∞–Ω—Å–æ–º
     */
    private String formatUserWelcomeCard(Object data) {
        WelcomeCardData cardData = parseWelcomeCardData(data);

        StringBuilder message = new StringBuilder();
        message.append(String.format("üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s!</b>\n\n", cardData.userName));

        // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∞–ª–∞–Ω—Å–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if (cardData.balance != null) {
            String currencySymbol = cardData.balance.getCurrency().getSymbol();
            boolean hasBalance = cardData.balance.getTotalBalance().isPositive();

            if (hasBalance) {
                message.append(String.format("üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> %s %s\n\n",
                        cardData.balance.getTotalBalance().getFormattedAmount(), currencySymbol));
                message.append("‚úÖ <b>–ì–æ—Ç–æ–≤–æ –∫ –ø–æ–∫—É–ø–∫–µ –∑–≤–µ–∑–¥!</b>\n\n");
            } else {
                message.append("üí∞ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> 0,00 ").append(currencySymbol).append("\n\n");
                message.append("üöÄ <i>–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–≤–µ–∑–¥!</i>\n\n");
            }
        }

        // –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–∏—Å—Ç–µ–º–∞
        message.append("‚≠ê <b>–ö–∞–∫ –ø–æ–∫—É–ø–∞—Ç—å –∑–≤–µ–∑–¥—ã:</b>\n");
        message.append("1Ô∏è‚É£ –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º\n");
        message.append("2Ô∏è‚É£ –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫—É–ø–∞–µ—Ç –∑–≤–µ–∑–¥—ã –ó–ê –≤–∞—Å\n");
        message.append("3Ô∏è‚É£ –ó–≤–µ–∑–¥—ã –∑–∞—á–∏—Å–ª—è—é—Ç—Å—è –Ω–∞ –≤–∞—à Telegram –∞–∫–∫–∞—É–Ω—Ç\n\n");

        // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        Currency userCurrency = cardData.balance != null ? cardData.balance.getCurrency() : Currency.defaultCurrency();
        List<String> paymentMethods = PaymentMethodsHelper.getAvailablePaymentMethods(userCurrency, paymentConfig);

        if (!paymentMethods.isEmpty()) {
            message.append("üí≥ <b>–°–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>\n");
            for (String method : paymentMethods) {
                message.append(String.format("‚Ä¢ %s\n", method));
            }
        } else {
            message.append("‚ö†Ô∏è <i>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</i>");
        }

        return message.toString();
    }

    /**
     * –ö–∞—Ä—Ç–æ—á–∫–∞ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã
     */
    private String formatPaymentMethodsCard(Object data) {
        Currency currency = data instanceof Currency ? (Currency) data : Currency.defaultCurrency();

        StringBuilder message = new StringBuilder();
        message.append("üí≥ <b>–°–ø–æ—Å–æ–±—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞</b>\n\n");

        List<PaymentMethodsHelper.PaymentMethodInfo> methods = PaymentMethodsHelper.getDetailedPaymentMethods(currency,
                paymentConfig);

        if (methods.isEmpty()) {
            message.append("‚ö†Ô∏è <i>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã –¥–ª—è –≤–∞–ª—é—Ç—ã </i>");
            message.append(currency.getFormattedName()).append("\n\n");
            message.append("üí° –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–ø–æ—Å–æ–±–æ–≤ –æ–ø–ª–∞—Ç—ã");
            return message.toString();
        }

        for (PaymentMethodsHelper.PaymentMethodInfo method : methods) {
            message.append(String.format("‚Ä¢ %s\n", method.getDisplayName()));
            message.append(String.format("  üí± <i>%s</i>\n", method.getDescription()));
            if (method.hasLimits()) {
                message.append(String.format("  üìä <i>%s</i>\n", method.getLimitsText()));
            }
            message.append("\n");
        }

        message.append("ü§ñ <b>–í–∞–∂–Ω–æ:</b> –ë–æ—Ç –ø–æ–∫—É–ø–∞–µ—Ç –∑–≤–µ–∑–¥—ã —á–µ—Ä–µ–∑ Telegram Fragment,\n");
        message.append("–∏—Å–ø–æ–ª—å–∑—É—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ –≤–∞—à–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è");

        return message.toString();
    }

    /**
     * –û–±—É—á–∞—é—â–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
     */
    private String formatOnboardingCard(Object data) {
        String userName = data instanceof String ? (String) data : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";

        return String.format("""
                üéØ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Star Manager, %s!</b>

                ‚≠ê <b>–ß—Ç–æ —ç—Ç–æ –∑–∞ –±–æ—Ç?</b>
                –£–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–∫—É–ø–∫–∏ Telegram Stars –±–µ–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π —Å –æ–ø–ª–∞—Ç–æ–π

                üîÑ <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç?</b>
                ‚Ä¢ –í—ã –ø–æ–ø–æ–ª–Ω—è–µ—Ç–µ –±–∞–ª–∞–Ω—Å –ø—Ä–∏–≤—ã—á–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                ‚Ä¢ –ú—ã –ø–æ–∫—É–ø–∞–µ–º –∑–≤–µ–∑–¥—ã –ó–ê –≤–∞—Å —á–µ—Ä–µ–∑ Telegram
                ‚Ä¢ –ó–≤–µ–∑–¥—ã –ø—Ä–∏—Ö–æ–¥—è—Ç –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç

                üí° <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
                ‚Ä¢ –ù–µ –Ω—É–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å –∫–∞—Ä—Ç—É –∫–∞–∂–¥—ã–π —Ä–∞–∑
                ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ —á–µ—Ä–µ–∑ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
                ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–∫—É–ø–∫–∞ –∑–≤–µ–∑–¥
                ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π

                üöÄ <b>–ù–∞—á–Ω–∏—Ç–µ —Å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!</b>

                ‚ùì –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏
                """, userName);
    }

    // –ú–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –≤ PaymentMethodsHelper

    /**
     * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
     */
    private WelcomeCardData parseWelcomeCardData(Object data) {
        if (data instanceof WelcomeCardData) {
            return (WelcomeCardData) data;
        }
        if (data instanceof String) {
            return new WelcomeCardData((String) data, null);
        }
        throw new IllegalArgumentException("–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –¥–ª—è USER_WELCOME_CARD");
    }

    /**
     * –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏
     */
    public static class WelcomeCardData {
        public final String userName;
        public final DualBalanceResponse balance;

        public WelcomeCardData(String userName, DualBalanceResponse balance) {
            this.userName = userName != null ? userName : "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
            this.balance = balance;
        }
    }

    // PaymentMethodInfo –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ PaymentMethodsHelper
}