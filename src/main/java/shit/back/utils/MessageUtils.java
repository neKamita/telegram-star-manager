package shit.back.utils;

import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import shit.back.entity.BalanceTransactionEntity;
import shit.back.entity.UserBalanceEntity;
import shit.back.model.StarPackage;
import shit.back.model.Order;

import java.math.BigDecimal;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;

public class MessageUtils {

    public static SendMessage createMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(String.valueOf(chatId));
        message.setText(text);
        message.setParseMode("HTML");
        return message;
    }

    public static SendMessage createMessageWithKeyboard(Long chatId, String text, InlineKeyboardMarkup keyboard) {
        SendMessage message = createMessage(chatId, text);
        message.setReplyMarkup(keyboard);
        return message;
    }

    public static EditMessageText createEditMessage(Long chatId, Integer messageId, String text) {
        EditMessageText editMessage = new EditMessageText();
        editMessage.setChatId(String.valueOf(chatId));
        editMessage.setMessageId(messageId);
        editMessage.setText(text);
        editMessage.setParseMode("HTML");
        return editMessage;
    }

    public static EditMessageText createEditMessageWithKeyboard(Long chatId, Integer messageId, String text,
            InlineKeyboardMarkup keyboard) {
        EditMessageText editMessage = createEditMessage(chatId, messageId, text);
        editMessage.setReplyMarkup(keyboard);
        return editMessage;
    }

    public static InlineKeyboardMarkup createMainMenuKeyboard() {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –ø–æ–∫—É–ø–∫–∏
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createButton("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", "buy_stars"));
        row1.add(createButton("üìä –¢–∞—Ä–∏—Ñ—ã", "show_prices"));
        rows.add(row1);

        // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –±–∞–ª–∞–Ω—Å
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createButton("üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å", "show_balance"));
        row2.add(createButton("üìà –ò—Å—Ç–æ—Ä–∏—è", "show_balance_history"));
        rows.add(row2);

        // –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        List<InlineKeyboardButton> row3 = new ArrayList<>();
        row3.add(createButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", "my_orders"));
        row3.add(createButton("‚ùì –ü–æ–º–æ—â—å", "help"));
        rows.add(row3);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    public static InlineKeyboardMarkup createPackageSelectionKeyboard(List<StarPackage> packages) {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        for (StarPackage pkg : packages) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            String buttonText = String.format("‚≠ê %d - $%.2f", pkg.getStars(), pkg.getDiscountedPrice());
            row.add(createButton(buttonText, "select_package_" + pkg.getPackageId()));
            rows.add(row);
        }

        // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        List<InlineKeyboardButton> backRow = new ArrayList<>();
        backRow.add(createButton("üîô –ù–∞–∑–∞–¥", "back_to_main"));
        rows.add(backRow);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    public static InlineKeyboardMarkup createOrderConfirmationKeyboard(String orderId) {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", "confirm_order_" + orderId));
        rows.add(row1);

        // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createButton("üîô –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", "buy_stars"));
        row2.add(createButton("‚ùå –û—Ç–º–µ–Ω–∞", "cancel_order"));
        rows.add(row2);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    public static InlineKeyboardMarkup createPaymentKeyboard(String orderId) {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã (–∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –±—É–¥—É—â–µ–≥–æ)
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createButton("üíé TON Wallet", "pay_ton_" + orderId));
        rows.add(row1);

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createButton("‚Çø Crypto", "pay_crypto_" + orderId));
        rows.add(row2);

        // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂
        List<InlineKeyboardButton> row3 = new ArrayList<>();
        row3.add(createButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂", "check_payment_" + orderId));
        rows.add(row3);

        // –û—Ç–º–µ–Ω–∞
        List<InlineKeyboardButton> row4 = new ArrayList<>();
        row4.add(createButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", "cancel_order_" + orderId));
        rows.add(row4);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –æ–ø–ª–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –±–∞–ª–∞–Ω—Å–∞
     */
    public static InlineKeyboardMarkup createPaymentKeyboardWithBalance(String orderId, BigDecimal orderAmount,
            BigDecimal userBalance) {
        return createPaymentMethodKeyboard(orderId, orderAmount, userBalance);
    }

    public static InlineKeyboardMarkup createBackToMainKeyboard() {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<InlineKeyboardButton> row = new ArrayList<>();
        row.add(createButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"));
        rows.add(row);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    public static InlineKeyboardMarkup createMyOrdersKeyboard() {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createButton("üí∞ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", "buy_stars"));
        rows.add(row1);

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"));
        rows.add(row2);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    public static InlineKeyboardMarkup createHelpKeyboard() {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –ü–æ–ª–µ–∑–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createButton("üí∞ –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", "buy_stars"));
        row1.add(createButton("üìä –¢–∞—Ä–∏—Ñ—ã", "show_prices"));
        rows.add(row1);

        // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"));
        rows.add(row2);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private static InlineKeyboardButton createButton(String text, String callbackData) {
        InlineKeyboardButton button = new InlineKeyboardButton();
        button.setText(text);
        button.setCallbackData(callbackData);
        return button;
    }

    public static String formatWelcomeMessage(String userName) {
        return String.format("""
                üåü <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StarBot, %s!</b>

                üí´ –ü–æ–∫—É–ø–∞–π—Ç–µ Telegram Stars —Å –≤—ã–≥–æ–¥–æ–π –¥–æ <b>15%%</b>!

                üéØ <b>–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
                ‚Ä¢ –ù–∏–∑–∫–∏–µ —Ü–µ–Ω—ã - —ç–∫–æ–Ω–æ–º—å—Ç–µ –Ω–∞ –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–µ
                ‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∑–≤–µ–∑–¥ –Ω–∞ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç
                ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∏
                ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7

                üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
                """, userName);
    }

    public static String formatPricesMessage(List<StarPackage> packages) {
        StringBuilder sb = new StringBuilder();
        sb.append("üí∞ <b>–ù–∞—à–∏ —Ç–∞—Ä–∏—Ñ—ã –Ω–∞ Telegram Stars:</b>\n\n");

        for (StarPackage pkg : packages) {
            sb.append(String.format(
                    "‚≠ê <b>%d –∑–≤–µ–∑–¥</b>\n" +
                            "üíµ –¶–µ–Ω–∞: <b>$%.2f</b> <s>$%.2f</s>\n" +
                            "üí∏ –≠–∫–æ–Ω–æ–º–∏—è: <b>$%.2f (%d%%)</b>\n\n",
                    pkg.getStars(),
                    pkg.getDiscountedPrice(),
                    pkg.getOriginalPrice(),
                    pkg.getSavings(),
                    pkg.getDiscountPercent()));
        }

        sb.append("üéÅ <i>–ß–µ–º –±–æ–ª—å—à–µ –ø–æ–∫—É–ø–∞–µ—Ç–µ - —Ç–µ–º –±–æ–ª—å—à–µ —ç–∫–æ–Ω–æ–º–∏—Ç–µ!</i>");
        return sb.toString();
    }

    public static String formatOrderConfirmation(Order order) {
        return String.format("""
                üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ %s</b>

                ‚≠ê –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥: <b>%d</b>
                üí∞ –ö –æ–ø–ª–∞—Ç–µ: <b>$%.2f</b>
                üí∏ –≠–∫–æ–Ω–æ–º–∏—è: <b>$%.2f</b>

                üî• <i>–í—ã —ç–∫–æ–Ω–æ–º–∏—Ç–µ %d%% –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π —Ü–µ–Ω–æ–π!</i>

                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑?
                """,
                order.getFormattedOrderId(),
                order.getStarPackage().getStars(),
                order.getAmount(),
                order.getStarPackage().getSavings(),
                order.getStarPackage().getDiscountPercent());
    }

    public static String formatPaymentMessage(Order order) {
        return String.format("""
                üí≥ <b>–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ %s</b>

                ‚≠ê –ó–≤–µ–∑–¥—ã: <b>%d</b>
                üí∞ –°—É–º–º–∞: <b>$%.2f</b>

                üîí –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:

                <i>‚ö†Ô∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂"</i>
                """,
                order.getFormattedOrderId(),
                order.getStarPackage().getStars(),
                order.getAmount());
    }

    public static String formatHelpMessage() {
        return """
                ‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞</b>

                üéØ <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
                üîπ <b>/start</b> - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                üîπ <b>/help</b> - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
                üîπ <b>/prices</b> - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–∞—Ä–∏—Ñ—ã
                üîπ <b>/status</b> - —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞

                üí∞ <b>–ö–æ–º–∞–Ω–¥—ã –±–∞–ª–∞–Ω—Å–∞:</b>
                üîπ <b>/balance</b> - –ø–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å
                üîπ <b>/topup</b> - –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å
                üîπ <b>/history</b> - –∏—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π

                üí° <b>–ö–∞–∫ –∫—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã:</b>
                1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ "‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã"
                2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –ø–∞–∫–µ—Ç
                3Ô∏è‚É£ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑
                4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã (–±–∞–ª–∞–Ω—Å –∏–ª–∏ –≤–Ω–µ—à–Ω–∏–π)
                5Ô∏è‚É£ –ü—Ä–æ–∏–∑–≤–µ–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É
                6Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ –∑–≤–µ–∑–¥—ã!

                üè¶ <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –±–∞–ª–∞–Ω—Å–∞:</b>
                ‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞ –±–µ–∑ –≤–≤–æ–¥–∞ –∫–∞—Ä—Ç—ã
                ‚Ä¢ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
                ‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
                ‚Ä¢ –ë—ã—Å—Ç—Ä—ã–µ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏

                üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @support_bot
                """;
    }

    // ============================================
    // === –ù–û–í–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –°–ò–°–¢–ï–ú–´ –ë–ê–õ–ê–ù–°–ê ===
    // ============================================

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–∞–ª–∞–Ω—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    public static String createBalanceInfoMessage(UserBalanceEntity balance, String userName) {
        return String.format("""
                üí∞ <b>–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s</b>

                üíµ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> %.2f ‚ÇΩ
                üìà <b>–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ:</b> %.2f ‚ÇΩ
                üìâ <b>–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:</b> %.2f ‚ÇΩ
                üîÑ <b>–û–±—â–∏–π –æ–±–æ—Ä–æ—Ç:</b> %.2f ‚ÇΩ
                üí± <b>–í–∞–ª—é—Ç–∞:</b> %s

                üìÖ <b>–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:</b> %s

                üí° <i>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–∫—É–ø–æ–∫ –±–µ–∑ –≤–≤–æ–¥–∞ –ø–ª–∞—Ç–µ–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!</i>
                """,
                userName,
                balance.getCurrentBalance(),
                balance.getTotalDeposited(),
                balance.getTotalSpent(),
                balance.getTotalTurnover(),
                balance.getCurrency(),
                balance.getLastUpdated().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")));
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
     */
    public static String createTopupMessage(UserBalanceEntity balance) {
        return String.format("""
                üí≥ <b>–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>

                üí∞ <b>–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:</b> %.2f ‚ÇΩ

                üí° <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è:</b>

                üéØ <i>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∑–∞—Ä–∞–Ω–µ–µ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –ø–æ–∫—É–ø–æ–∫!</i>
                """,
                balance.getCurrentBalance());
    }

    /**
     * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–∞–ª–∞–Ω—Å–∞
     */
    public static String createBalanceHistoryMessage(List<BalanceTransactionEntity> transactions, String userName) {
        StringBuilder sb = new StringBuilder();
        sb.append(String.format("üìä <b>–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π %s</b>\n\n", userName));

        if (transactions.isEmpty()) {
            sb.append("üì≠ <i>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.</i>\n\n");
            sb.append("üí° –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –¥–ª—è —É–¥–æ–±–Ω—ã—Ö –ø–æ–∫—É–ø–æ–∫!");
        } else {
            sb.append(String.format("üìà <b>–ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö %d –æ–ø–µ—Ä–∞—Ü–∏–π:</b>\n\n", transactions.size()));

            for (BalanceTransactionEntity transaction : transactions) {
                String typeIcon = getTransactionTypeIcon(transaction.getType());
                String statusIcon = getTransactionStatusIcon(transaction.getStatus());

                sb.append(String.format(
                        "%s %s <b>%.2f ‚ÇΩ</b>\n" +
                                "üî∏ %s\n" +
                                "üìÖ %s\n" +
                                "üÜî <code>%s</code>\n\n",
                        typeIcon, statusIcon,
                        transaction.getAmount(),
                        transaction.getDescription(),
                        transaction.getCreatedAt().format(DateTimeFormatter.ofPattern("dd.MM.yyyy HH:mm")),
                        transaction.getTransactionId()));
            }

            sb.append("üí° <i>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø–∞–Ω–µ–ª—å</i>");
        }

        return sb.toString();
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –±–∞–ª–∞–Ω—Å–∞
     */
    public static InlineKeyboardMarkup createBalanceMenuKeyboard() {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ - –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createButton("üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å", "topup_balance_menu"));
        row1.add(createButton("üìä –ò—Å—Ç–æ—Ä–∏—è", "show_balance_history"));
        rows.add(row1);

        // –í—Ç–æ—Ä–∞—è —Å—Ç—Ä–æ–∫–∞ - –ø–æ–∫—É–ø–∫–∏
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createButton("‚≠ê –ö—É–ø–∏—Ç—å –∑–≤–µ–∑–¥—ã", "buy_stars"));
        rows.add(row2);

        // –¢—Ä–µ—Ç—å—è —Å—Ç—Ä–æ–∫–∞ - –≤–æ–∑–≤—Ä–∞—Ç
        List<InlineKeyboardButton> row3 = new ArrayList<>();
        row3.add(createButton("üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "back_to_main"));
        rows.add(row3);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
     */
    public static InlineKeyboardMarkup createTopupKeyboard() {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –í–∞—Ä–∏–∞–Ω—Ç—ã —Å—É–º–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createButton("üí∏ 100 ‚ÇΩ", "topup_balance_100"));
        row1.add(createButton("üí∞ 500 ‚ÇΩ", "topup_balance_500"));
        rows.add(row1);

        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createButton("üíé 1000 ‚ÇΩ", "topup_balance_1000"));
        row2.add(createButton("üèÜ 2000 ‚ÇΩ", "topup_balance_2000"));
        rows.add(row2);

        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è —Å—É–º–º–∞ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
        List<InlineKeyboardButton> row3 = new ArrayList<>();
        row3.add(createButton("‚úèÔ∏è –î—Ä—É–≥–∞—è —Å—É–º–º–∞", "topup_balance_custom"));
        rows.add(row3);

        // –í–æ–∑–≤—Ä–∞—Ç
        List<InlineKeyboardButton> row4 = new ArrayList<>();
        row4.add(createButton("üîô –ù–∞–∑–∞–¥ –∫ –±–∞–ª–∞–Ω—Å—É", "back_to_balance"));
        rows.add(row4);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
     */
    public static InlineKeyboardMarkup createBalanceHistoryKeyboard() {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –î–µ–π—Å—Ç–≤–∏—è —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        List<InlineKeyboardButton> row1 = new ArrayList<>();
        row1.add(createButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", "refresh_balance_history"));
        row1.add(createButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç", "export_balance_history"));
        rows.add(row1);

        // –í–æ–∑–≤—Ä–∞—Ç
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createButton("üîô –ù–∞–∑–∞–¥ –∫ –±–∞–ª–∞–Ω—Å—É", "back_to_balance"));
        rows.add(row2);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    /**
     * –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
     */
    public static InlineKeyboardMarkup createPaymentMethodKeyboard(String orderId, BigDecimal amount,
            BigDecimal userBalance) {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        // –û–ø–ª–∞—Ç–∞ –±–∞–ª–∞–Ω—Å–æ–º (–µ—Å–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤)
        if (userBalance.compareTo(amount) >= 0) {
            List<InlineKeyboardButton> row1 = new ArrayList<>();
            row1.add(createButton(String.format("üí∞ –û–ø–ª–∞—Ç–∏—Ç—å –±–∞–ª–∞–Ω—Å–æ–º (%.2f ‚ÇΩ)", userBalance),
                    "balance_payment_" + orderId));
            rows.add(row1);
        }

        // –í–Ω–µ—à–Ω–∏–µ —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
        List<InlineKeyboardButton> row2 = new ArrayList<>();
        row2.add(createButton("üíé TON Wallet", "pay_ton_" + orderId));
        row2.add(createButton("‚Çø Crypto", "pay_crypto_" + orderId));
        rows.add(row2);

        // –°–º–µ—à–∞–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞ (–µ—Å–ª–∏ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–æ –µ—Å—Ç—å —á–∞—Å—Ç–∏—á–Ω–∞—è —Å—É–º–º–∞)
        if (userBalance.compareTo(BigDecimal.ZERO) > 0 && userBalance.compareTo(amount) < 0) {
            List<InlineKeyboardButton> row3 = new ArrayList<>();
            BigDecimal remaining = amount.subtract(userBalance);
            row3.add(createButton(String.format("üîÑ –°–º–µ—à–∞–Ω–Ω–∞—è –æ–ø–ª–∞—Ç–∞ (%.2f ‚ÇΩ + %.2f ‚ÇΩ)",
                    userBalance, remaining), "mixed_payment_" + orderId));
            rows.add(row3);
        }

        // –û—Ç–º–µ–Ω–∞
        List<InlineKeyboardButton> row4 = new ArrayList<>();
        row4.add(createButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_order_" + orderId));
        rows.add(row4);

        keyboard.setKeyboard(rows);
        return keyboard;
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     */
    private static String getTransactionTypeIcon(shit.back.entity.TransactionType type) {
        return switch (type) {
            case DEPOSIT -> "üì•";
            case WITHDRAWAL -> "üì§";
            case PURCHASE -> "üõí";
            case REFUND -> "‚Ü©Ô∏è";
            case ADJUSTMENT -> "‚öñÔ∏è";
        };
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
     */
    private static String getTransactionStatusIcon(shit.back.entity.TransactionStatus status) {
        return switch (status) {
            case PENDING -> "‚è≥";
            case COMPLETED -> "‚úÖ";
            case CANCELLED -> "‚ùå";
            case FAILED -> "üí•";
        };
    }

}
