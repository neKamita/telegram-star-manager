# ============================================
# БАЗОВАЯ КОНФИГУРАЦИЯ ПРИЛОЖЕНИЯ
# ============================================

# Название приложения
spring.application.name=TelegramStarManager

# Активные профили
spring.profiles.active=${SPRING_PROFILES_ACTIVE:dev}

# Конфигурация сервера
server.port=${SERVER_PORT:8080}
server.servlet.context-path=/
server.compression.enabled=true
server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript,application/json

# HTTPS конфигурация
server.forward-headers-strategy=framework

# Основные настройки Spring
spring.main.allow-circular-references=false
spring.main.lazy-initialization=${SPRING_LAZY_INITIALIZATION:false}
spring.jmx.enabled=${SPRING_JMX_ENABLED:true}

# JSON конфигурация
spring.jackson.property-naming-strategy=SNAKE_CASE
spring.jackson.default-property-inclusion=NON_NULL
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.deserialization.fail-on-unknown-properties=false

# Конфигурация логирования
logging.level.shit.back=${LOGGING_LEVEL:INFO}
logging.level.org.telegram=WARN
logging.level.root=${LOGGING_LEVEL:INFO}
logging.level.org.springframework=${SPRING_LOG_LEVEL:WARN}
logging.level.org.hibernate=${HIBERNATE_LOG_LEVEL:WARN}
logging.pattern.console=%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n

# БЕЗОПАСНОСТЬ (SECURITY)
# ============================================

# API безопасность
security.api.enabled=${SECURITY_API_ENABLED:true}
security.api.key=${API_SECRET_KEY}
security.api.header-name=X-API-KEY

# Rate Limiting
security.rate-limit.enabled=${RATE_LIMIT_ENABLED:true}
security.rate-limit.user-requests-per-minute=${RATE_LIMIT_USER_REQURESTS_PER_MINUTE:10}
security.rate-limit.api-requests-per-minute=${RATE_LIMIT_API_REQUESTS_PER_MINUTE:100}
security.rate-limit.cleanup-interval=60000

# Валидация
security.validation.enabled=${SECURITY_VALIDATION_ENABLED:true}
security.validation.max-message-length=4096
security.validation.max-callback-data-length=64
security.validation.allowed-callback-prefixes=buy_stars,show_prices,help,my_orders,back_to_main,select_package_,confirm_order_,cancel_order,pay_ton_,pay_crypto_,check_payment_,show_balance,topup_balance_menu,topup_balance_,show_balance_history,refresh_balance_history,back_to_balance,balance_payment_,mixed_payment_,export_balance_history,topup_balance_custom,topup_ton_,topup_yookassa_,topup_fragment_,topup_uzs_,test_payment_

# Аудит безопасности
security.audit.enabled=${SECURITY_AUDIT_ENABLED:true}
security.audit.log-level=${SECURITY_LOG_LEVEL:INFO}
security.audit.log-sensitive-data=false

# CORS настройки
security.cors.enabled=${SECURITY_CORS_ENABLED:true}
security.cors.allowed-origins=${SECURITY_CORS_ALLOWED_ORIGINS:http://localhost:3000,http://localhost:8080}
security.cors.allowed-methods=${SECURITY_CORS_ALLOWED_METHODS:GET,POST,PUT,DELETE,OPTIONS}
security.cors.allowed-headers=${SECURITY_CORS_ALLOWED_HEADERS:Content-Type,Authorization,X-API-KEY}
security.cors.max-age=${SECURITY_CORS_MAX_AGE:3600}


# ============================================
# КОНФИГУРАЦИЯ БАЗЫ ДАННЫХ (DATABASE)
# ============================================

spring.datasource.url=${DATABASE_URL}
spring.datasource.driver-class-name=${DATABASE_DRIVER:org.postgresql.Driver}
# Отдельные переменные для credentials (безопасность)
spring.datasource.username=${DATABASE_USERNAME}
spring.datasource.password=${DATABASE_PASSWORD}

# JPA конфигурация
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.open-in-view=${JPA_OPEN_IN_VIEW:true}

# H2 консоль (отключена, используется PostgreSQL)
# spring.h2.console.enabled=${H2_CONSOLE_ENABLED:false}
# spring.h2.console.path=/h2-console
# spring.h2.console.settings.web-allow-others=false

# Connection Pool настройки (ОПТИМИЗИРОВАНО)
spring.datasource.hikari.maximum-pool-size=20
spring.datasource.hikari.minimum-idle=${DB_POOL_MIN_IDLE:2}
spring.datasource.hikari.connection-timeout=10000
spring.datasource.hikari.idle-timeout=${DB_IDLE_TIMEOUT:600000}
spring.datasource.hikari.max-lifetime=${DB_MAX_LIFETIME:1800000}
spring.datasource.hikari.leak-detection-threshold=120000

# JPA производительность (ОПТИМИЗИРОВАНО)
spring.jpa.properties.hibernate.jdbc.batch_size=25
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# PostgreSQL специфичные настройки
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
# Обновленная настройка для Hibernate 5.4+
spring.jpa.properties.hibernate.boot.allow_jdbc_metadata_access=true

# Redis конфигурация
spring.data.redis.host=${REDIS_HOST:localhost}
spring.data.redis.port=${REDIS_PORT:6379}
spring.data.redis.password=${REDIS_PASSWORD:}
spring.data.redis.database=${REDIS_DATABASE:0}
spring.data.redis.timeout=${REDIS_TIMEOUT:2000ms}
spring.data.redis.lettuce.pool.max-active=${REDIS_POOL_MAX_ACTIVE:8}
spring.data.redis.lettuce.pool.max-wait=${REDIS_POOL_MAX_WAIT:-1ms}
spring.data.redis.lettuce.pool.max-idle=${REDIS_POOL_MAX_IDLE:8}
spring.data.redis.lettuce.pool.min-idle=${REDIS_POOL_MIN_IDLE:0}


# Общие настройки платежной системы
payment.general.callback-base-url=${PAYMENT_CALLBACK_BASE_URL:http://localhost:8080}
payment.general.payment-timeout-minutes=${PAYMENT_TIMEOUT_MINUTES:30}
payment.general.max-retry-attempts=${PAYMENT_MAX_RETRY_ATTEMPTS:3}
payment.general.retry-interval-minutes=${PAYMENT_RETRY_INTERVAL_MINUTES:5}
payment.general.enable-detailed-logging=${PAYMENT_ENABLE_DETAILED_LOGGING:true}
payment.general.callback-secret=${PAYMENT_CALLBACK_SECRET}

# TON Wallet настройки
payment.ton.enabled=${TON_ENABLED:false}
payment.ton.api-key=${TON_API_KEY}
payment.ton.secret-key=${TON_SECRET_KEY}
payment.ton.api-url=${TON_API_URL:https://toncenter.com/api/v3}
payment.ton.webhook-url=${TON_WEBHOOK_URL}
payment.ton.wallet-address=${TON_WALLET_ADDRESS}
payment.ton.network-fee-percent=${TON_NETWORK_FEE_PERCENT:1.0}

# YooKassa настройки
payment.yookassa.enabled=${YOOKASSA_ENABLED:false}
payment.yookassa.shop-id=${YOOKASSA_SHOP_ID}
payment.yookassa.secret-key=${YOOKASSA_SECRET_KEY}
payment.yookassa.api-url=${YOOKASSA_API_URL:https://api.yookassa.ru/v3}
payment.yookassa.webhook-url=${YOOKASSA_WEBHOOK_URL}
payment.yookassa.supported-methods=${YOOKASSA_SUPPORTED_METHODS:bank_card,yoo_money,sberbank,qiwi}
payment.yookassa.auto-capture=${YOOKASSA_AUTO_CAPTURE:true}
payment.yookassa.request-timeout-seconds=${YOOKASSA_REQUEST_TIMEOUT_SECONDS:30}

# QIWI настройки
payment.qiwi.enabled=${QIWI_ENABLED:false}
payment.qiwi.public-key=${QIWI_PUBLIC_KEY}
payment.qiwi.secret-key=${QIWI_SECRET_KEY}
payment.qiwi.api-url=${QIWI_API_URL:https://api.qiwi.com}
payment.qiwi.webhook-url=${QIWI_WEBHOOK_URL}
payment.qiwi.site-id=${QIWI_SITE_ID}
payment.qiwi.default-currency=${QIWI_DEFAULT_CURRENCY:RUB}
payment.qiwi.bill-lifetime-minutes=${QIWI_BILL_LIFETIME_MINUTES:60}

# SberPay настройки
payment.sberpay.enabled=${SBERPAY_ENABLED:false}
payment.sberpay.merchant-id=${SBERPAY_MERCHANT_ID}
payment.sberpay.secret-key=${SBERPAY_SECRET_KEY}
payment.sberpay.api-url=${SBERPAY_API_URL:https://securepayments.sberbank.ru}
payment.sberpay.webhook-url=${SBERPAY_WEBHOOK_URL}
payment.sberpay.api-login=${SBERPAY_API_LOGIN}
payment.sberpay.api-password=${SBERPAY_API_PASSWORD}
payment.sberpay.test-mode=${SBERPAY_TEST_MODE:true}
payment.sberpay.default-currency-code=${SBERPAY_DEFAULT_CURRENCY_CODE:643}


# SMTP настройки
spring.mail.host=${PAYMENT_SMTP_HOST:smtp.gmail.com}
spring.mail.port=${PAYMENT_SMTP_PORT:587}
spring.mail.username=${PAYMENT_SMTP_USERNAME}
spring.mail.password=${PAYMENT_SMTP_PASSWORD}
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true

# ============================================
# МЕТРИКИ И МОНИТОРИНГ (METRICS)
# ============================================

# Системные таймауты
app.system.timeouts.payment-timeout=${SYSTEM_PAYMENT_TIMEOUT:PT15M}
app.system.timeouts.sse-timeout=${SYSTEM_SSE_TIMEOUT:PT30M}
app.system.timeouts.balance-operation-timeout=${SYSTEM_BALANCE_TIMEOUT:PT30S}
app.system.timeouts.cleanup-interval=${SYSTEM_CLEANUP_INTERVAL:PT5M}

# Системные лимиты
app.system.limits.max-concurrent-balance-operations=${SYSTEM_MAX_CONCURRENT_BALANCE:5}
app.system.limits.max-sse-connections=${SYSTEM_MAX_SSE_CONNECTIONS:50}
app.system.limits.max-batch-order-size=${SYSTEM_MAX_BATCH_ORDER_SIZE:10}
app.system.limits.max-admin-notes-length=${SYSTEM_MAX_ADMIN_NOTES_LENGTH:1000}

# Системные URL
app.system.urls.webhook-base-url=${SYSTEM_WEBHOOK_BASE_URL:http://localhost:8080}
app.system.urls.payment-success-url=${SYSTEM_PAYMENT_SUCCESS_URL:${app.system.urls.webhook-base-url}/payment/success}
app.system.urls.payment-failure-url=${SYSTEM_PAYMENT_FAILURE_URL:${app.system.urls.webhook-base-url}/payment/failure}
app.system.urls.admin-panel-url=${SYSTEM_ADMIN_PANEL_URL:${app.system.urls.webhook-base-url}/admin}

# Системный кэш
app.system.cache.metrics-cache-ttl=${SYSTEM_CACHE_METRICS_TTL:PT5M}
app.system.cache.dashboard-cache-ttl=${SYSTEM_CACHE_DASHBOARD_TTL:PT2M}
app.system.cache.user-stats-cache-ttl=${SYSTEM_CACHE_USER_STATS_TTL:PT10M}
app.system.cache.max-cache-size=${SYSTEM_CACHE_MAX_SIZE:100}

# Сбор метрик
app.metrics.collection.cache-refresh-interval=${METRICS_CACHE_REFRESH_INTERVAL:PT10S}
app.metrics.collection.optimized-mode-enabled=${METRICS_OPTIMIZED_MODE:true}
app.metrics.collection.detailed-logging-enabled=${METRICS_DETAILED_LOGGING:true}
app.metrics.collection.max-execution-time=${METRICS_MAX_EXECUTION_TIME:PT10S}

# Производительность метрик
app.metrics.performance.base-response-time-ms=${METRICS_BASE_RESPONSE_TIME:30}
app.metrics.performance.response-time-variance-ms=${METRICS_RESPONSE_TIME_VARIANCE:20}
app.metrics.performance.base-memory-usage-percent=${METRICS_BASE_MEMORY_USAGE:50}
app.metrics.performance.memory-usage-variance-percent=${METRICS_MEMORY_USAGE_VARIANCE:15}
app.metrics.performance.min-cache-hit-ratio-percent=${METRICS_MIN_CACHE_HIT_RATIO:90}

# SSE метрики
app.metrics.sse.connection-timeout=${METRICS_SSE_CONNECTION_TIMEOUT:PT30M}
app.metrics.sse.max-active-connections=${METRICS_SSE_MAX_CONNECTIONS:50}
app.metrics.sse.heartbeat-interval=${METRICS_SSE_HEARTBEAT_INTERVAL:PT30S}
app.metrics.sse.auto-cleanup-enabled=${METRICS_SSE_AUTO_CLEANUP:true}

# Fallback метрики
app.metrics.fallback.base-health-score=${METRICS_FALLBACK_BASE_HEALTH_SCORE:80}
app.metrics.fallback.use-last-successful-metrics=${METRICS_FALLBACK_USE_LAST_SUCCESSFUL:true}
app.metrics.fallback.max-last-metrics-age-minutes=${METRICS_FALLBACK_MAX_AGE:5}
app.metrics.fallback.detailed-fallback-logging=${METRICS_FALLBACK_DETAILED_LOGGING:true}

# Management endpoints
management.endpoints.web.exposure.include=${MANAGEMENT_ENDPOINTS:health,info,metrics}
management.endpoint.health.show-details=${MANAGEMENT_HEALTH_DETAILS:always}
management.endpoint.health.show-components=${MANAGEMENT_HEALTH_COMPONENTS:always}
management.health.db.enabled=${MANAGEMENT_HEALTH_DB:true}
management.health.redis.enabled=${MANAGEMENT_HEALTH_REDIS:true}

# ============================================
# КЭШИРОВАНИЕ И ПРОИЗВОДИТЕЛЬНОСТЬ
# ============================================

# Spring Cache конфигурация - ИСПРАВЛЕНО для работы кэша
spring.cache.type=${CACHE_TYPE:caffeine}
spring.cache.cache-names=${CACHE_NAMES:admin_performance,admin_recent_activity,admin_dashboard_cache,systemHealth}
spring.cache.caffeine.spec=${CACHE_CAFFEINE_SPEC:maximumSize=100,expireAfterWrite=5m}

# Redis конфигурация с fallback
spring.data.redis.connect-timeout=${REDIS_CONNECT_TIMEOUT:2000ms}
spring.data.redis.command-timeout=${REDIS_COMMAND_TIMEOUT:1000ms}
# Добавляем обработку ошибок Redis
spring.data.redis.client-type=${REDIS_CLIENT_TYPE:lettuce}
spring.data.redis.lettuce.shutdown-timeout=${REDIS_SHUTDOWN_TIMEOUT:100ms}

# Асинхронная конфигурация
spring.task.execution.pool.core-size=${ASYNC_CORE_SIZE:2}
spring.task.execution.pool.max-size=${ASYNC_MAX_SIZE:4}
spring.task.execution.pool.queue-capacity=${ASYNC_QUEUE_CAPACITY:25}
spring.task.execution.thread-name-prefix=async-
spring.task.scheduling.pool.size=${SCHEDULING_POOL_SIZE:2}

# Tomcat оптимизация
server.tomcat.accept-count=${TOMCAT_ACCEPT_COUNT:100}
server.tomcat.max-connections=${TOMCAT_MAX_CONNECTIONS:8192}
server.tomcat.connection-timeout=${TOMCAT_CONNECTION_TIMEOUT:20000}

# Telegram Bot конфигурация
telegram.bot.token=${TELEGRAM_BOT_TOKEN}
telegram.bot.username=${TELEGRAM_BOT_USERNAME}
telegram.bot.webhook-url=${TELEGRAM_BOT_WEBHOOK_URL}

# Telegram Bot Self-Test
telegram.self-test.enabled=${TELEGRAM_SELF_TEST_ENABLED:true}
telegram.self-test.delay-seconds=${TELEGRAM_SELF_TEST_DELAY:60}

# ============================================
# ОПТИМИЗАЦИЯ ЛОГИРОВАНИЯ
# ============================================

# Отключение избыточных Tomcat DEBUG логов
logging.level.org.apache.tomcat=WARN
logging.level.org.apache.catalina=WARN
logging.level.com.zaxxer.hikari=WARN
logging.level.sun.rmi=OFF
logging.level.javax.management=OFF

# Отключение лишних DEBUG логов безопасности и сертификатов
logging.level.jdk.event.security=OFF
logging.level.org.apache.http=WARN
logging.level.org.apache.http.wire=WARN
logging.level.org.apache.http.headers=WARN
logging.level.org.postgresql=WARN
logging.level.org.hibernate.SQL=WARN

# Отключение избыточных Netty и Redis логов
logging.level.io.netty=WARN
logging.level.io.lettuce=WARN
logging.level.reactor=WARN

# Отключение лишних серверных логов
server.tomcat.accesslog.enabled=false
server.error.include-stacktrace=never
server.error.include-message=never

# Отключение избыточных Thymeleaf логов
logging.level.org.thymeleaf=WARN
logging.level.org.thymeleaf.TemplateEngine=ERROR
logging.level.org.thymeleaf.spring6=WARN

# Оптимизация фоновых задач
app.metrics.collection.interval=PT5M
