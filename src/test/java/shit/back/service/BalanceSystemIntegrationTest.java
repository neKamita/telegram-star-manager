package shit.back.service;

import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.transaction.annotation.Transactional;
import shit.back.entity.*;
import shit.back.repository.BalanceTransactionJpaRepository;
import shit.back.repository.UserBalanceJpaRepository;

import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import static org.junit.jupiter.api.Assertions.*;

/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –±–∞–ª–∞–Ω—Å–∞
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * ‚úÖ –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º
 * ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö
 * ‚úÖ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 * ‚úÖ –õ–∏–º–∏—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
 * ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω—É—é —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
 * ‚úÖ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
 */
@Slf4j
@SpringBootTest
@ActiveProfiles("test")
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
class BalanceSystemIntegrationTest {

    @Autowired
    private BalanceService balanceService;

    @Autowired
    private BalanceValidationService validationService;

    @Autowired
    private BalanceTransactionService transactionService;

    @Autowired
    private UserBalanceJpaRepository userBalanceRepository;

    @Autowired
    private BalanceTransactionJpaRepository transactionRepository;

    private static final Long TEST_USER_ID = 999999L;
    private static final Long TEST_USER_ID_2 = 999998L;
    private static final BigDecimal INITIAL_DEPOSIT = new BigDecimal("100.00");
    private static final BigDecimal TEST_AMOUNT = new BigDecimal("25.50");

    @BeforeEach
    void setUp() {
        log.info("üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
        // –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        List<BalanceTransactionEntity> userTransactions = transactionRepository
                .findByUserIdOrderByCreatedAtDesc(TEST_USER_ID);
        transactionRepository.deleteAll(userTransactions);

        List<BalanceTransactionEntity> userTransactions2 = transactionRepository
                .findByUserIdOrderByCreatedAtDesc(TEST_USER_ID_2);
        transactionRepository.deleteAll(userTransactions2);

        userBalanceRepository.findByUserId(TEST_USER_ID).ifPresent(userBalanceRepository::delete);
        userBalanceRepository.findByUserId(TEST_USER_ID_2).ifPresent(userBalanceRepository::delete);
    }

    @Test
    @Order(1)
    @DisplayName("üèóÔ∏è –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞")
    void testCreateNewBalance() {
        log.info("üß™ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞...");

        // –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        UserBalanceEntity balance = balanceService.getOrCreateBalance(TEST_USER_ID);

        // –ü—Ä–æ–≤–µ—Ä–∫–∏
        assertNotNull(balance, "–ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω");
        assertEquals(TEST_USER_ID, balance.getUserId(), "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å");
        assertEquals(BigDecimal.ZERO, balance.getCurrentBalance(), "–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 0");
        assertEquals("USD", balance.getCurrency(), "–í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å USD");
        assertTrue(balance.getIsActive(), "–ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–º");

        log.info("‚úÖ –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    }

    @Test
    @Order(2)
    @DisplayName("üí∞ –¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞")
    void testDepositBalance() {
        log.info("üß™ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞...");

        // –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        BalanceTransactionEntity transaction = balanceService.deposit(
                TEST_USER_ID, INITIAL_DEPOSIT, "TEST_CARD", "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ");

        // –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        assertNotNull(transaction, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞");
        assertEquals(TransactionType.DEPOSIT, transaction.getType(), "–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å DEPOSIT");
        assertEquals(TransactionStatus.COMPLETED, transaction.getStatus(), "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å COMPLETED");
        assertEquals(INITIAL_DEPOSIT, transaction.getAmount(), "–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å");

        // –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
        UserBalanceEntity balance = balanceService.getOrCreateBalance(TEST_USER_ID);
        assertEquals(INITIAL_DEPOSIT, balance.getCurrentBalance(), "–ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è");
        assertEquals(INITIAL_DEPOSIT, balance.getTotalDeposited(), "–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å");

        log.info("‚úÖ –¢–µ—Å—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    }

    @Test
    @Order(3)
    @DisplayName("üõí –¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å –±–∞–ª–∞–Ω—Å–∞")
    void testWithdrawBalance() {
        log.info("üß™ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å –±–∞–ª–∞–Ω—Å–∞...");

        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å
        balanceService.deposit(TEST_USER_ID, INITIAL_DEPOSIT, "TEST_CARD", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–µ—Å—Ç—É");

        // –°–ø–∏—Å–∞–Ω–∏–µ —Å –±–∞–ª–∞–Ω—Å–∞
        BalanceTransactionEntity transaction = balanceService.withdraw(
                TEST_USER_ID, TEST_AMOUNT, "–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞");

        // –ü—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        assertNotNull(transaction, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞");
        assertEquals(TransactionType.WITHDRAWAL, transaction.getType(), "–¢–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å WITHDRAWAL");
        assertEquals(TransactionStatus.COMPLETED, transaction.getStatus(), "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å COMPLETED");

        // –ü—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
        UserBalanceEntity balance = balanceService.getOrCreateBalance(TEST_USER_ID);
        BigDecimal expectedBalance = INITIAL_DEPOSIT.subtract(TEST_AMOUNT);
        assertEquals(expectedBalance, balance.getCurrentBalance(), "–ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω —É–º–µ–Ω—å—à–∏—Ç—å—Å—è");
        assertEquals(TEST_AMOUNT, balance.getTotalSpent(), "–û–±—â–∞—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç –¥–æ–ª–∂–Ω–∞ —Å–æ–≤–ø–∞–¥–∞—Ç—å");

        log.info("‚úÖ –¢–µ—Å—Ç —Å–ø–∏—Å–∞–Ω–∏—è —Å –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    }

    @Test
    @Order(4)
    @DisplayName("‚ùå –¢–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤")
    void testInsufficientFunds() {
        log.info("üß™ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤...");

        // –ü–æ–ø—ã—Ç–∫–∞ —Å–ø–∏—Å–∞—Ç—å –±–æ–ª—å—à–µ, —á–µ–º –µ—Å—Ç—å –Ω–∞ –±–∞–ª–∞–Ω—Å–µ
        BigDecimal largeAmount = new BigDecimal("1000.00");

        RuntimeException exception = assertThrows(RuntimeException.class, () -> {
            balanceService.withdraw(TEST_USER_ID, largeAmount, "–ü–æ–ø—ã—Ç–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –±–æ–ª—å—à–∏—Ö —Å—Ä–µ–¥—Å—Ç–≤");
        });

        assertTrue(exception.getMessage().contains("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤"),
                "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö");

        log.info("‚úÖ –¢–µ—Å—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    }

    @Test
    @Order(5)
    @DisplayName("üîÑ –¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤")
    void testRefundBalance() {
        log.info("üß™ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤...");

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞: –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ
        balanceService.deposit(TEST_USER_ID, INITIAL_DEPOSIT, "TEST_CARD", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞");
        balanceService.withdraw(TEST_USER_ID, TEST_AMOUNT, "–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞");

        UserBalanceEntity balanceBefore = balanceService.getOrCreateBalance(TEST_USER_ID);
        BigDecimal balanceBeforeRefund = balanceBefore.getCurrentBalance();

        // –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤
        BalanceTransactionEntity refundTransaction = balanceService.refundToBalance(
                TEST_USER_ID, TEST_AMOUNT, "TEST_ORDER", "–¢–µ—Å—Ç–æ–≤—ã–π –≤–æ–∑–≤—Ä–∞—Ç");

        // –ü—Ä–æ–≤–µ—Ä–∫–∏
        assertNotNull(refundTransaction, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞");
        assertEquals(TransactionType.REFUND, refundTransaction.getType(), "–¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å REFUND");

        UserBalanceEntity balanceAfter = balanceService.getOrCreateBalance(TEST_USER_ID);
        BigDecimal expectedBalance = balanceBeforeRefund.add(TEST_AMOUNT);
        assertEquals(expectedBalance, balanceAfter.getCurrentBalance(), "–ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω —É–≤–µ–ª–∏—á–∏—Ç—å—Å—è –Ω–∞ —Å—É–º–º—É –≤–æ–∑–≤—Ä–∞—Ç–∞");

        log.info("‚úÖ –¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    }

    @Test
    @Order(6)
    @DisplayName("üîí –¢–µ—Å—Ç —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤")
    void testReserveBalance() {
        log.info("üß™ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤...");

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        balanceService.deposit(TEST_USER_ID, INITIAL_DEPOSIT, "TEST_CARD", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞");

        // –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
        String testOrderId = "TEST001";
        BalanceTransactionEntity reserveTransaction = balanceService.reserveBalance(
                TEST_USER_ID, TEST_AMOUNT, testOrderId);

        // –ü—Ä–æ–≤–µ—Ä–∫–∏
        assertNotNull(reserveTransaction, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞");
        assertEquals(TransactionType.PURCHASE, reserveTransaction.getType(), "–¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å PURCHASE");
        assertEquals(TransactionStatus.PENDING, reserveTransaction.getStatus(), "–°—Ç–∞—Ç—É—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å PENDING");
        assertEquals(testOrderId, reserveTransaction.getOrderId(), "ID –∑–∞–∫–∞–∑–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –ø–æ–∫–∞ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        UserBalanceEntity balance = balanceService.getOrCreateBalance(TEST_USER_ID);
        assertEquals(INITIAL_DEPOSIT, balance.getCurrentBalance(), "–ë–∞–ª–∞–Ω—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –∏–∑–º–µ–Ω–∏—Ç—å—Å—è –ø—Ä–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–∏");

        // –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–∞
        balanceService.releaseReservedBalance(TEST_USER_ID, testOrderId);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞
        List<BalanceTransactionEntity> transactions = transactionRepository
                .findByOrderIdOrderByCreatedAtDesc(testOrderId);
        assertTrue(transactions.stream().anyMatch(t -> t.getStatus() == TransactionStatus.CANCELLED),
                "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω–∞");

        log.info("‚úÖ –¢–µ—Å—Ç —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    }

    @Test
    @Order(7)
    @DisplayName("‚öôÔ∏è –¢–µ—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏")
    void testAdminAdjustment() {
        log.info("üß™ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏...");

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        balanceService.deposit(TEST_USER_ID, INITIAL_DEPOSIT, "TEST_CARD", "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞");

        UserBalanceEntity balanceBefore = balanceService.getOrCreateBalance(TEST_USER_ID);
        BigDecimal adjustmentAmount = new BigDecimal("50.00");

        // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
        BalanceTransactionEntity adjustmentTransaction = balanceService.adjustBalance(
                TEST_USER_ID, adjustmentAmount, "–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞", "admin");

        // –ü—Ä–æ–≤–µ—Ä–∫–∏
        assertNotNull(adjustmentTransaction, "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞");
        assertEquals(TransactionType.ADJUSTMENT, adjustmentTransaction.getType(), "–¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ADJUSTMENT");
        assertEquals("admin", adjustmentTransaction.getProcessedBy(), "–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å admin");

        UserBalanceEntity balanceAfter = balanceService.getOrCreateBalance(TEST_USER_ID);
        BigDecimal expectedBalance = balanceBefore.getCurrentBalance().add(adjustmentAmount);
        assertEquals(expectedBalance, balanceAfter.getCurrentBalance(), "–ë–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω");

        log.info("‚úÖ –¢–µ—Å—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    }

    @Test
    @Order(8)
    @DisplayName("üìä –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ª–∏–º–∏—Ç–æ–≤")
    void testValidationLimits() {
        log.info("üß™ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ª–∏–º–∏—Ç–æ–≤...");

        // –¢–µ—Å—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
        BigDecimal tooSmallAmount = new BigDecimal("0.001");
        RuntimeException exception1 = assertThrows(RuntimeException.class, () -> {
            validationService.validateDepositAmount(tooSmallAmount);
        });
        assertTrue(exception1.getMessage().contains("–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞"),
                "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–µ");

        // –¢–µ—Å—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º—ã
        BigDecimal tooLargeAmount = new BigDecimal("50000.00");
        RuntimeException exception2 = assertThrows(RuntimeException.class, () -> {
            validationService.validateDepositAmount(tooLargeAmount);
        });
        assertTrue(exception2.getMessage().contains("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞"),
                "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–µ");

        // –¢–µ—Å—Ç null –∑–Ω–∞—á–µ–Ω–∏—è
        RuntimeException exception3 = assertThrows(RuntimeException.class, () -> {
            validationService.validateDepositAmount(null);
        });
        assertTrue(exception3.getMessage().contains("–Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π"),
                "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –æ –ø—É—Å—Ç–æ–º –∑–Ω–∞—á–µ–Ω–∏–∏");

        log.info("‚úÖ –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ª–∏–º–∏—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    }

    @Test
    @Order(9)
    @DisplayName("‚ö° –¢–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
    void testConcurrentOperations() throws InterruptedException {
        log.info("üß™ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...");

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        balanceService.deposit(TEST_USER_ID, new BigDecimal("1000.00"), "TEST_CARD",
                "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–º —Ç–µ—Å—Ç–∞–º");

        // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∞
        int threadCount = 10;
        BigDecimal amountPerOperation = new BigDecimal("10.00");
        ExecutorService executor = Executors.newFixedThreadPool(threadCount);
        CountDownLatch latch = new CountDownLatch(threadCount);

        UserBalanceEntity initialBalance = balanceService.getOrCreateBalance(TEST_USER_ID);
        BigDecimal initialAmount = initialBalance.getCurrentBalance();

        // –ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å–ø–∏—Å–∞–Ω–∏—è
        for (int i = 0; i < threadCount; i++) {
            final int operationNumber = i;
            executor.submit(() -> {
                try {
                    balanceService.withdraw(TEST_USER_ID, amountPerOperation,
                            "–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è #" + operationNumber);
                } catch (Exception e) {
                    log.warn("–û–ø–µ—Ä–∞—Ü–∏—è #{} –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {}", operationNumber, e.getMessage());
                } finally {
                    latch.countDown();
                }
            });
        }

        // –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        latch.await();
        executor.shutdown();

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        UserBalanceEntity finalBalance = balanceService.getOrCreateBalance(TEST_USER_ID);

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        List<BalanceTransactionEntity> allWithdrawals = transactionRepository
                .findByUserIdAndTypeOrderByCreatedAtDesc(TEST_USER_ID, TransactionType.WITHDRAWAL);
        List<BalanceTransactionEntity> completedTransactions = allWithdrawals.stream()
                .filter(t -> t.getStatus() == TransactionStatus.COMPLETED)
                .toList();

        long successfulOperations = completedTransactions.stream()
                .filter(t -> t.getDescription().contains("–ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è"))
                .count();

        BigDecimal expectedBalance = initialAmount.subtract(
                amountPerOperation.multiply(BigDecimal.valueOf(successfulOperations)));

        assertEquals(expectedBalance, finalBalance.getCurrentBalance(),
                "–§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π");

        log.info("‚úÖ –¢–µ—Å—Ç –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ. –£—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π: {}", successfulOperations);
    }

    @Test
    @Order(10)
    @DisplayName("üìà –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∞")
    void testBalanceStatistics() {
        log.info("üß™ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∞...");

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        balanceService.deposit(TEST_USER_ID, new BigDecimal("200.00"), "TEST_CARD", "–ü–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ");
        balanceService.deposit(TEST_USER_ID, new BigDecimal("100.00"), "TEST_BANK", "–í—Ç–æ—Ä–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ");
        balanceService.withdraw(TEST_USER_ID, new BigDecimal("50.00"), "–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞");

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        Map<String, Object> statistics = balanceService.getBalanceStatistics(TEST_USER_ID);

        // –ü—Ä–æ–≤–µ—Ä–∫–∏
        assertNotNull(statistics, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω–∞");
        assertTrue(statistics.containsKey("currentBalance"), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å");
        assertTrue(statistics.containsKey("totalDeposited"), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—â–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π");
        assertTrue(statistics.containsKey("totalSpent"), "–î–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—â–∞—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç");
        assertTrue(statistics.containsKey("transactionCount"), "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π");

        BigDecimal currentBalance = (BigDecimal) statistics.get("currentBalance");
        BigDecimal totalDeposited = (BigDecimal) statistics.get("totalDeposited");
        BigDecimal totalSpent = (BigDecimal) statistics.get("totalSpent");

        assertEquals(new BigDecimal("250.00"), currentBalance, "–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 250.00");
        assertEquals(new BigDecimal("300.00"), totalDeposited, "–û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 300.00");
        assertEquals(new BigDecimal("50.00"), totalSpent, "–û–±—â–∞—è —Å—É–º–º–∞ —Ç—Ä–∞—Ç –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 50.00");

        log.info("‚úÖ –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–ª–∞–Ω—Å–∞ –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    }

    @Test
    @Order(11)
    @DisplayName("üï∞Ô∏è –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã")
    void testPerformance() {
        log.info("üß™ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...");

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–ª–∞–Ω—Å–∞
        balanceService.deposit(TEST_USER_ID, new BigDecimal("10000.00"), "TEST_CARD",
                "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Ç–µ—Å—Ç—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏");

        int operationCount = 100;
        BigDecimal operationAmount = new BigDecimal("1.00");

        // –ò–∑–º–µ—Ä–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π
        long startTime = System.currentTimeMillis();

        for (int i = 0; i < operationCount; i++) {
            if (i % 2 == 0) {
                balanceService.deposit(TEST_USER_ID, operationAmount, "PERF_TEST", "–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ #" + i);
            } else {
                balanceService.withdraw(TEST_USER_ID, operationAmount, "–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ #" + i);
            }
        }

        long endTime = System.currentTimeMillis();
        long executionTime = endTime - startTime;
        double operationsPerSecond = (double) operationCount / (executionTime / 1000.0);

        log.info("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:");
        log.info("   –û–ø–µ—Ä–∞—Ü–∏–π: {}", operationCount);
        log.info("   –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {} –º—Å", executionTime);
        log.info("   –û–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É: {:.2f}", operationsPerSecond);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–ª–µ–º–∞—è (–º–∏–Ω–∏–º—É–º 10 –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É)
        assertTrue(operationsPerSecond >= 10.0,
                "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π –≤ —Å–µ–∫—É–Ω–¥—É");

        log.info("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    }

    @Test
    @Order(12)
    @DisplayName("üîç –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã")
    void testSystemIntegrity() {
        log.info("üß™ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...");

        // –°–ª–æ–∂–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
        String orderId = "INTEGRITY_TEST";

        // 1. –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        balanceService.deposit(TEST_USER_ID, new BigDecimal("500.00"), "TEST_CARD", "–ù–∞—á–∞–ª—å–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ");

        // 2. –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
        balanceService.reserveBalance(TEST_USER_ID, new BigDecimal("100.00"), orderId);

        // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞
        balanceService.processBalancePayment(TEST_USER_ID, orderId, new BigDecimal("100.00"));

        // 4. –ß–∞—Å—Ç–∏—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç
        balanceService.refundToBalance(TEST_USER_ID, new BigDecimal("30.00"), orderId, "–ß–∞—Å—Ç–∏—á–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç");

        // 5. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞
        balanceService.adjustBalance(TEST_USER_ID, new BigDecimal("25.00"), "–ë–æ–Ω—É—Å", "system");

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        UserBalanceEntity finalBalance = balanceService.getOrCreateBalance(TEST_USER_ID);
        List<BalanceTransactionEntity> allTransactions = transactionRepository
                .findByUserIdOrderByCreatedAtDesc(TEST_USER_ID);

        // –ü—Ä–æ–≤–µ—Ä–∫–∏
        assertNotNull(finalBalance, "–§–∏–Ω–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å");
        assertFalse(allTransactions.isEmpty(), "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –±–∞–ª–∞–Ω—Å–∞
        BigDecimal expectedBalance = new BigDecimal("455.00"); // 500 - 100 + 30 + 25
        assertEquals(expectedBalance, finalBalance.getCurrentBalance(),
                "–ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        assertEquals(5, allTransactions.size(), "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 5 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π");

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        long completedCount = allTransactions.stream()
                .filter(t -> t.getStatus() == TransactionStatus.COMPLETED)
                .count();
        assertEquals(4, completedCount, "4 —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω—ã");

        log.info("‚úÖ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ");
    }

    @AfterEach
    void tearDown() {
        log.info("üßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...");
        // –û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
        try {
            List<BalanceTransactionEntity> userTransactions = transactionRepository
                    .findByUserIdOrderByCreatedAtDesc(TEST_USER_ID);
            transactionRepository.deleteAll(userTransactions);

            List<BalanceTransactionEntity> userTransactions2 = transactionRepository
                    .findByUserIdOrderByCreatedAtDesc(TEST_USER_ID_2);
            transactionRepository.deleteAll(userTransactions2);

            userBalanceRepository.findByUserId(TEST_USER_ID).ifPresent(userBalanceRepository::delete);
            userBalanceRepository.findByUserId(TEST_USER_ID_2).ifPresent(userBalanceRepository::delete);
        } catch (Exception e) {
            log.warn("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {}", e.getMessage());
        }
    }

    @AfterAll
    static void generateTestReport() {
        log.info("");
        log.info("üéØ –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò –°–ò–°–¢–ï–ú–´ –ë–ê–õ–ê–ù–°–ê");
        log.info("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        log.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã!");
        log.info("üìã –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:");
        log.info("   ‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º");
        log.info("   ‚Ä¢ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤");
        log.info("   ‚Ä¢ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –ª–∏–º–∏—Ç–æ–≤");
        log.info("   ‚Ä¢ –†–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤");
        log.info("   ‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏");
        log.info("   ‚Ä¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏");
        log.info("   ‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã");
        log.info("   ‚Ä¢ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö");
        log.info("‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê");
        log.info("");
    }
}